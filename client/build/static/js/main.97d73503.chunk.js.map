{"version":3,"sources":["assets/images/planet0.png","assets/images/planet1.png","assets/images/planet2.png","assets/images/planet3.png","assets/images/planet4.png","assets/images/planet5.png","assets/images/planet6.png","assets/images/temple.png","assets/songs/planet0.wav","assets/songs/planet1.wav","assets/songs/planet2.wav","assets/songs/planet3.wav","assets/songs/planet4.wav","assets/songs/planet5.wav","assets/songs/planet6.wav","fonts/telegrama.woff","assets/sounds/travelling.wav","assets/sounds/miningSuccess.wav","assets/sounds/aCrystalWasForged.wav","components/reusables/Crystal.js","utils/planets.js","globalStyles.js","utils/getWeb3.js","utils/colorFromFlavour.js","components/reusables/Laserframe.js","components/reusables/Loader.js","components/screens/Welcome.js","utils/getRevertMsg.js","components/screens/SpaceshipDealer.js","components/screens/Travel.js","components/screens/Travelling.js","components/screens/planet/PlanetIntro.js","redux/store.js","redux/reducers/index.js","redux/reducers/web3.js","redux/reducers/contracts.js","redux/reducers/view.js","redux/reducers/user.js","redux/reducers/industrial.js","redux/reducers/audio.js","redux/reducers/eth.js","redux/initialState.js","utils/commodities.js","utils/getPlayerInfo.js","components/screens/planet/FuelMeter.js","components/screens/planet/PlanetHome.js","components/screens/planet/CargoMeter.js","components/screens/planet/MPIContainer.js","utils/handleChange.js","utils/uuid.js","utils/ellipAddr.js","components/reusables/SellOrder.js","components/screens/planet/PlanetMarketplace.js","components/screens/planet/MiningPad.js","components/screens/planet/PlanetIndustrial.js","components/reusables/PricesRow.js","components/screens/planet/PlanetPrices.js","components/screens/planet/TempleMarketplace.js","components/screens/planet/TempleIndustrial.js","components/screens/planet/TempleViewCrystals.js","components/reusables/Dialog.js","App.js","utils/screenMapping.js","registerServiceWorker.js","index.js","assets/images/spaceship.jpg","assets/sounds/receivedSomething.wav"],"names":["module","exports","__webpack_require__","p","Crystal","componentDidMount","_this","renderCrystal","uri","props","color","eval","substr","metalness","parseInt","roughness","aspectDenom","zoom","scene","THREE","cam","updateProjectionMatrix","renderer","alpha","antialias","setClearColor","setSize","divs","document","getElementsByClassName","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","next","done","div","value","appendChild","domElement","err","return","box","mesh","cube","add","light","position","set","light2","lookAt","z","render","requestAnimationFrame","rotation","y","this","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","Component","utils_planets","id","name","img","imgPlanet0","x","song","songPlanet0","imgPlanet1","songPlanet1","imgPlanet2","songPlanet2","imgPlanet3","songPlanet3","imgPlanet4","songPlanet4","imgPlanet5","songPlanet5","imgPlanet6","songPlanet6","imgTemple","globalStyles","@global","body","backgroundColor","fontFamily","margin","display","flexDirection","justifyContent","alignItems","userSelect","backdrop-filter","@font-face","src","concat","telegrama","App","width","minHeight","backgroundRepeat","backgroundPosition","backgroundSize","@keyframes vibrate1","0%","-webkit-transform","transform","20%","40%","60%","80%","100%","getWeb3","Promise","resolve","reject","window","addEventListener","Object","asyncToGenerator","regenerator_default","mark","_callee","web3","_web","provider","_web2","wrap","_context","prev","ethereum","Web3","enable","t0","console","log","providers","HttpProvider","stop","colorFromFlavour","styles","Laserframe","textAlign","border","_ref","flavour","_ref2","_ref3","active","_ref4","size","borderRadius","padding","cursor","_ref5","isButton","&:hover","_ref6","_ref7","_this$props","classes","children","onClick","react_default","React","injectSheet","Loader","_ref$size","height","viewBox","xmlns","stroke","fill","fillRule","strokeWidth","strokeOpacity","cx","cy","r","d","attributeName","type","from","to","dur","repeatCount","Welcome","goToNextScreen","user","changeScreen","ownsSpaceship","container","reusables_Laserframe","connect","state","ownProps","contracts","dispatch","screen","getRevertMsg","string","vmError","i","lastIndexOf","substring","length","SpaceshipDealer","isLoading","loadingText","buySpaceship","setDialogBox","setState","gta","address","utils","toWei","on","receipt","e","message","_this$state","spaceship","reusables_Loader","content","Travel","startTravelling","planetId","setTravellingTo","currentPlanet","abrupt","_this2","_this$props2","planets","map","planet","key","style","left","innerWidth","PWIDTH","bottom","innerHeight","alt","travellingTo","& h1","zIndex","&:hover > div","opacity","& > div","Travelling","isTravelling","travelToPlanet","setUserInfo","find","react_sound_lib_default","url","travellingSound","playStatus","Sound","status","PLAYING","volume","info","travellingSpaceship","animation","PlanetIntro","soundHasPlayed","setIndustrialState","areasMined","onFinishedPlaying","industrialState","reduxDevTools","appReducer","combineReducers","action","objectSpread","instance","defineProperty","view","currentScreen","noDefaultButton","dialogBox","industrial","audio","audioState","eth","ethState","persistConfig","storage","stateReconciler","hardSet","persistedReducer","persistReducer","store","createStore","persistor","persistStore","utils_commodities","symbol","getPlayerInfo","_callee2","playerInfo","currentCargo","balance","cargoPerCommodity","_context2","getState","getInfo","sent","commodities","getCurrentCargo","getBalance","all","amount","toString","_x3","_x4","apply","arguments","currentFuel","maxCargo","maxFuel","spaceshipName","fromWei","_x","_x2","FuelMeter","isRefueling","refuelCost","doneFueling","checkRefuelCost","error","refuel","_callee3","_context3","_this$props3","isFull","react","fa","receivedSomething","PlanetHome","top3","md","icon","planet_FuelMeter","& > div:nth-child(1)","& > div:nth-child(2)","& > div:nth-child(3)","planetImg","svg","CargoMeter","_ref$current","current","_ref$max","max","_ref$cargoPerCommodit","commodity","MPIContainer","navLinks","sideButtons","label","planet_CargoMeter","marginTop","sideButton","fn","link","& > div:first-child","flex","& > div:last-child","handleChange","event","target","checked","b","Math","random","replace","SellOrder","items","addr","seller","price","isHeader","String","item","isSelected","fontWeight","PlanetMarketplace","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getCommodities","getSellOrders","selectedCommodityId","numSellOrders","sellOrderIds","sellOrders","gea","getNumSellOrders","Array","Number","sellOrderId","sellOrder","getSellOrder","commoditiesTraded","commodityInfos","commodityBalances","getCommoditiesTraded","getCommodityInfos","getCommodityBalances","commodityInfo","myBalance","_callee5","_context5","_callee4","_context4","commodityIdBN","toNumber","_callee7","commodityIds","_context7","_callee6","_context6","getName","t1","getSymbol","t2","t3","push","t4","finish","t5","_x6","_x7","_x5","_ref8","_callee9","_this$props4","_context9","_ref9","_callee8","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_context8","_x9","_x10","_x8","createSellOrder","_callee10","_this$props5","sellAmount","sellPrice","_context10","isSellBoxVisible","onClickBuy","_callee11","_this$props6","_this$state2","selectedSellOrderId","_context11","buySellOrder","mul","onClickSell","_this$state3","findIndex","sellBox","defaultValue","onChange","bind","assertThisInitialized","_","prevState","_this$state4","planet_MPIContainer","reusables_SellOrder","filter","open","uuid","orderId","marginBottom","MiningPad","mineArea","start","end","isMining","areaStart","areaEnd","areaSize","wasMined","isArray","includes","char","area","onMouseEnter","stopPropagation","nonce","onMouseLeave","grid-template-columns","grid-template-rows","fontSize","paddingTop","AREA_SIZE","PlanetIndustrial","getCommodity","componentDidUpdate","prevProps","_this$props$industria","commodityName","step","get","commoditySymbol","miningReward","miningTarget","prevMiningHash","_this$props$industria2","hash","sha256","toLowerCase","checkIfHashUnderTarget","playSuccessSound","hasValidProof","stopMining","submitProof","oldQuant","newQuant","isSubmitting","gia","submitProofOfWork","playReceivedSound","planet_MiningPad","miningSuccess","acceptDecline","PricesRow","minMaxes","slice","unshift","min","PlanetPrices","commoditiesMinMaxes","getAllSellOrders","commoditiesPrices","_loop","commodityId","_loop2","order","delegateYield","lt","gt","reusables_PricesRow","commodityMinMaxes","TempleMarketplace","getCrystalsForSale","crystalIds","crystals","crystal","sellData","temple","crystalURI","entries","slicedToArray","getCrystalSellData","t6","buy","selectedCrystalId","crystalRow","defaultButtonText","TempleIndustrial","forge","buttonText","getLatestCrystalURI","lastURI","lastId","crystalsOfOwner","playSound","aCrystalWasForged","TempleViewCrystals","sell","Dialog","backdrop","isVisible","background","isInitialized","initWeb3AndContracts","initEventListening","checkIfOwnsSpaceship","accounts","setWeb3","getAccounts","setAddress","json","commoditiesJSON","gtaJSON","geaJSON","giaJSON","templeJSON","contract","Contract","truffleContract","setProvider","currentProvider","deployed","forEach","addContract","setEthState","CommodityMined","fromBlock","data","_data$returnValues","returnValues","_miner","_hash","subscribe","blockNumber","number","spaceshipsOwned","balanceOf","componentDidCatch","errorInfo","closeDialogBox","styleObject","backgroundImage","bgImage","screens_Welcome","screens_SpaceshipDealer","screens_Travel","screens_Travelling","planet_PlanetIntro","planet_PlanetHome","planet_PlanetMarketplace","planet_PlanetIndustrial","planet_PlanetPrices","planet_TempleMarketplace","planet_TempleIndustrial","planet_TempleViewCrystals","screenMapping","reusables_Dialog","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","es","integration_react","loading","src_App","getElementById","URL","process","origin","fetch","response","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,k7n7BCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,4DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,+DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,w3CCGlCC,0zBACJC,kBAAoB,WAClBC,MAAKC,uBAGPA,cAAgB,WAAM,IACZC,IAAQF,MAAKG,MAAbD,IAGFE,MAAQC,KAAK,KAAOH,IAAII,OAAO,EAAG,IAClCC,UAAYC,SAASN,IAAII,OAAO,EAAG,GAAI,IAAM,IAC7CG,UAAYD,SAASN,IAAII,OAAO,EAAG,GAAI,IAAM,IAC7CI,YAAgBF,SAASN,IAAII,OAAO,GAAI,GAAI,IAAM,IAAO,GAAM,EAC/DK,KAASH,SAASN,IAAII,OAAO,GAAI,GAAI,IAAM,IAAO,GAAO,IAE3DM,MAAQ,IAAIC,qCAGZC,IAAM,IAAID,qCAAwB,IAAK,GAAGH,YAAa,GAAK,KAChEI,IAAIH,KAAOA,KACXG,IAAIC,yBACJ,IAAIC,SAAW,IAAIH,qCAAoB,CAAEI,OAAO,EAAMC,WAAW,IACjEF,SAASG,cAAc,EAAU,KACjCH,SAASI,QAAQ,GAAI,KAErB,IAAMC,KAAOC,SAASC,uBAAuBrB,KApBzBsB,2BAAA,EAAAC,mBAAA,EAAAC,oBAAAC,EAAA,IAqBpB,QAAAC,UAAkBP,KAAlBQ,OAAAC,YAAAC,QAAAP,2BAAAO,MAAAH,UAAAI,QAAAC,MAAAT,2BAAA,EAAwB,KAAbU,IAAaH,MAAAI,MACtBD,IAAIE,YAAYpB,SAASqB,aAtBP,MAAAC,KAAAb,mBAAA,EAAAC,eAAAY,IAAA,YAAAd,2BAAA,MAAAI,UAAAW,QAAAX,UAAAW,SAAA,WAAAd,kBAAA,MAAAC,gBAyBpB,IAAIc,IAAM,IAAI3B,qCAAqB,EAAG,EAAG,GACrC4B,KAAO,IAAI5B,qCAA2B,CACxCT,MAAOA,MACPG,UAAWA,UACXE,UAAWA,YAETiC,KAAO,IAAI7B,qCAAW2B,IAAKC,MAC/B7B,MAAM+B,IAAID,MAEV,IAAIE,MAAQ,IAAI/B,qCAAiB,SAAU,EAAG,EAAG,GACjD+B,MAAMC,SAASC,IAAI,IAAK,IAAK,KAC7BlC,MAAM+B,IAAIC,OAEV,IAAIG,OAAS,IAAIlC,qCAAoB,SAAU,EAAG,IAAK,KACvDkC,OAAOF,SAASC,KAAK,KAAM,IAAK,KAChCC,OAAOC,OAAQ,EAAG,EAAG,GACrBpC,MAAM+B,IAAII,QAEVjC,IAAI+B,SAASI,EAAI,KAEjB,IAAIC,OAAS,SAATA,IACFC,sBAAsBD,GACtBR,KAAKU,SAASC,GAAK,IACnBrC,SAASkC,OAAOtC,MAAOE,MAGzBoC,saAGO,IACChD,EAAQoD,KAAKnD,MAAbD,IAER,OACEqD,2CAAAC,EAAAC,cAAA,OAAKC,UAAWxD,iBA/DAyD,8CAmEP7D,+cCpDA8D,EAAA,CAEb,CAAEC,GAAI,EAAGC,KAAM,WAAYC,IAAKC,IAAYC,EAAG,GAAIZ,EAAG,GAAIa,KAAMC,KAChE,CAAEN,GAAI,EAAGC,KAAM,SAAYC,IAAKK,IAAYH,EAAG,GAAIZ,EAAG,GAAIa,KAAMG,KAChE,CAAER,GAAI,EAAGC,KAAM,QAAYC,IAAKO,IAAYL,EAAG,EAAIZ,EAAG,EAAIa,KAAMK,KAChE,CAAEV,GAAI,EAAGC,KAAM,WAAYC,IAAKS,IAAYP,EAAG,GAAIZ,EAAG,GAAIa,KAAMO,KAChE,CAAEZ,GAAI,EAAGC,KAAM,UAAYC,IAAKW,IAAYT,EAAG,GAAIZ,EAAG,GAAIa,KAAMS,KAChE,CAAEd,GAAI,EAAGC,KAAM,SAAYC,IAAKa,IAAYX,EAAG,GAAIZ,EAAG,GAAIa,KAAMW,KAChE,CAAEhB,GAAI,EAAGC,KAAM,QAAYC,IAAKe,IAAYb,EAAG,GAAIZ,EAAG,GAAIa,KAAMa,KAChE,CAAElB,GAAI,IAAKC,KAAM,qBAAsBC,IAAKiB,IAAWf,EAAG,GAAIZ,EAAG,cCxBpD4B,EAAA,CACbC,UAAW,CACTC,KAAM,CACJC,gBAAiB,QACjBhF,MAAO,QACPiF,WAAY,YACZC,OAAQ,GAEVpD,IAAK,CACHqD,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,SACZC,WAAY,OACZC,kBAAmB,eAGvBC,aAAc,CACZR,WAAY,YACZS,IAAG,OAAAC,cAASC,EAAT,qBAGLC,IAAK,CACHC,MAAO,OACPC,UAAW,QACXV,eAAgB,aAEhBW,iBAAkB,YAClBC,mBAAoB,SACpBC,eAAgB,QAGlBC,sBAAuB,CACrBC,KAAM,CACJC,oBAAqB,eACbC,UAAa,gBAEvBC,MAAO,CACLF,oBAAqB,uBACbC,UAAa,wBAEvBE,MAAO,CACLH,oBAAqB,wBACbC,UAAa,yBAEvBG,MAAO,CACLJ,oBAAqB,sBACbC,UAAa,uBAEvBI,MAAO,CACLL,oBAAqB,uBACbC,UAAa,wBAEvBK,OAAQ,CACNN,oBAAqB,eACbC,UAAa,qFCrBZM,GAnCC,kBACd,IAAIC,QAAQ,SAACC,EAASC,GAEpBC,OAAOC,iBAAiB,OAAxBC,OAAAC,EAAA,EAAAD,CAAAE,EAAAhE,EAAAiE,KAAgC,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAN,EAAAhE,EAAAuE,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAhG,MAAA,WAE1BoF,OAAOc,SAFmB,CAAAF,EAAAhG,KAAA,gBAGtB2F,EAAO,IAAIQ,KAAKf,OAAOc,UAHDF,EAAAC,KAAA,EAAAD,EAAAhG,KAAA,EAMpBoF,OAAOc,SAASE,SANI,OAQ1BlB,EAAQS,GARkBK,EAAAhG,KAAA,gBAAAgG,EAAAC,KAAA,EAAAD,EAAAK,GAAAL,EAAA,SAU1Bb,EAAMa,EAAAK,IAVoB,QAAAL,EAAAhG,KAAA,iBAcrBoF,OAAOO,MAERA,EAAOP,OAAOO,KACpBW,QAAQC,IAAI,2BACZrB,EAAQS,KAIFE,EAAW,IAAIM,KAAKK,UAAUC,aAClC,yBAEId,EAAO,IAAIQ,KAAKN,GACtBS,QAAQC,IAAI,gDACZrB,EAAQS,IA3BoB,yBAAAK,EAAAU,SAAAhB,EAAApE,KAAA,qCCLrBqF,GAAA,SAAAvI,GACb,OAAOA,GACL,IAAK,OAAQ,MAAO,OACpB,IAAK,MAAO,MAAO,OACnB,IAAK,SAAU,MAAO,OACtB,IAAK,OAAQ,MAAO,OACpB,IAAK,OAAQ,MAAO,OACpB,QAAS,MAAO,SCHdwI,GAAS,CACbC,WAAY,CACVC,UAAW,SACXC,OAAQ,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,QAAH,MAAiB,aAAeN,GAAiBM,IACzD7I,MAAO,SAAA8I,GAAA,IAAGD,EAAHC,EAAGD,QAAH,OAAiBN,GAAiBM,IACzC7D,gBAAiB,SAAA+D,GACf,OAD+BA,EAAbC,OAEX,OADa,uBAGtBlD,MAAO,SAAAmD,GACL,OADmBA,EAAXC,MAEN,IAAK,OAAQ,MAAO,iBACpB,IAAK,QAAS,MAAO,cACrB,IAAK,QAAS,MAAO,YACrB,IAAK,QAAS,MAAO,QAGzBC,aAAc,EACdC,QAAS,OACTlE,OAAQ,MACRmE,OAAQ,SAAAC,GAAA,OAAAA,EAAGC,SAA0B,UAAY,WACjDhE,WAAY,OACZiE,UAAW,CACTxJ,MAAO,SAAAyJ,GAAA,OAAAA,EAAGF,SAA0B,OAAS,MAC7CvE,gBAAiB,SAAA0E,GAAA,IAAGH,EAAHG,EAAGH,SAAUV,EAAba,EAAab,QAAb,OAA2BU,EAAWhB,GAAiBM,GAAW,SAKnFJ,oLACK,IAAAkB,EACgCzG,KAAKnD,MAApC6J,EADDD,EACCC,QAASC,EADVF,EACUE,SAAUC,EADpBH,EACoBG,QAE3B,OACEC,EAAA3G,EAAAC,cAAA,OACEC,UAAWsG,EAAQnB,WACnBqB,QAAS,WACHA,GAASA,MAGbD,UAXeG,IAAMzG,WAkBhBkF,GADfA,GAAawB,IAAYzB,GAAZyB,CAAoBxB,ICxC7ByB,GAAS,SAAAtB,GAAA,IAAGgB,EAAHhB,EAAGgB,QAASf,EAAZD,EAAYC,QAAZsB,EAAAvB,EAAqBM,YAArB,IAAAiB,EAA4B,GAA5BA,EAAA,OAEXJ,EAAA3G,EAAAC,cAAA,OAAKC,UAAWsG,EAAQM,OAAQpE,MAAOoD,EAAMkB,OAAQlB,EAAMmB,QAAQ,YAAYC,MAAM,6BAA6BC,OAAQhC,GAAiBM,IACzIkB,EAAA3G,EAAAC,cAAA,KAAGmH,KAAK,OAAOC,SAAS,WACtBV,EAAA3G,EAAAC,cAAA,KAAGiD,UAAU,iBAAiBoE,YAAY,KACxCX,EAAA3G,EAAAC,cAAA,UAAQsH,cAAc,KAAKC,GAAG,KAAKC,GAAG,KAAKC,EAAE,OAC7Cf,EAAA3G,EAAAC,cAAA,QAAM0H,EAAE,+BACNhB,EAAA3G,EAAAC,cAAA,oBACE2H,cAAc,YACdC,KAAK,SACLC,KAAK,UACLC,GAAG,YACHC,IAAI,KACJC,YAAY,oBASTnB,GADfA,GAASD,IA3BM,CACbC,OAAQ,CACNhF,OAAQ,QAyBH+E,CAAoBC,ICrBvBoB,8MACJC,eAAiB,WAAM,IAAA5B,EACS/J,EAAKG,MAA3ByL,EADa7B,EACb6B,KAAMC,EADO9B,EACP8B,aAEVD,EAAKE,cACPD,EAAa,UAEbA,EAAa,4FAGR,IACC7B,EAAY1G,KAAKnD,MAAjB6J,QAER,OACEG,EAAA3G,EAAAC,cAAA,OAAKC,UAAWsG,EAAQ+B,WACtB5B,EAAA3G,EAAAC,cAAA,2BACA0G,EAAA3G,EAAAC,cAACuI,GAAD,CACErC,UAAQ,EACRO,QAAS5G,KAAKqI,eACd1C,QAAQ,QAHV,oBAhBctF,aAuCtB+H,GAAUO,YAbc,SAACC,EAAOC,GAC9B,MAAO,CACLC,UAAWF,EAAME,UACjBR,KAAMM,EAAMN,OAIW,SAAAS,GACzB,MAAO,CACLR,aAAc,SAAAS,GAAM,OAAID,EAAS,CAAEhB,KAAM,gBAAiBiB,cAIpDL,CAA6CP,IAExCA,OADfA,GAAUrB,IA5CK,CACb0B,UAAW,IA2CH1B,CAAoBqB,wBClDfa,GAAA,SAASC,GAEtB,IAAMC,EAAU,4DACVC,EAAIF,EAAOG,YAAYF,GAC7B,OAAOD,EAAOI,UAAUF,EAAID,EAAQI,SCQhCC,8MACJZ,MAAQ,CACNa,WAAW,EACXC,YAAa,MAGfC,kCAAe,SAAAvF,IAAA,IAAAqC,EAAApC,EAAAyE,EAAAR,EAAAC,EAAAqB,EAAA,OAAA1F,EAAAhE,EAAAuE,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAhG,MAAA,OACbhC,EAAKmN,SAAS,CAAEJ,WAAW,EAAMC,YAAa,oDADjCjD,EAGiD/J,EAAKG,MAA3DwH,EAHKoC,EAGLpC,KAAMyE,EAHDrC,EAGCqC,UAAWR,EAHZ7B,EAGY6B,KAAMC,EAHlB9B,EAGkB8B,aAAcqB,EAHhCnD,EAGgCmD,aAE7Cd,EAAUgB,IAAIH,aACZ,eACA,CAAE3B,KAAMM,EAAKyB,QAASlL,MAAOwF,EAAK2F,MAAMC,MAAM,OAAQ,WAErDC,GAAG,kBAAmB,WACrBxN,EAAKmN,SAAS,CAAEJ,WAAW,EAAMC,YAAa,2DAE/CQ,GAAG,UAAW,SAAAC,GACb5B,EAAa,YAEd2B,GAAG,QAAS,SAAAE,GACX1N,EAAKmN,SAAS,CAAEJ,WAAW,IAC3BG,EAAaX,GAAamB,EAAEC,SAAU,SAjB7B,wBAAA3F,EAAAU,SAAAhB,EAAApE,iFAqBN,IACC0G,EAAY1G,KAAKnD,MAAjB6J,QADD4D,EAE4BtK,KAAK4I,MAAhCa,EAFDa,EAECb,UAAWC,EAFZY,EAEYZ,YAEnB,OACE7C,EAAA3G,EAAAC,cAAA,OAAKC,UAAWsG,EAAQ+B,WACtB5B,EAAA3G,EAAAC,cAAA,yCACA0G,EAAA3G,EAAAC,cAAA,qDACA0G,EAAA3G,EAAAC,cAAA,2GACA0G,EAAA3G,EAAAC,cAAA,OAAKqC,IAAK+H,OACV1D,EAAA3G,EAAAC,cAACuI,GAAD,CACErC,UAAQ,EACRO,QAAS5G,KAAK2J,aACdhE,QAAQ,QACR8D,EAAY5C,EAAA3G,EAAAC,cAAA,WAAMuJ,EAAN,IAAmB7C,EAAA3G,EAAAC,cAACqK,GAAD,CAAQ7E,QAAQ,UAAkB,gBAzC7CtF,aA8D9BmJ,GAAkBb,YAfM,SAACC,EAAOC,GAC9B,MAAO,CACLC,UAAWF,EAAME,UACjBR,KAAMM,EAAMN,KACZjE,KAAMuE,EAAMvE,OAIW,SAAA0E,GACzB,MAAO,CACLR,aAAc,SAAAS,GAAM,OAAID,EAAS,CAAEhB,KAAM,gBAAiBiB,YAC1DY,aAAc,SAACa,EAAS9E,GAAV,OAAqBoD,EAAS,CAAEhB,KAAM,iBAAkB0C,UAAS9E,eAIjEgD,CAA6Ca,IAEhDA,OADfA,GAAkBzC,IAnEH,CACb0B,UAAW,IAkEK1B,CAAoByC,IC9ChCkB,8MACJ9B,MAAQ,KAER+B,sDAAkB,SAAAvG,EAAMwG,GAAN,IAAAnE,EAAA6B,EAAAC,EAAAsC,EAAA,OAAA3G,EAAAhE,EAAAuE,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAhG,MAAA,UAAA+H,EACgC/J,EAAKG,MAA7CyL,EADQ7B,EACR6B,KAAMC,EADE9B,EACF8B,aAAcsC,EADZpE,EACYoE,gBAGxBD,GAAYtC,EAAKwC,cAJL,CAAApG,EAAAhG,KAAA,eAAAgG,EAAAqG,OAAA,SAKPxC,EAAa,eALN,OAShBsC,EAAgBD,GAEhBrC,EAAa,cAXG,wBAAA7D,EAAAU,SAAAhB,EAAApE,uIAcT,IAAAgL,EAAAhL,KAAAiL,EACmBjL,KAAKnD,MAAvB6J,EADDuE,EACCvE,QAAS4B,EADV2C,EACU3C,KAEjB,OACEzB,EAAA3G,EAAAC,cAAA,OAAKC,UAAWsG,EAAQgE,QACtB7D,EAAA3G,EAAAC,cAAA,0CACA0G,EAAA3G,EAAAC,cAAA,OAAKC,UAAWsG,EAAQwE,SACrBA,EAAQC,IAAI,SAACC,EAAQhC,GAAT,OACXvC,EAAA3G,EAAAC,cAAA,OACEkL,IAAKjC,EACLhJ,UAAWsG,EAAQ0E,OACnBE,MAAO,CACLC,KAAQzH,OAAO0H,WAAa,IAAOJ,EAAOzK,EAAM8K,GAChDC,OAAU5H,OAAO6H,YAAc,IAAOP,EAAOrL,GAE/C6G,QAAS,kBAAMoE,EAAKL,gBAAgBS,EAAO7K,MAE3CsG,EAAA3G,EAAAC,cAAA,OACEqC,IAAK4I,EAAO3K,IACZmC,MA5DD,IA6DCgJ,IAAI,KAEN/E,EAAA3G,EAAAC,cAAA,WACIiL,EAAO5K,MAEV4K,EAAO7K,IAAM+H,EAAKwC,eAAiB,wBA1C7BzK,aAkErBqK,GAAS/B,YAfe,SAACC,EAAOC,GAC9B,MAAO,CACLC,UAAWF,EAAME,UACjBR,KAAMM,EAAMN,KACZjE,KAAMuE,EAAMvE,OAIW,SAAA0E,GACzB,MAAO,CACLR,aAAc,SAAAS,GAAM,OAAID,EAAS,CAAEhB,KAAM,gBAAiBiB,YAC1D6B,gBAAiB,SAAAgB,GAAY,OAAI9C,EAAS,CAAEhB,KAAM,oBAAqB8D,oBAIlElD,CAA6C+B,IAEvCA,OADfA,GAAS3D,IAzFM,CACb2D,OAAQ,CACNvI,eAAgB,aAChB2J,OAAQ,CACNC,OAAQ,IAGZb,QAAS,CACPtI,MAAO,QAETwI,OAAQ,CACN7L,SAAU,WACV4G,OAAQ,UACR6F,gBAAiB,CACfC,QAAS,GAEXC,UAAW,CACTD,QAAS,MAwENlF,CAAoB2D,6CC/EvByB,8MACJvD,MAAQ,CACNwD,cAAc,KAGhB3P,kBAAoB,WAClBC,EAAK2P,oBAGPA,eAAiB,WAAM,IAAA5F,EACgD/J,EAAKG,MAAlEiM,EADarC,EACbqC,UAAWR,EADE7B,EACF6B,KAAMC,EADJ9B,EACI8B,aAAc+D,EADlB7F,EACkB6F,YAAa1C,EAD/BnD,EAC+BmD,aAEpDd,EAAUgB,IAAIuC,eAAe/D,EAAKuD,aAAc,CAAE7D,KAAMM,EAAKyB,UAC1DG,GAAG,kBAAmB,WACrBxN,EAAKmN,SAAS,CAAEuC,cAAc,MAE/BlC,GAAG,UAAW,SAAAC,GACbmC,EAAY,CAAExB,cAAexC,EAAKuD,eAClCtD,EAAa,iBAEd2B,GAAG,QAAS,SAAAE,GACXR,EAAaX,GAAamB,EAAEC,SAAU,OACtC9B,EAAa,qFAIV,IAAA0C,EACiCjL,KAAKnD,MAArC6J,EADDuE,EACCvE,QAAuB4B,GADxB2C,EACUY,aADVZ,EACwB3C,MACvB8D,EAAiBpM,KAAK4I,MAAtBwD,aACFhB,EAASF,EAAQqB,KAAK,SAAAnB,GAAM,OAAIA,EAAO7K,IAAM+H,EAAKuD,eAExD,OACEhF,EAAA3G,EAAAC,cAAA,OAAKC,UAAWsG,EAAQ+B,WACpB2D,EAGAvF,EAAA3G,EAAAC,cAAA,2BAAgC,OAAbiL,EAAO7K,IAAe,UAAW6K,EAAO5K,KAA3D,OAFAqG,EAAA3G,EAAAC,cAAA,kDAIF0G,EAAA3G,EAAAC,cAAA,OACEqC,IAAK+H,KACLnK,UAAWsG,EAAQ0F,GAAgB,yBAErCvF,EAAA3G,EAAAC,cAACqM,GAAAtM,EAAD,CACEuM,IAAKC,KACLC,WAAYP,GAAgBQ,KAAMC,OAAOC,QACzCC,OAAQ,YA7CO1M,aAoEzB8L,GAAaxD,YAhBW,SAAAC,GACtB,MAAO,CACLiD,aAAcjD,EAAMN,KAAKuD,aACzB/C,UAAWF,EAAME,UACjBR,KAAMM,EAAMN,OAIW,SAAAS,GACzB,MAAO,CACLR,aAAc,SAAAS,GAAM,OAAID,EAAS,CAAEhB,KAAM,gBAAiBiB,YAC1DsD,YAAa,SAAAU,GAAI,OAAIjE,EAAS,CAAEhB,KAAM,gBAAiBiF,UACvDpD,aAAc,SAACa,EAAS9E,GAAV,OAAqBoD,EAAS,CAAEhB,KAAM,iBAAkB0C,UAAS9E,eAItEgD,CAA6CwD,IAE3CA,OADfA,GAAapF,IA7EE,CACb0B,UAAW,GAEXwE,oBAAqB,CACnBC,UAAW,uCAyEFnG,CAAoBoF,IC1E3BgB,8MACJvE,MAAQ,CACNwE,gBAAgB,KAGlB3Q,kBAAoB,WAElBC,EAAKG,MAAMwQ,mBAAmB,CAC5BC,WAAY,8EAIP,IAAAtC,EAAAhL,KACCoN,EAAmBpN,KAAK4I,MAAxBwE,eADD3G,EAEiCzG,KAAKnD,MAArC6J,EAFDD,EAECC,QAAS4B,EAFV7B,EAEU6B,KAAMC,EAFhB9B,EAEgB8B,aACjB6C,EAASF,EAAQqB,KAAK,SAAAnB,GAAM,OAAIA,EAAO7K,IAAM+H,EAAKwC,gBAExD,OACEjE,EAAA3G,EAAAC,cAAA,OAAKC,UAAWsG,EAAQyG,aACtBtG,EAAA3G,EAAAC,cAAA,wBAA6B,OAAbiL,EAAO7K,IAAe,UAAW6K,EAAO5K,MACxDqG,EAAA3G,EAAAC,cAACuI,GAAD,CACErC,UAAQ,EACRO,QAAS,kBAAM2B,EAAa,eAC5B5C,QAAQ,QAHV,eAKAkB,EAAA3G,EAAAC,cAAA,OACEqC,IAAK4I,EAAO3K,MAEdoG,EAAA3G,EAAAC,cAACqM,GAAAtM,EAAD,CACEuM,IAAKrB,EAAOxK,KACZ+L,YAAaS,GAAkBR,KAAMC,OAAOC,QAC5CC,OAAQ,GACRQ,kBAAmB,kBAAMvC,EAAKnB,SAAS,CAAEuD,gBAAgB,eAhCzC/M,aAoD1B8M,GAAcxE,YAbU,SAAAC,GACtB,MAAO,CACLN,KAAMM,EAAMN,OAIW,SAAAS,GACzB,MAAO,CACLR,aAAc,SAAAS,GAAM,OAAID,EAAS,CAAEhB,KAAM,gBAAiBiB,YAC1DqE,mBAAoB,SAAAG,GAAe,OAAIzE,EAAS,CAAEhB,KAAM,uBAAwByF,uBAItE7E,CAA6CwE,IAE5CA,IChDXM,GDgDWN,GADfA,GAAcpG,IA1DC,CACboG,YAAa,IAyDDpG,CAAoBoG,4FEvD5BO,GAAaC,aAAgB,CACjCtJ,KCXa,SAACuE,EAAOgF,GACrB,OAAQA,EAAO7F,MACb,IAAK,WACH,OAAO6F,EAAOvJ,KAGhB,QAAS,OAAOL,OAAA6J,GAAA,EAAA7J,CAAA,GAAK4E,KDMvBE,UEZa,SAACF,EAAOgF,GACrB,OAAQA,EAAO7F,MACb,IAAK,eAAgB,IACXvH,EAAmBoN,EAAnBpN,KAAMsN,EAAaF,EAAbE,SAEd,OAAO9J,OAAA6J,GAAA,EAAA7J,CAAA,GACF4E,EADL5E,OAAA+J,GAAA,EAAA/J,CAAA,GAEGxD,EAAOsN,IAIZ,QAAS,OAAO9J,OAAA6J,GAAA,EAAA7J,CAAA,GAAK4E,KFEvBoF,KGba,SAACpF,EAAOgF,GACrB,OAAQA,EAAO7F,MACb,IAAK,gBAAiB,IACZiB,EAAW4E,EAAX5E,OAER,OAAOhF,OAAA6J,GAAA,EAAA7J,CAAA,GACF4E,EADL,CAEEqF,cAAejF,IAInB,IAAK,iBAAkB,IACbyB,EAAsCmD,EAAtCnD,QAAS9E,EAA6BiI,EAA7BjI,QAASuI,EAAoBN,EAApBM,gBAE1B,OAAOlK,OAAA6J,GAAA,EAAA7J,CAAA,GACF4E,EADL,CAEEuF,UAAUnK,OAAA6J,GAAA,EAAA7J,CAAA,GACL4E,EAAMuF,UADF,CAEP1D,UACA9E,UACAuI,sBAKN,QAAS,OAAOlK,OAAA6J,GAAA,EAAA7J,CAAA,GAAK4E,KHXvBN,KIda,SAACM,EAAOgF,GACrB,OAAQA,EAAO7F,MACb,IAAK,gBAAiB,IACZiF,EAASY,EAATZ,KAER,OAAOhJ,OAAA6J,GAAA,EAAA7J,CAAA,GACF4E,EACAoE,GAIP,IAAK,cAAe,IACVjD,EAAY6D,EAAZ7D,QAER,OAAO/F,OAAA6J,GAAA,EAAA7J,CAAA,GACF4E,EADL,CAEEmB,YAIJ,IAAK,oBAAqB,IAChB8B,EAAiB+B,EAAjB/B,aAER,OAAO7H,OAAA6J,GAAA,EAAA7J,CAAA,GACF4E,EADL,CAEEiD,iBAIJ,QAAS,OAAO7H,OAAA6J,GAAA,EAAA7J,CAAA,GAAK4E,KJdvBwF,WKfa,SAACxF,EAAOgF,GACrB,OAAQA,EAAO7F,MACb,IAAK,uBAAwB,IACnByF,EAAoBI,EAApBJ,gBAER,OAAOxJ,OAAA6J,GAAA,EAAA7J,CAAA,GACF4E,EACA4E,GAIP,QAAS,OAAOxJ,OAAA6J,GAAA,EAAA7J,CAAA,GAAK4E,KLKvByF,MMhBa,SAACzF,EAAOgF,GACrB,OAAQA,EAAO7F,MACb,IAAK,kBAAmB,IACduG,EAAeV,EAAfU,WAER,OAAOtK,OAAA6J,GAAA,EAAA7J,CAAA,GACF4E,EACA0F,GAIP,QAAS,OAAOtK,OAAA6J,GAAA,EAAA7J,CAAA,GAAK4E,KNMvB2F,IOjBa,SAAC3F,EAAOgF,GACrB,OAAQA,EAAO7F,MACb,IAAK,gBAAiB,IACZyG,EAAaZ,EAAbY,SAER,OAAOxK,OAAA6J,GAAA,EAAA7J,CAAA,GACF4E,EACA4F,GAIP,QAAS,OAAOxK,OAAA6J,GAAA,EAAA7J,CAAA,GAAK4E,ORDnB6F,GAAgB,CACpBpD,IAAK,OACLqD,aACAC,gBAAiBC,MAGbC,GAAmBC,aAAeL,GCIzB,SAAC7F,EAAOgF,GAAR,OAAmBF,GAAW9E,EAAOgF,KDM7C,IAAMmB,GAAQC,aACnBH,GS3Ba,CACbb,KAAM,CACJC,cAAe,UACfE,UAAW,IAEbC,WAAY,CACVd,WAAY,KTuBdG,IAGWwB,GAAYC,aAAaH,IUhCvBI,GAAA,CACb,CAAE3O,KAAM,SAAU4O,OAAQ,OAC1B,CAAE5O,KAAM,WAAY4O,OAAQ,OAC5B,CAAE5O,KAAM,WAAY4O,OAAQ,OAC5B,CAAE5O,KAAM,eAAgB4O,OAAQ,OAChC,CAAE5O,KAAM,WAAY4O,OAAQ,OAC5B,CAAE5O,KAAM,YAAa4O,OAAQ,OAC7B,CAAE5O,KAAM,QAAS4O,OAAQ,QCJ3BC,GAAA,WAAe,OAAM,IAAI1L,QAAJ,eAAA+B,EAAA1B,OAAAC,EAAA,EAAAD,CAAAE,EAAAhE,EAAAiE,KAAY,SAAAmL,EAAO1L,EAASC,GAAhB,IAAA+E,EAAAE,EAAAR,EAAAjE,EAAAkL,EAAAC,EAAAC,EAAAC,EAAA,OAAAxL,EAAAhE,EAAAuE,KAAA,SAAAkL,GAAA,cAAAA,EAAAhL,KAAAgL,EAAAjR,MAAA,cAEzBkK,EAAQmG,GAAMa,WACZ9G,EAA0BF,EAA1BE,UAAWR,EAAeM,EAAfN,KAAMjE,EAASuE,EAATvE,KAHMsL,EAAAhL,KAAA,EAAAgL,EAAAjR,KAAA,EAOVoK,EAAUgB,IAAI+F,QAAQ,CAAE7H,KAAMM,EAAKyB,UAPzB,cAO7BwF,EAP6BI,EAAAG,KAAAH,EAAAjR,KAAA,EAQRoK,EAAUiH,YAAYC,gBAAgB1H,EAAKyB,QAAS,CAAE/B,KAAMM,EAAKyB,UARzD,cAQ7ByF,EAR6BG,EAAAG,KAAAH,EAAAjR,KAAA,GASb2F,EAAKkK,IAAI0B,WAAW3H,EAAKyB,SATZ,QAS7B0F,EAT6BE,EAAAG,KAAAH,EAAAjR,KAAA,wBAAAiR,EAAAhL,KAAA,GAAAgL,EAAA5K,GAAA4K,EAAA,SAAAA,EAAA5E,OAAA,SAWtBlH,EAAM8L,EAAA5K,KAXgB,eAAA4K,EAAAjR,KAAA,GAcCiF,QAAQuM,IAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAG/E,IAAI,SAAA5K,GAAE,OAAI,IAAIoD,QAAJ,eAAAiC,EAAA5B,OAAAC,EAAA,EAAAD,CAAAE,EAAAhE,EAAAiE,KAAY,SAAAC,EAAOR,EAASC,GAAhB,IAAAsM,EAAA,OAAAjM,EAAAhE,EAAAuE,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAhG,MAAA,cAAAgG,EAAAC,KAAA,EAAAD,EAAAhG,KAAA,EAGpEoK,EAAUiH,YAAYE,WAAW1P,EAAI,CAAEyH,KAAMM,EAAKyB,UAHkB,OAGpFoG,EAHoFzL,EAAAoL,KAGNM,WAHM1L,EAAAhG,KAAA,sBAAAgG,EAAAC,KAAA,EAAAD,EAAAK,GAAAL,EAAA,SAAAA,EAAAqG,OAAA,SAK7ElH,EAAMa,EAAAK,KALuE,OAOtFnB,EAAQ,CAAEuM,SAAQf,OAAQW,GAAYxP,GAAI6O,SAP4C,yBAAA1K,EAAAU,SAAAhB,EAAApE,KAAA,YAAZ,gBAAAqQ,EAAAC,GAAA,OAAA1K,EAAA2K,MAAAvQ,KAAAwQ,YAAA,OAd7C,QAczBd,EAdyBC,EAAAG,KAwB/Bf,GAAMhG,SAAS,CACbhB,KAAM,gBACNiF,KAAM,CACJyD,YAAalB,EAAWkB,YAAYL,WACpCtF,cAAeyE,EAAWzE,cAAcsF,WACxCZ,aAAcA,EACdkB,SAAUnB,EAAWmB,SAASN,WAC9BO,QAASpB,EAAWoB,QAAQP,WAC5BQ,cAAerB,EAAWqB,cAAcR,WACxCX,QAASpL,EAAK2F,MAAM6G,QAAQpB,GAC5BC,kBAAmBA,KAIvB9L,IAtC+B,yBAAA+L,EAAAvK,SAAAkK,EAAAtP,KAAA,aAAZ,gBAAA8Q,EAAAC,GAAA,OAAArL,EAAA6K,MAAAvQ,KAAAwQ,YAAA,yBCWfQ,8MACJpI,MAAQ,CACNa,WAAW,EACXwH,aAAa,EACbC,WAAY,GACZC,aAAa,KAGf1U,kBAAoB,WAClBC,EAAK0U,qBAGPA,qCAAkB,SAAAhN,IAAA,IAAAqC,EAAAqC,EAAAR,EAAA4I,EAAA,OAAAhN,EAAAhE,EAAAuE,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAhG,MAAA,cAChBhC,EAAKmN,SAAS,CAAEJ,WAAW,IADXhD,EAGY/J,EAAKG,MAAzBiM,EAHQrC,EAGRqC,UAAWR,EAHH7B,EAGG6B,KAHH5D,EAAAC,KAAA,EAAAD,EAAAhG,KAAA,EAOKoK,EAAUgB,IAAIoH,WAAW,CAAElJ,KAAMM,EAAKyB,UAP3C,OAOdmH,EAPcxM,EAAAoL,KAAApL,EAAAhG,KAAA,uBAAAgG,EAAAC,KAAA,EAAAD,EAAAK,GAAAL,EAAA,SAAAA,EAAAqG,OAAA,SASP/F,QAAQqM,MAAR3M,EAAAK,KATO,QAYhBrI,EAAKmN,SAAS,CAAEqH,WAAYA,EAAYzH,WAAW,IAZnC,yBAAA/E,EAAAU,SAAAhB,EAAApE,KAAA,cAelBsR,4BAAS,SAAAC,IAAA,IAAAtG,EAAAnC,EAAAR,EAAA,OAAApE,EAAAhE,EAAAuE,KAAA,SAAA+M,GAAA,cAAAA,EAAA7M,KAAA6M,EAAA9S,MAAA,OAAAuM,EACqBvO,EAAKG,MAAzBiM,EADDmC,EACCnC,UAAWR,EADZ2C,EACY3C,KAEnBQ,EAAUgB,IAAIwH,OAAO,CAAEtJ,KAAMM,EAAKyB,QAASlL,MAAOnC,EAAKkM,MAAMsI,aAC1DhH,GAAG,kBAAmB,WACrBxN,EAAKmN,SAAS,CAAEoH,aAAa,MAE9B/G,GAAG,UAJNlG,OAAAC,EAAA,EAAAD,CAAAE,EAAAhE,EAAAiE,KAIiB,SAAAmL,IAAA,OAAApL,EAAAhE,EAAAuE,KAAA,SAAAkL,GAAA,cAAAA,EAAAhL,KAAAgL,EAAAjR,MAAA,cAAAiR,EAAAjR,KAAA,EACP2Q,KADO,OAEb3S,EAAKmN,SAAS,CACZoH,aAAa,EACbE,aAAa,IAJF,wBAAAxB,EAAAvK,SAAAkK,EAAAtP,UAOdkK,GAAG,QAAS,SAAAE,GACX1N,EAAKG,MAAM+M,aAAaX,GAAamB,EAAEC,SAAU,SAf9C,wBAAAmH,EAAApM,SAAAmM,EAAAvR,iFAmBA,IAIHkR,EAJGlG,EAAAhL,KAAAyR,EACyCzR,KAAKnD,MAApC4T,GADVgB,EACC/K,QADD+K,EACUhB,aAAaE,EADvBc,EACuBd,QAAStM,EADhCoN,EACgCpN,KADhCiG,EAE8BtK,KAAK4I,MAAlCqI,EAFD3G,EAEC2G,YAAaE,EAFd7G,EAEc6G,YAGrB,IACED,EAAa7M,EAAK2F,MAAM6G,QAAQ7Q,KAAK4I,MAAMsI,WAAWd,YACtD,MAAOhG,GACP8G,EAAarK,EAAA3G,EAAAC,cAACqK,GAAD,MAGf,IAAMkH,EAASjB,IAAgBE,EAE/B,OACE9J,EAAA3G,EAAAC,cAACwR,EAAA,SAAD,KACE9K,EAAA3G,EAAAC,cAACuI,GAAD,CACE1C,KAAK,QADP,QAGAa,EAAA3G,EAAAC,cAACyR,GAAA,EAAD,MACA/K,EAAA3G,EAAAC,cAAA,WAAMsQ,EAAN,IAAoBE,EAApB,gBACEe,GAAU7K,EAAA3G,EAAAC,cAAA,oCAAuB+Q,GACnCrK,EAAA3G,EAAAC,cAACuI,GAAD,CACE/C,QAASsL,EAAc,SAAW,OAClC5K,UAAWqL,EACX1L,KAAK,OACLY,QAAS,WAAa8K,GAAQ1G,EAAKsG,WACnCL,EAAcpK,EAAA3G,EAAAC,cAAA,2BAAkB0G,EAAA3G,EAAAC,cAACqK,GAAD,CAAQ7E,QAAQ,YAAqB+L,EAAS,eAAiB,gBACjG7K,EAAA3G,EAAAC,cAACqM,GAAAtM,EAAD,CACEuM,IAAKoF,KACLlF,WAAYwE,GAAevE,KAAMC,OAAOC,QACxCC,OAAQ,GACRQ,kBAAmB,kBAAMvC,EAAKnB,SAAS,CAAEsH,aAAa,eA7ExC9Q,aAkGxB2Q,GAAYrI,YAdY,SAAAC,GACtB,MAAO,CACLE,UAAWF,EAAME,UACjBR,KAAMM,EAAMN,KACZjE,KAAMuE,EAAMvE,OAIW,SAAA0E,GACzB,MAAO,CACLa,aAAc,SAACa,EAAS9E,GAAV,OAAqBoD,EAAS,CAAEhB,KAAM,iBAAkB0C,UAAS9E,eAIvEgD,CAA6CqI,IAE1CA,OADfA,GAAYjK,IAtGG,GAsGHA,CAAoBiK,cC3D1Bc,8MACJlJ,MAAQ,KAERnM,uCAAoB,SAAA2H,IAAA,OAAAF,EAAAhE,EAAAuE,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAhG,MAAA,OAClB2Q,KADkB,wBAAA3K,EAAAU,SAAAhB,EAAApE,iFAIX,IAAAyG,EACiCzG,KAAKnD,MAArC6J,EADDD,EACCC,QAAS4B,EADV7B,EACU6B,KAAMC,EADhB9B,EACgB8B,aACjB6C,EAASF,EAAQqB,KAAK,SAAAnB,GAAM,OAAIA,EAAO7K,IAAM+H,EAAKwC,gBAGxD,OACEjE,EAAA3G,EAAAC,cAACwR,EAAA,SAAD,KACE9K,EAAA3G,EAAAC,cAAA,OAAKC,UAAWsG,EAAQoL,YACtBjL,EAAA3G,EAAAC,cAAA,WACE0G,EAAA3G,EAAAC,cAACuI,GAAD,CACE9B,QAAS,kBAAM2B,EAAa,WAC5BlC,UAAQ,EACRV,QAAQ,OACRK,KAAK,QAJP,iBAKgBoF,EAAO5K,KALvB,KAMAqG,EAAA3G,EAAAC,cAACuI,GAAD,CACE/C,QAAQ,SACRK,KAAK,QAFP,SAGGsC,EAAKmH,UAEV5I,EAAA3G,EAAAC,cAAA,OAAKC,UAAWsG,EAAQqL,MACR,KAAb3G,EAAO7K,GACNsG,EAAA3G,EAAAC,cAACwR,EAAA,SAAD,KACE9K,EAAA3G,EAAAC,cAACuI,GAAD,CACE9B,QAAS,kBAAM2B,EAAa,sBAC5BlC,UAAQ,EACRV,QAAQ,OACRK,KAAK,SAELa,EAAA3G,EAAAC,cAAC6R,GAAA,EAAD,CAAkBhM,KA1Bf,KAoBL,uBASAa,EAAA3G,EAAAC,cAACuI,GAAD,CACE9B,QAAS,kBAAM2B,EAAa,iBAC5BlC,UAAQ,EACRV,QAAQ,OACRK,KAAK,SAELa,EAAA3G,EAAAC,cAACyR,GAAA,EAAD,CAAY5L,KAnCT,KA6BL,oBASAa,EAAA3G,EAAAC,cAACuI,GAAD,CACE9B,QAAS,kBAAM2B,EAAa,qBAC5BlC,UAAQ,EACRV,QAAQ,OACRK,KAAK,SAELa,EAAA3G,EAAAC,cAACyR,GAAA,EAAD,CAAU5L,KA5CP,KAsCL,kBASAa,EAAA3G,EAAAC,cAACuI,GAAD,CACE9B,QAAS,kBAAM2B,EAAa,uBAC5BlC,UAAQ,EACRV,QAAQ,OACRK,KAAK,SAELa,EAAA3G,EAAAC,cAACyR,GAAA,EAAD,CAAY5L,KArDT,KA+CL,qBAWFa,EAAA3G,EAAAC,cAACwR,EAAA,SAAD,KACE9K,EAAA3G,EAAAC,cAACuI,GAAD,CACE9B,QAAS,kBAAM2B,EAAa,sBAC5BlC,UAAQ,EACRV,QAAQ,OACRK,KAAK,SAELa,EAAA3G,EAAAC,cAACyR,GAAA,EAAD,CAAgB5L,KAjEb,KA2DL,eASAa,EAAA3G,EAAAC,cAACuI,GAAD,CACE9B,QAAS,kBAAM2B,EAAa,iBAC5BlC,UAAQ,EACRV,QAAQ,OACRK,KAAK,SAELa,EAAA3G,EAAAC,cAACyR,GAAA,EAAD,CAAYxR,UAAWsG,EAAQuL,KAAKjM,KA1EjC,KAoEL,oBASAa,EAAA3G,EAAAC,cAACuI,GAAD,CACE9B,QAAS,kBAAM2B,EAAa,qBAC5BlC,UAAQ,EACRV,QAAQ,OACRK,KAAK,SAELa,EAAA3G,EAAAC,cAACyR,GAAA,EAAD,CAAY5L,KAnFT,KA6EL,2BAYNa,EAAA3G,EAAAC,cAAA,WACE0G,EAAA3G,EAAAC,cAAC+R,GAAD,CACEzB,YAAanI,EAAKmI,YAClBE,QAASrI,EAAKqI,oBAtGHtQ,aA6HzByR,GAAanJ,YAdW,SAAAC,GACtB,MAAO,CACLN,KAAMM,EAAMN,KACZjE,KAAMuE,EAAMvE,OAIW,SAAA0E,GACzB,MAAO,CACLuD,YAAa,SAAAU,GAAI,OAAIjE,EAAS,CAAEhB,KAAM,gBAAiBiF,UACvDzE,aAAc,SAAAS,GAAM,OAAID,EAAS,CAAEhB,KAAM,gBAAiBiB,cAIjDL,CAA6CmJ,IAE3CA,OADfA,GAAa/K,IApKE,CACb+K,WAAY,CACVlP,MAAO,iBACPV,cAAe,MAEfgK,UAAW,CACThF,OAAQ,iBACR/E,eAAgB,cAGlBgQ,uBAAwB,CACtBvP,MAAO,OAGTwP,uBAAwB,CACtBxP,MAAO,OAGTyP,uBAAwB,CACtBzP,MAAO,QAGX0P,UAAW,CACT1P,MAAO,MACPsD,QAAS,OAEX6L,KAAM,CACJ3P,WAAY,aACZF,cAAe,MACfU,MAAO,iBACPhB,UAAW,CACT2Q,IAAK,CACHvQ,OAAQ,WAoIH+E,CAAoB+K,aCzK7BU,GAAa,SAAA9M,GAAA,IAAGgB,EAAHhB,EAAGgB,QAAH+L,EAAA/M,EAAYgN,eAAZ,IAAAD,EAAsB,EAAtBA,EAAAE,EAAAjN,EAAyBkN,WAAzB,IAAAD,EAA+B,EAA/BA,EAAAE,EAAAnN,EAAkCgK,yBAAlC,IAAAmD,EAAsD,GAAtDA,EAAA,OACfhM,EAAA3G,EAAAC,cAAA,OAAKC,UAAWsG,EAAQ8L,YACtB3L,EAAA3G,EAAAC,cAACuI,GAAD,KACG,gBAAkBgK,EAAQtC,WAD7B,IAC0CwC,EAAIxC,WAAa,OAE1DV,EAAkBvE,IAAI,SAAC2H,EAAW1J,GAAZ,OACrBvC,EAAA3G,EAAAC,cAACuI,GAAD,CAAY2C,IAAKjC,EAAGzD,QAAQ,QACzBoK,GAAY3G,GAAGgG,OADlB,IAC2B0D,EAAU3C,YAO5BqC,GADfA,GAAazL,IAnBE,CACbyL,WAAY,CACVtQ,cAAe,QAiBN6E,CAAoByL,ICM3BO,oLACK,IAGHC,EAHGvM,EACgFzG,KAAKnD,MAApF6J,EADDD,EACCC,QAAS4B,EADV7B,EACU6B,KAAMC,EADhB9B,EACgB8B,aAAc0F,EAD9BxH,EAC8BwH,cAAegF,EAD7CxM,EAC6CwM,YAD7CxM,EAC0DiJ,kBAoBjE,OAhBEsD,EADwB,KAAtB1K,EAAKwC,cACI,CACT,CAAEtK,KAAM,aAAc0S,MAAO,WAC7B,CAAE1S,KAAM,oBAAqB0S,MAAO,eACpC,CAAE1S,KAAM,eAAgB0S,MAAO,oBAC/B,CAAE1S,KAAM,mBAAoB0S,MAAO,0BAG1B,CACT,CAAE1S,KAAM,aAAc0S,MAAO,WAC7B,CAAE1S,KAAM,oBAAqB0S,MAAO,uBACpC,CAAE1S,KAAM,eAAgB0S,MAAO,oBAC/B,CAAE1S,KAAM,mBAAoB0S,MAAO,kBACnC,CAAE1S,KAAM,qBAAsB0S,MAAO,qBAKvCrM,EAAA3G,EAAAC,cAACwR,EAAA,SAAD,KACE9K,EAAA3G,EAAAC,cAAA,OAAKC,UAAWsG,EAAQqM,cACtBlM,EAAA3G,EAAAC,cAAA,WAEE0G,EAAA3G,EAAAC,cAAA,WAEE0G,EAAA3G,EAAAC,cAACgT,GAAD,CAAYT,QAASpK,EAAKkH,aAAcoD,IAAKtK,EAAKoI,SAAUhB,kBAAmBpH,EAAKoH,oBAEpF7I,EAAA3G,EAAAC,cAACwR,EAAA,SAAD,KAAW3R,KAAKnD,MAAM8J,WAExBE,EAAA3G,EAAAC,cAAA,WAEE0G,EAAA3G,EAAAC,cAACuI,GAAD,CACE/C,QAAQ,SACRK,KAAK,QAFP,SAGKsC,EAAKmH,SACV5I,EAAA3G,EAAAC,cAAA,OAAKmL,MAAO,CAAE8H,UAAW,MAAOxQ,MAAO,SACpCqQ,GAAeA,EAAY9H,IAAI,SAACkI,EAAYjK,GAAb,OAC9BvC,EAAA3G,EAAAC,cAACuI,GAAD,CACE2C,IAAKjC,EACL/C,UAAQ,EACRO,QAASyM,EAAWC,GACpBtN,KAAK,QACLqN,EAAWH,YAKrBrM,EAAA3G,EAAAC,cAAA,WAEG6S,EAAS7H,IAAI,SAACoI,EAAMnK,GAAP,OACZvC,EAAA3G,EAAAC,cAACuI,GAAD,CACE2C,IAAKjC,EACL/C,UAAQ,EACRP,OAAQmI,IAAkBsF,EAAK/S,KAC/BwF,KAAK,QACLY,QAAS,kBAAM2B,EAAagL,EAAK/S,QACjC+S,EAAKL,mBA5DM7S,aAqF3B0S,GAAepK,YAhBS,SAAAC,GACtB,MAAO,CACLqF,cAAerF,EAAMoF,KAAKC,cAC1BnF,UAAWF,EAAME,UACjBR,KAAMM,EAAMN,KACZjE,KAAMuE,EAAMvE,OAIW,SAAA0E,GACzB,MAAO,CACLuD,YAAa,SAAAU,GAAI,OAAIjE,EAAS,CAAEhB,KAAM,gBAAiBiF,UACvDzE,aAAc,SAAAS,GAAM,OAAID,EAAS,CAAEhB,KAAM,gBAAiBiB,cAI/CL,CAA6CoK,IAE7CA,OADfA,GAAehM,IA9GA,CACbgM,aAAc,CACZlQ,UAAW,QACXD,MAAO,iBACPsJ,UAAW,CACTtJ,MAAO,kBAET4Q,sBAAuB,CACrBC,KAAM,EACNvR,cAAe,MACfE,WAAY,aACZoR,sBAAuB,CACrBC,KAAM,GAERC,qBAAsB,CACpBD,KAAM,KAGVC,qBAAsB,CACpBxR,cAAe,SA2FN6E,CAAoBgM,ICpHpBY,GAAA,SAASC,GACtB,IAAMC,EAASD,EAAMC,OACfhV,EAAwB,aAAhBgV,EAAO9L,KAAsB8L,EAAOC,QAAUD,EAAOhV,MAC7D2B,EAAOqT,EAAOrT,KAEpBR,KAAK6J,SAAL7F,OAAA+J,GAAA,EAAA/J,CAAA,GACGxD,EAAO3B,KCNG,SAASkV,GAAE7T,GAAG,OAAOA,GAAGA,EAAgB,GAAd8T,KAAKC,UAAa/T,EAAE,GAAGkQ,SAAS,KAAK,CAAC,MAAM,KAAK,KAAK,KAAK,MAAM8D,QAAQ,SAASH,ICA5G,ICwBXI,GAAY,SAAA/N,GAA4E,IACtFgO,EDzBkBC,ECwBL3N,EAAyEN,EAAzEM,QAASE,EAAgER,EAAhEQ,QAAS0N,EAAuDlO,EAAvDkO,OAAQnE,EAA+C/J,EAA/C+J,OAAQoE,EAAuCnO,EAAvCmO,MAAOnF,EAAgChJ,EAAhCgJ,OAAQoF,EAAwBpO,EAAxBoO,SAAU3D,EAAczK,EAAdyK,QAQ5E,OALEuD,EADEI,EACM,CAAC,SAAU,cAAX,WAAA/R,OAAqC2M,EAArC,KAAgD,eAEhD,ED7BYiF,EC6BDC,ED5BjBD,EACYA,EAAKrX,OAAO,EAAG,GAEd,MADHqX,EAAKrX,QAAQ,GAGpB,ICuBuB6T,EAAQ4D,OAAOF,IAASpE,EAAQU,EAAQ4D,OAAOtE,EAASoE,KAIpF1N,EAAA3G,EAAAC,cAAA,OACEyG,QAASA,EACTxG,UAAWsG,EAAQyN,WAElBC,EAAMjJ,IAAI,SAACuJ,EAAMtL,GAAP,OACTvC,EAAA3G,EAAAC,cAAA,OAAKkL,IAAKjC,GACPsL,OAaXP,GAAYxL,YANY,SAAAC,GACtB,MAAO,CACLiI,QAASjI,EAAMvE,KAAK2F,MAAM6G,UAIlBlI,CAAyBwL,IAEtBA,OADfA,GAAYpN,IAhDG,CACboN,UAAW,CACTjS,cAAe,MACfU,MAAO,iBACPuD,OAAQ,SAAAT,GAAA,OAAAA,EAAG8O,SAAuC,KAAZ,WAEtC1S,gBAAiB,SAAA8D,GAAA,OAAAA,EAAG+O,WAA8B,OAAS,QAC3DrO,UAAW,CACTxE,gBAAiB,SAAA+D,GAA8B,IAA3B8O,EAA2B9O,EAA3B8O,WAA6B,IAAF9O,EAAf2O,SAAgC,OAAOG,EAAa,OAAS,SAG/FzI,UAAW,CACTzG,OAAQ,iBACR7C,MAAO,MACPgS,WAAY,SAAA7O,GAAA,OAAAA,EAAGyO,SAA0B,OAAS,SAkC5CzN,CAAoBoN,ICvB1BU,eACJ,SAAAA,EAAYhY,GAAO,IAAAH,EAAA,OAAAsH,OAAA8Q,EAAA,EAAA9Q,CAAAhE,KAAA6U,IACjBnY,EAAAsH,OAAA+Q,EAAA,EAAA/Q,CAAAhE,KAAAgE,OAAAgR,EAAA,EAAAhR,CAAA6Q,GAAAI,KAAAjV,KAAMnD,KAmBRJ,kBAAoB,WAClBC,EAAKwY,kBArBYxY,EA8BnByY,cA9BmBnR,OAAAC,EAAA,EAAAD,CAAAE,EAAAhE,EAAAiE,KA8BH,SAAAmL,IAAA,IAAA7I,EAAAqC,EAAAR,EAAA8M,EAAAC,EAAAC,EAAAC,EAAA,OAAArR,EAAAhE,EAAAuE,KAAA,SAAAkL,GAAA,cAAAA,EAAAhL,KAAAgL,EAAAjR,MAAA,UAAA+H,EACc/J,EAAKG,MAAzBiM,EADMrC,EACNqC,UAAWR,EADL7B,EACK6B,KAGS,QAFpB8M,EAAwB1Y,EAAKkM,MAA7BwM,qBAFM,CAAAzF,EAAAjR,KAAA,gBAKZhC,EAAKmN,SAAS,CAAEJ,WAAW,IALfkG,EAAAjR,KAAA,EAOgBoK,EAAU0M,IAAIC,iBACxCnN,EAAKwC,cACLsK,EACA,CAAEpN,KAAMM,EAAKyB,UAVH,cAONsL,EAPM1F,EAAAG,KAaNwF,EAAeI,MAAMnF,MAAM,KAAM,CAAChH,OAAQrM,SAASmY,EAAcjF,cAAcjF,IAAIwK,OAAOV,KAAMU,QAb1FhG,EAAAjR,KAAA,GAgBaiF,QAAQuM,IAAIoF,EAAanK,IAAI,SAAAyK,GAAW,OAAI,IAAIjS,QAAJ,eAAAiC,EAAA5B,OAAAC,EAAA,EAAAD,CAAAE,EAAAhE,EAAAiE,KAAY,SAAAC,EAAOR,EAASC,GAAhB,IAAAgS,EAAA,OAAA3R,EAAAhE,EAAAuE,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAhG,MAAA,cAAAgG,EAAAC,KAAA,EAAAD,EAAAhG,KAAA,EAG3DoK,EAAU0M,IAAIM,aAAaxN,EAAKwC,cAAesK,EAAqBQ,EAAa,CAAE5N,KAAMM,EAAKyB,UAHnC,OAG7E8L,EAH6EnR,EAAAoL,KAAApL,EAAAhG,KAAA,eAAAgG,EAAAC,KAAA,EAAAD,EAAAK,GAAAL,EAAA,SAK7Eb,EAAMa,EAAAK,IALuE,OAO/EnB,EAAQiS,GAPuE,yBAAAnR,EAAAU,SAAAhB,EAAApE,KAAA,YAAZ,gBAAA8Q,EAAAC,GAAA,OAAAnL,EAAA2K,MAAAvQ,KAAAwQ,YAAA,OAhBzD,QAgBN+E,EAhBM5F,EAAAG,KAyBZpT,EAAKmN,SAAS,CAAE0L,aAAY9L,WAAW,IAzB3B,yBAAAkG,EAAAvK,SAAAkK,EAAAtP,SA9BGtD,EA2DnBwY,eA3DmBlR,OAAAC,EAAA,EAAAD,CAAAE,EAAAhE,EAAAiE,KA2DF,SAAAoN,IAAA,IAAAwE,EAAAC,EAAAC,EAAA,OAAA/R,EAAAhE,EAAAuE,KAAA,SAAA+M,GAAA,cAAAA,EAAA7M,KAAA6M,EAAA9S,MAAA,cAAA8S,EAAA9S,KAAA,EACiBhC,EAAKwZ,uBADtB,cACTH,EADSvE,EAAA1B,KAAA0B,EAAA9S,KAAA,EAEchC,EAAKyZ,kBAAkBJ,GAFrC,cAETC,EAFSxE,EAAA1B,KAAA0B,EAAA9S,KAAA,EAGiBhC,EAAK0Z,qBAAqBL,GAH3C,OAGTE,EAHSzE,EAAA1B,KAKfpT,EAAKmN,SAAS,CACZkG,YAAaiG,EAAe7K,IAAI,SAACkL,EAAejN,GAAhB,MAAuB,CACrD7I,GAAIwV,EAAkB3M,GACtB5I,KAAM6V,EAAc7V,KACpB4O,OAAQiH,EAAcjH,OACtBkH,UAAWL,EAAkB7M,QAVlB,yBAAAoI,EAAApM,SAAAmM,EAAAvR,SA3DEtD,EA0EnBwZ,qBA1EmBlS,OAAAC,EAAA,EAAAD,CAAAE,EAAAhE,EAAAiE,KA0EI,SAAAoS,IAAA,IAAAtL,EAAAnC,EAAAR,EAAAyN,EAAA,OAAA7R,EAAAhE,EAAAuE,KAAA,SAAA+R,GAAA,cAAAA,EAAA7R,KAAA6R,EAAA9X,MAAA,cAAAuM,EACOvO,EAAKG,MAAzBiM,EADamC,EACbnC,UAAWR,EADE2C,EACF3C,KADEkO,EAAAzL,OAAA,SAGd,IAAIpH,QAAJ,eAAAyC,EAAApC,OAAAC,EAAA,EAAAD,CAAAE,EAAAhE,EAAAiE,KAAY,SAAAsS,EAAO7S,EAASC,GAAhB,OAAAK,EAAAhE,EAAAuE,KAAA,SAAAiS,GAAA,cAAAA,EAAA/R,KAAA+R,EAAAhY,MAAA,cAAAgY,EAAA/R,KAAA,EAAA+R,EAAAhY,KAAA,EAEWoK,EAAU0M,IAAIU,qBAAqB5N,EAAKwC,cAAe,CAAE9C,KAAMM,EAAKyB,UAF/E,OAEfgM,EAFeW,EAAA5G,KAAA4G,EAAAhY,KAAA,sBAAAgY,EAAA/R,KAAA,EAAA+R,EAAA3R,GAAA2R,EAAA,SAAAA,EAAA3L,OAAA,SAIRlH,EAAM6S,EAAA3R,KAJE,OAMjBgR,EAAoBA,EAAkB5K,IAAI,SAAAwL,GAAa,OAAIA,EAAcC,aACzEhT,EAAQmS,GAPS,yBAAAW,EAAAtR,SAAAqR,EAAAzW,KAAA,YAAZ,gBAAAqQ,EAAAC,GAAA,OAAAlK,EAAAmK,MAAAvQ,KAAAwQ,YAAA,KAHc,wBAAAgG,EAAApR,SAAAmR,EAAAvW,SA1EJtD,EAwFnByZ,kBAxFmB,eAAA5P,EAAAvC,OAAAC,EAAA,EAAAD,CAAAE,EAAAhE,EAAAiE,KAwFC,SAAA0S,EAAMC,GAAN,IAAArF,EAAA3I,EAAAR,EAAA0N,EAAA,OAAA9R,EAAAhE,EAAAuE,KAAA,SAAAsS,GAAA,cAAAA,EAAApS,KAAAoS,EAAArY,MAAA,cAAA+S,EACU/U,EAAKG,MAAzBiM,EADU2I,EACV3I,UAAWR,EADDmJ,EACCnJ,KACb0N,EAAiB,GAFLe,EAAAhM,OAAA,SAGX,IAAIpH,QAAJ,eAAA6C,EAAAxC,OAAAC,EAAA,EAAAD,CAAAE,EAAAhE,EAAAiE,KAAY,SAAA6S,EAAOpT,EAASC,GAAhB,IAAA3F,EAAAC,EAAAC,EAAAE,EAAAG,EAAA8B,EAAA,OAAA2D,EAAAhE,EAAAuE,KAAA,SAAAwS,GAAA,cAAAA,EAAAtS,KAAAsS,EAAAvY,MAAA,OAAAuY,EAAAtS,KAAA,EAAAzG,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA4Y,EAAAtS,KAAA,EAAArG,EAEAwY,EAFAvY,OAAAC,YAAA,UAAAN,GAAAO,EAAAH,EAAAI,QAAAC,KAAA,CAAAsY,EAAAvY,KAAA,gBAEN6B,EAFM9B,EAAAI,MAAAoY,EAAAlS,GAGbiR,EAHaiB,EAAAvY,KAAA,GAICoK,EAAUiH,YAAYmH,QAAQ3W,EAAI,CAAEyH,KAAMM,EAAKyB,UAJhD,eAAAkN,EAAAE,GAAAF,EAAAnH,KAAAmH,EAAAvY,KAAA,GAKGoK,EAAUiH,YAAYqH,UAAU7W,EAAI,CAAEyH,KAAMM,EAAKyB,UALpD,QAAAkN,EAAAI,GAAAJ,EAAAnH,KAAAmH,EAAAK,GAAA,CAIX9W,KAJWyW,EAAAE,GAKX/H,OALW6H,EAAAI,IAAAJ,EAAAlS,GAGEwS,KAHFtC,KAAAgC,EAAAlS,GAAAkS,EAAAK,IAAA,QAAApZ,GAAA,EAAA+Y,EAAAvY,KAAA,gBAAAuY,EAAAvY,KAAA,iBAAAuY,EAAAtS,KAAA,GAAAsS,EAAAO,GAAAP,EAAA,SAAA9Y,GAAA,EAAAC,EAAA6Y,EAAAO,GAAA,QAAAP,EAAAtS,KAAA,GAAAsS,EAAAtS,KAAA,GAAAzG,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAgY,EAAAtS,KAAA,IAAAxG,EAAA,CAAA8Y,EAAAvY,KAAA,eAAAN,EAAA,eAAA6Y,EAAAQ,OAAA,mBAAAR,EAAAQ,OAAA,YAAAR,EAAAvY,KAAA,wBAAAuY,EAAAtS,KAAA,GAAAsS,EAAAS,GAAAT,EAAA,SAAAA,EAAAlM,OAAA,SASRlH,EAAMoT,EAAAS,KATE,QAWjB9T,EAAQoS,GAXS,yBAAAiB,EAAA7R,SAAA4R,EAAAhX,KAAA,sCAAZ,gBAAA2X,EAAAC,GAAA,OAAApR,EAAA+J,MAAAvQ,KAAAwQ,YAAA,KAHW,wBAAAuG,EAAA3R,SAAAyR,EAAA7W,SAxFD,gBAAA6X,GAAA,OAAAtR,EAAAgK,MAAAvQ,KAAAwQ,YAAA,GAAA9T,EA0GnB0Z,qBA1GmB,eAAA0B,EAAA9T,OAAAC,EAAA,EAAAD,CAAAE,EAAAhE,EAAAiE,KA0GI,SAAA4T,EAAMjB,GAAN,IAAAkB,EAAAlP,EAAAR,EAAA2N,EAAA,OAAA/R,EAAAhE,EAAAuE,KAAA,SAAAwT,GAAA,cAAAA,EAAAtT,KAAAsT,EAAAvZ,MAAA,cAAAsZ,EACOtb,EAAKG,MAAzBiM,EADakP,EACblP,UAAWR,EADE0P,EACF1P,KACf2N,EAAoB,GAFHgC,EAAAlN,OAAA,SAGd,IAAIpH,QAAJ,eAAAuU,EAAAlU,OAAAC,EAAA,EAAAD,CAAAE,EAAAhE,EAAAiE,KAAY,SAAAgU,EAAOvU,EAASC,GAAhB,IAAAuU,EAAAC,EAAAC,EAAAC,EAAAC,EAAAjY,EAAA,OAAA2D,EAAAhE,EAAAuE,KAAA,SAAAgU,GAAA,cAAAA,EAAA9T,KAAA8T,EAAA/Z,MAAA,OAAA+Z,EAAA9T,KAAA,EAAAyT,GAAA,EAAAC,GAAA,EAAAC,OAAAja,EAAAoa,EAAA9T,KAAA,EAAA4T,EAEAzB,EAFAvY,OAAAC,YAAA,UAAA4Z,GAAAI,EAAAD,EAAA7Z,QAAAC,KAAA,CAAA8Z,EAAA/Z,KAAA,gBAEN6B,EAFMiY,EAAA3Z,MAAA4Z,EAAA1T,GAGbkR,EAHawC,EAAA/Z,KAAA,GAGgBoK,EAAUiH,YAAYE,WAAW1P,EAAI,CAAEyH,KAAMM,EAAKyB,UAHlE,QAAA0O,EAAAtB,GAAAsB,EAAA3I,KAAA2I,EAAA1T,GAGKwS,KAHLtC,KAAAwD,EAAA1T,GAAA0T,EAAAtB,IAAA,QAAAiB,GAAA,EAAAK,EAAA/Z,KAAA,gBAAA+Z,EAAA/Z,KAAA,iBAAA+Z,EAAA9T,KAAA,GAAA8T,EAAApB,GAAAoB,EAAA,SAAAJ,GAAA,EAAAC,EAAAG,EAAApB,GAAA,QAAAoB,EAAA9T,KAAA,GAAA8T,EAAA9T,KAAA,GAAAyT,GAAA,MAAAG,EAAAtZ,QAAAsZ,EAAAtZ,SAAA,WAAAwZ,EAAA9T,KAAA,IAAA0T,EAAA,CAAAI,EAAA/Z,KAAA,eAAA4Z,EAAA,eAAAG,EAAAhB,OAAA,mBAAAgB,EAAAhB,OAAA,YAAAgB,EAAA/Z,KAAA,iBAAA+Z,EAAA9T,KAAA,GAAA8T,EAAAnB,GAAAmB,EAAA,SAMf5U,EAAM4U,EAAAnB,IANS,QAQjBrB,EAAoBA,EAAkB9K,IAAI,SAAAwL,GAAa,OAAIA,EAAcC,aACzEhT,EAAQqS,GATS,yBAAAwC,EAAArT,SAAA+S,EAAAnY,KAAA,sCAAZ,gBAAA0Y,EAAAC,GAAA,OAAAT,EAAA3H,MAAAvQ,KAAAwQ,YAAA,KAHc,wBAAAyH,EAAA7S,SAAA2S,EAAA/X,SA1GJ,gBAAA4Y,GAAA,OAAAd,EAAAvH,MAAAvQ,KAAAwQ,YAAA,GAAA9T,EA0HnBmc,gBA1HmB7U,OAAAC,EAAA,EAAAD,CAAAE,EAAAhE,EAAAiE,KA0HD,SAAA2U,IAAA,IAAAC,EAAAjQ,EAAAR,EAAAgC,EAAA8K,EAAA4D,EAAAC,EAAA,OAAA/U,EAAAhE,EAAAuE,KAAA,SAAAyU,GAAA,cAAAA,EAAAvU,KAAAuU,EAAAxa,MAAA,cAAAqa,EACYrc,EAAKG,MAAzBiM,EADQiQ,EACRjQ,UAAWR,EADHyQ,EACGzQ,KADHgC,EAEuC5N,EAAKkM,MAApDwM,EAFQ9K,EAER8K,oBAAqB4D,EAFb1O,EAEa0O,WAAYC,EAFzB3O,EAEyB2O,UAFzBC,EAAAvU,KAAA,EAAAuU,EAAAxa,KAAA,EAKRoK,EAAU0M,IAAIqD,gBAClBvQ,EAAKwC,cACLsK,EACA4D,EACAC,EACA,CAAEjR,KAAMM,EAAKyB,UAVD,OAAAmP,EAAAxa,KAAA,uBAAAwa,EAAAvU,KAAA,EAAAuU,EAAAnU,GAAAmU,EAAA,SAadxc,EAAKmN,SAAS,CAAEsP,kBAAkB,IAClCzc,EAAKG,MAAM+M,aAAa,4BAA6B,OAdvCsP,EAAAnO,OAAA,kBAmBhBrO,EAAKG,MAAM+M,aAAa,MAExBlN,EAAKyY,gBAELzY,EAAKwY,iBAEL7F,KAzBgB,yBAAA6J,EAAA9T,SAAA0T,EAAA9Y,KAAA,YA1HCtD,EAsJnB0c,WAtJmBpV,OAAAC,EAAA,EAAAD,CAAAE,EAAAhE,EAAAiE,KAsJN,SAAAkV,IAAA,IAAAC,EAAAxQ,EAAAR,EAAAiR,EAAAhE,EAAAH,EAAAoE,EAAA3D,EAAA,OAAA3R,EAAAhE,EAAAuE,KAAA,SAAAgV,GAAA,cAAAA,EAAA9U,KAAA8U,EAAA/a,MAAA,cAAA4a,EACiB5c,EAAKG,MAAzBiM,EADGwQ,EACHxQ,UAAWR,EADRgR,EACQhR,KADRiR,EAEsD7c,EAAKkM,MAA9D2M,EAFGgE,EAEHhE,WAAYH,EAFTmE,EAESnE,oBAAqBoE,EAF9BD,EAE8BC,oBACnC3D,EAAYN,EAAWiE,GAHlBC,EAAA9U,KAAA,EAAA8U,EAAA/a,KAAA,EAMHoK,EAAU0M,IAAIkE,aAClBpR,EAAKwC,cACLsK,EACAoE,EACA,CAAExR,KAAMM,EAAKyB,QAASlL,MAAOgX,EAAU1F,OAAOwJ,IAAI9D,EAAUtB,SAVrD,OAAAkF,EAAA/a,KAAA,uBAAA+a,EAAA9U,KAAA,EAAA8U,EAAA1U,GAAA0U,EAAA,SAaT/c,EAAKG,MAAM+M,aAAa,qBAAsB,OAbrC6P,EAAA1O,OAAA,kBAkBXrO,EAAKyY,gBAELzY,EAAKwY,iBAEL7F,KAtBW,yBAAAoK,EAAArU,SAAAiU,EAAArZ,KAAA,YAtJMtD,EA+KnBkd,YAAc,WAAM,IAAAC,EAMdnd,EAAKkM,MAJPmH,EAFgB8J,EAEhB9J,YACAkJ,EAHgBY,EAGhBZ,UACAD,EAJgBa,EAIhBb,WACA5D,EALgByE,EAKhBzE,oBAGM1O,EAAYhK,EAAKG,MAAjB6J,QAEJoM,EAAY,CAAEtS,KAAM,GAAI4O,OAAQ,IAChCW,EAAYxG,QAAyC,kBAAxB6L,IAC/BtC,EAAY/C,EAAYA,EAAY+J,UAAU,SAAAhH,GAAS,OAAIA,EAAUvS,KAAO6U,MAGlD,OAAxBA,EACF1Y,EAAKG,MAAM+M,aACT/C,EAAA3G,EAAAC,cAAA,OAAKC,UAAWsG,EAAQqT,SACtBlT,EAAA3G,EAAAC,cAAA,sBAAc2S,EAAUtS,MACxBqG,EAAA3G,EAAAC,cAAA,WACE0G,EAAA3G,EAAAC,cAAA,qBACA0G,EAAA3G,EAAAC,cAAA,SAAOK,KAAK,aAAawZ,aAAchB,EAAYjR,KAAK,SAASkS,SAAUvd,EAAKiX,gBAElF9M,EAAA3G,EAAAC,cAAA,WACE0G,EAAA3G,EAAAC,cAAA,oBACA0G,EAAA3G,EAAAC,cAAA,SAAOK,KAAK,YAAYwZ,aAAcf,EAAWlR,KAAK,SAASkS,SAAUvd,EAAKiX,gBAEhF9M,EAAA3G,EAAAC,cAACuI,GAAD,CACE/C,QAAQ,OACRU,UAAQ,EACRO,QAASlK,EAAKmc,iBAHhB,OAMF,QACA,GAGFnc,EAAKG,MAAM+M,aAAa,yCAA0C,QAjNpElN,EAAKkM,MAAQ,CACXmH,YAAa,GACbwF,WAAY,GACZH,oBAAqB,KACrBoE,oBAAqB,KAErBR,WAAY,GACZC,UAAW,GAEXE,kBAAkB,EAElB1P,WAAW,GAGb/M,EAAKiX,aAAeA,GAAauG,KAAblW,OAAAmW,GAAA,EAAAnW,QAAAmW,GAAA,EAAAnW,CAAAtH,KAjBHA,kFAwBA0d,EAAGC,GAChBra,KAAK4I,MAAMwM,sBAAwBiF,EAAUjF,qBAC/CpV,KAAKmV,iDA8LA,IAAAnK,EAAAhL,KACC0G,EAAY1G,KAAKnD,MAAjB6J,QADD4T,EAQHta,KAAK4I,MALPmH,EAHKuK,EAGLvK,YACAwF,EAJK+E,EAIL/E,WACAH,EALKkF,EAKLlF,oBACAoE,EANKc,EAMLd,oBACA/P,EAPK6Q,EAOL7Q,UAGEqJ,EAAY,CAAEtS,KAAM,GAAI4O,OAAQ,IAChCW,EAAYxG,QAAyC,kBAAxB6L,IAC/BtC,EAAY/C,EAAYA,EAAY+J,UAAU,SAAAhH,GAAS,OAAIA,EAAUvS,KAAO6U,MAG9E,IAAMnC,EAAc,CAClB,CAAEK,GAAItT,KAAKoZ,WAAYlG,MAAO,OAC9B,CAAEI,GAAItT,KAAK4Z,YAAa1G,MAAO,SAGjC,OACErM,EAAA3G,EAAAC,cAACoa,GAAD,CAActH,YAAaA,GACzBpM,EAAA3G,EAAAC,cAAA,OAAKC,UAAWsG,EAAQ+B,WACtB5B,EAAA3G,EAAAC,cAAA,WAEG4P,EAAY5E,IAAI,SAAC2H,EAAW1J,GAAZ,OACfvC,EAAA3G,EAAAC,cAACuI,GAAD,CACE2C,IAAKjC,EACL/C,UAAQ,EACRL,KAAK,OACLF,OAAQsP,IAAwBtC,EAAUvS,GAC1CqG,QAAS,kBAAMoE,EAAKnB,SAAS,CAAEuL,oBAAqBrF,EAAY3G,GAAG7I,OAEnEsG,EAAA3G,EAAAC,cAAA,WAAM2S,EAAUtS,MAChBqG,EAAA3G,EAAAC,cAAA,WAAM,cAAgB2S,EAAUwD,UAAUlG,WAAa,YAI5D3G,EACC5C,EAAA3G,EAAAC,cAAA,WACE0G,EAAA3G,EAAAC,cAACqK,GAAD,MADF,qBAKA3D,EAAA3G,EAAAC,cAAA,WAE2B,OAAxBiV,EACCvO,EAAA3G,EAAAC,cAACwR,EAAA,SAAD,KACE9K,EAAA3G,EAAAC,cAACqa,GAAD,CAAWhG,UAAQ,EAACpF,OAAQ0D,EAAU1D,SACrCmG,EACEkF,OAAO,SAAA5E,GAAS,OAAIA,EAAU6E,OAC9BvP,IAAI,SAAA0K,GAAS,OACZhP,EAAA3G,EAAAC,cAACqa,GAAD,CACEnP,IAAKsP,KACL/T,QAAS,kBAAMoE,EAAKnB,SAAS,CAC3B2P,oBAAqB3D,EAAU+E,QAAQxK,cAEzCkE,OAAQuB,EAAUvB,OAClBnE,OAAQ0F,EAAU1F,OAAOC,WACzBmE,MAAOsB,EAAUtB,MAAMnE,WACvBuE,WAAY6E,IAAwB3D,EAAU+E,QAAQxK,gBAM9D,4EA3RgB/P,aAoThCwU,GAAoBlM,YAfI,SAAAC,GACtB,MAAO,CACLE,UAAWF,EAAME,UACjBR,KAAMM,EAAMN,KACZjE,KAAMuE,EAAMvE,OAIW,SAAA0E,GACzB,MAAO,CACLa,aAAc,SAACa,EAAS9E,EAASuI,GAAnB,OACZnF,EAAS,CAAEhB,KAAM,iBAAkB0C,UAAS9E,UAASuI,uBAIvCvF,CAA6CkM,IAElDA,OADfA,GAAoB9N,IAxUL,CACb0B,UAAW,CACTvG,cAAe,MACfU,MAAO,OACPR,WAAY,aACZoR,sBAAuB,CACrBC,KAAM,OAERC,qBAAsB,CACpBD,KAAM,QAGVsG,QAAS,CACPvG,sBAAuB,CACrBqH,aAAc,SA0TA9T,CAAoB8N,yBC1TlCiG,8MACJC,SAAW,SAACC,EAAOC,IAEjB5N,EAD+B3Q,EAAKG,MAA5BwQ,oBACW,CACjB6N,UAAU,EACVC,UAAWH,EACXI,QAASH,6EAIJ,IAAAjQ,EAAAhL,KAAAyG,EAC2CzG,KAAKnD,MAA/C6J,EADDD,EACCC,QAAS2G,EADV5G,EACU4G,mBAAoBgO,EAD9B5U,EAC8B4U,SAC7B/N,EAAetN,KAAKnD,MAAMuR,WAA1Bd,WAER,OACEzG,EAAA3G,EAAAC,cAACuI,GAAD,CACE1C,KAAK,QAELa,EAAA3G,EAAAC,cAAA,OAAKC,UAAWsG,EAAQoU,WACrBpF,MAAM,MAAMpO,OAAO6D,IAAI,SAACiP,EAAGhR,GAC1B,IAAM+R,EAAY/R,EAAIiS,EAChBD,EAAUD,EAAYE,EACtBC,EAAW5F,MAAM6F,QAAQjO,IAAeA,EAAWkO,SAASpS,GAC5DqS,EAAOH,EAAW,IAAM,IAC9B,OACEzU,EAAA3G,EAAAC,cAAA,QACEC,UAAWsG,EAAQgV,KACnBrQ,IAAKjC,EACLxC,QAAS,WACF0U,GACHtQ,EAAK+P,SAASI,EAAWC,IAE7B9P,MAAO,CACLxO,MAAOwe,EAAW,OAAS,MAE7BK,aAAc,SAAAvR,GACZA,EAAEwR,kBACGN,GACHjO,EAAmB,CAAE8N,YAAWC,UAASS,MAAOV,KAEpDW,aAAc,SAAA1R,GACZA,EAAEwR,kBACGN,GACHjO,EAAmB,CAAE8N,eAAW9c,EAAW+c,aAAS/c,MAExDod,cA7CQpb,aAqExBya,GAAYnS,YAfY,SAAAC,GACtB,MAAO,CACLE,UAAWF,EAAME,UACjBR,KAAMM,EAAMN,KACZ8F,WAAYxF,EAAMwF,aAIK,SAAArF,GACzB,MAAO,CACLa,aAAc,SAACa,EAAS9E,GAAV,OAAqBoD,EAAS,CAAEhB,KAAM,iBAAkB0C,UAAS9E,aAC/E0H,mBAAoB,SAAAG,GAAe,OAAIzE,EAAS,CAAEhB,KAAM,uBAAwByF,uBAIxE7E,CAA6CmS,IAE1CA,OADfA,GAAY/T,IA1FG,CACb+T,UAAW,CACT5Y,cAAe,MACfD,QAAS,OACT8Z,wBAAyB,mBACzBC,qBAAsB,OACtBC,SAAU,IAEZP,KAAM,CACJ3P,OAAQ,EACRjK,gBAAiB,MACjBc,MAAO,cACPsZ,WAAY,MACZ5V,UAAW,CACTxE,gBAAiB,kBACjBqE,OAAQ,aA2EFY,CAAoB+T,yBC5E1BqB,GAAY,SAQZC,8MACJ3f,kBAAoB,WAClBC,EAAK2f,kBAGPC,mBAAqB,SAAAC,GAAa,IAAA9V,EACa/J,EAAKG,MAA1CwQ,EADwB5G,EACxB4G,mBAAoBzD,EADInD,EACJmD,aADI4S,EAE2C9f,EAAKG,MAAMuR,WAA9E8M,EAFwBsB,EAExBtB,SAAUW,EAFcW,EAEdX,MAAOV,EAFOqB,EAEPrB,UAAWC,EAFJoB,EAEIpB,QAAS9N,EAFbkP,EAEalP,WAAYmP,EAFzBD,EAEyBC,eAGpDF,EAAUnO,WAAW8M,UAAYA,GACpCpX,OAAOjE,sBAAsBnD,EAAKggB,MAIhCH,EAAUnO,WAAWyN,QAAUA,GAASA,GAAST,IACnD/N,EAAmB,CACjBwO,WAAOxd,EACP6c,UAAU,EAEV5N,WAAYA,EAAW7K,OAAO,CAAC0Y,EAAYgB,OAE7CvS,EAAY,MAAAnH,OAAOga,EAAP,sDAIhBJ,kCAAe,SAAAjY,IAAA,IAAA6G,EAAA3C,EAAAQ,EAAAuE,EAAAyF,EAAA,OAAA5O,EAAAhE,EAAAuE,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAhG,MAAA,cAAAuM,EACmCvO,EAAKG,MAA7CyL,EADK2C,EACL3C,KAAMQ,EADDmC,EACCnC,UAAWuE,EADZpC,EACYoC,mBADZ3I,EAAAC,KAAA,EAAAD,EAAAhG,KAAA,EAKOoK,EAAUiH,YAAY4M,IAAIrU,EAAKwC,cAAe,CAAE9C,KAAMM,EAAKyB,UALlE,OAKX+I,EALWpO,EAAAoL,KAAApL,EAAAhG,KAAA,uBAAAgG,EAAAC,KAAA,EAAAD,EAAAK,GAAAL,EAAA,SAAAA,EAAAqG,OAAA,SAOJ/F,QAAQqM,MAAR3M,EAAAK,KAPI,QAUbsI,EAAmB,CACjBoP,cAAe3J,EAAUtS,KACzBoc,gBAAiB9J,EAAU1D,OAC3ByN,aAAc/J,EAAU+J,aAAazM,WACrC0M,aAAchK,EAAUgK,aAAa1M,WACrC2M,eAAgBjK,EAAUiK,iBAff,yBAAArY,EAAAU,SAAAhB,EAAApE,KAAA,cAmBf0c,KAAO,WAAM,IAAAjL,EAC0B/U,EAAKG,MAAlCyL,EADGmJ,EACHnJ,KAAM+E,EADHoE,EACGpE,mBADH2P,EAE+CtgB,EAAKG,MAAMuR,WAA7D0O,EAFGE,EAEHF,aAAcC,EAFXC,EAEWD,eAAgBlB,EAF3BmB,EAE2BnB,MAAOX,EAFlC8B,EAEkC9B,SAE7C,GAAqB,kBAAVW,EAAoB,CAC7B,IAAMoB,EAAOC,KACXrB,EAAMzL,WACN9H,EAAKwC,cAAcsF,WACnB2M,EACAzU,EAAKyB,QAAQT,UAAU,GAAG6T,eAM5B,GAJA9P,EAAmB,CAAE4P,SA9D3B,SAAgCA,EAAMpJ,GAGpC,OAFAoJ,EAAO/f,SAAS,KAAOuX,OAAOwI,GAAO,MACrCpJ,EAAS3W,SAAS2W,EAAQ,KA8DEuJ,CAAuBH,EAAMH,GAGnD,OAAOzP,EAAmB,CACxBgQ,kBAAkB,EAClBnC,UAAU,EACVoC,eAAe,IAGjBjQ,EAAmB,CAAEwO,MAAOA,EAAQ,IAElCX,GACFpX,OAAOjE,sBAAsBnD,EAAKggB,UAIxCa,WAAa,WACX7gB,EAAKG,MAAMwQ,mBAAmB,CAAE6N,UAAU,OAG5CsC,iCAAc,SAAAlO,IAAA,IAAA0I,EAAA1P,EAAAQ,EAAAuE,EAAAzD,EAAAiS,EAAA4B,EAAAC,EAAA,OAAAxZ,EAAAhE,EAAAuE,KAAA,SAAAkL,GAAA,cAAAA,EAAAhL,KAAAgL,EAAAjR,MAAA,cAAAsZ,EACgDtb,EAAKG,MAA3DyL,EADM0P,EACN1P,KAAMQ,EADAkP,EACAlP,UAAWuE,EADX2K,EACW3K,mBAAoBzD,EAD/BoO,EAC+BpO,aACnCiS,EAAUnf,EAAKG,MAAMuR,WAArByN,MAERxO,EAAmB,CAAEsQ,cAAc,IAJvBhO,EAAAhL,KAAA,EAAAgL,EAAAjR,KAAA,EAOJoK,EAAU8U,IAAIC,kBAAkBpJ,OAAOoH,GAAQ,CAAE7T,KAAMM,EAAKyB,UAPxD,OAAA4F,EAAAjR,KAAA,gBAAAiR,EAAAhL,KAAA,EAAAgL,EAAA5K,GAAA4K,EAAA,SASV3K,QAAQqM,MAAR1B,EAAA5K,IATU,eAYN0Y,EAAW9H,OAAOrN,EAAKoH,kBAAkBpH,EAAKwC,eAAeqF,QAZvDR,EAAAjR,KAAA,GAaN2Q,KAbM,QAcZ/G,EAAO5L,EAAKG,MAAMyL,KACZoV,EAAW/H,OAAOrN,EAAKoH,kBAAkBpH,EAAKwC,eAAeqF,QAEnEzT,EAAK2f,eACLhP,EAAmB,CACjB6N,UAAU,EACVoC,eAAe,EACfL,KAAM,GACNpB,MAAO,EACP8B,cAAc,IAGZD,EAAWD,EACbpQ,EAAmB,CAAEyQ,mBAAmB,IAExClU,EAAa,iDAAkD,OA7BrD,yBAAA+F,EAAAvK,SAAAkK,EAAAtP,KAAA,oFAiCL,IAAA+Y,EAC6C/Y,KAAKnD,MAAxCuR,GADV2K,EACCrS,QADDqS,EACU3K,YAAYf,EADtB0L,EACsB1L,mBAE3B6N,EASE9M,EATF8M,SACA+B,EAQE7O,EARF6O,KACAK,EAOElP,EAPFkP,cACAK,EAMEvP,EANFuP,aACAlB,EAKErO,EALFqO,cACAtB,EAIE/M,EAJF+M,UACAC,EAGEhN,EAHFgN,QACA0C,EAEE1P,EAFF0P,kBACAT,EACEjP,EADFiP,iBAGF,OACExW,EAAA3G,EAAAC,cAACoa,GAAD,KACI1T,EAAA3G,EAAAC,cAACuI,GAAD,CACE1C,KAAK,SAEHkV,IAAaoC,GACbzW,EAAA3G,EAAAC,cAACwR,EAAA,SAAD,0CACqC8K,EADrC,MAEE5V,EAAA3G,EAAAC,cAAC4d,GAAD,CAAW1C,SAAUc,KACrBtV,EAAA3G,EAAAC,cAACuI,GAAD,CACE/C,QAAQ,UAEPwV,GAAaC,EAAb,QAAA3Y,OAA+B0Y,EAA/B,QAAA1Y,OAA+C2Y,GAAY,eAIjEF,GACCrU,EAAA3G,EAAAC,cAACwR,EAAA,SAAD,KACE9K,EAAA3G,EAAAC,cAAA,6BACkBgb,EADlB,OACiCC,EADjC,OAGAvU,EAAA3G,EAAAC,cAACuI,GAAD,CAAY/C,QAAQ,OAChBsX,GAEJpW,EAAA3G,EAAAC,cAACuI,GAAD,CACErC,UAAQ,EACRO,QAAS5G,KAAKud,YAFhB,iBAQFrC,GAAYoC,GACZzW,EAAA3G,EAAAC,cAACwR,EAAA,SAAD,KACE9K,EAAA3G,EAAAC,cAAA,8CAGA0G,EAAA3G,EAAAC,cAACuI,GAAD,CAAY/C,QAAQ,QAChBsX,GAEJpW,EAAA3G,EAAAC,cAACuI,GAAD,CACErC,UAAQ,EACRO,QAAS5G,KAAKwd,aAEZG,EAAwC9W,EAAA3G,EAAAC,cAACwR,EAAA,SAAD,iCAAmC9K,EAAA3G,EAAAC,cAACqK,GAAD,OAA5D,0BAKzB3D,EAAA3G,EAAAC,cAACqM,GAAAtM,EAAD,CACEuM,IAAKuR,KACLrR,WAAY0Q,GAAoBzQ,KAAMC,OAAOC,QAC7CC,OAAQ,GACRQ,kBAAmB,kBAAMF,EAAmB,CAAEgQ,kBAAkB,OAElExW,EAAA3G,EAAAC,cAACqM,GAAAtM,EAAD,CACEuM,IAAKoF,KACLlF,WAAYmR,GAAqBlR,KAAMC,OAAOC,QAC9CC,OAAQ,GACRQ,kBAAmB,kBAAMF,EAAmB,CAAEyQ,mBAAmB,eAxL9Czd,aAgN/B+b,GAAmBzT,YAjBK,SAAAC,GACtB,MAAO,CACLE,UAAWF,EAAME,UACjBR,KAAMM,EAAMN,KACZjE,KAAMuE,EAAMvE,KACZ+J,WAAYxF,EAAMwF,WAClBG,IAAK3F,EAAM2F,MAIY,SAAAxF,GACzB,MAAO,CACLa,aAAc,SAACa,EAAS9E,GAAV,OAAqBoD,EAAS,CAAEhB,KAAM,iBAAkB0C,UAAS9E,aAC/E0H,mBAAoB,SAAAG,GAAe,OAAIzE,EAAS,CAAEhB,KAAM,uBAAwByF,uBAIjE7E,CAA6CyT,IAEjDA,OADfA,GAAmBrV,IA/NJ,CACbkX,cAAe,CACb/b,cAAe,QA6NA6E,CAAoBqV,ICvNnC8B,GAAY,SAAAtY,GAA+D,IAA5Dc,EAA4Dd,EAA5Dc,QAASE,EAAmDhB,EAAnDgB,QAASwI,EAA0CxJ,EAA1CwJ,OAAQ+O,EAAkCvY,EAAlCuY,SAAU3J,EAAwB5O,EAAxB4O,SACjDJ,GADyExO,EAAdiL,QACnD,IASZ,OARI2D,GACFJ,EAAQlJ,EAAQkT,MAAM,EAAG,GAAGjT,IAAI,SAAAC,GAAM,OAAIA,EAAO5K,QAC3C6d,QAAQ,MAEdjK,EAAQ+J,EAASC,SACXC,QAAQ,CAACjP,WAIfvI,EAAA3G,EAAAC,cAAA,OACEyG,QAASA,EACTxG,UAAWsG,EAAQwX,WAElB9J,EAAM7K,QAAU6K,EAAMjJ,IAAI,SAACuJ,EAAMtL,GAChC,OAAIoL,EAEA3N,EAAA3G,EAAAC,cAAA,OAAKkL,IAAKsP,MACPjG,GAIS,IAANtL,EAAUvC,EAAA3G,EAAAC,cAAA,OAAKkL,IAAKsP,MAASjG,EAAKtF,QACxCvI,EAAA3G,EAAAC,cAAA,OAAKkL,IAAKsP,MACR9T,EAAA3G,EAAAC,cAAA,QAAMkL,IAAKsP,MACRjG,EAAK4J,KAAO5J,EAAK4J,IAAIlO,YAExBvJ,EAAA3G,EAAAC,cAAA,QAAMkL,IAAKsP,MACR,OAEH9T,EAAA3G,EAAAC,cAAA,QAAMkL,IAAKsP,MACRjG,EAAK9B,KAAO8B,EAAK9B,IAAIxC,iBAgBtC8N,GAAYvV,YANY,SAAAC,GACtB,MAAO,CACLiI,QAASjI,EAAMvE,KAAK2F,MAAM6G,UAIlBlI,CAAyBuV,IAEtBA,OADfA,GAAYnX,IAhEG,CACbmX,UAAW,CACThc,cAAe,MACfU,MAAO,iBACPd,gBAAiB,OAEjBoK,UAAW,CACTzG,OAAQ,iBACR7C,MAAO,MACPgS,WAAY,SAAAlP,GAAA,OAAAA,EAAG8O,SAA0B,OAAS,MAClDtS,cAAe,SAsDT6E,CAAoBmX,IC1D1BK,8MACJ3V,MAAQ,CACNa,WAAW,EACX+U,oBAAqB,GACrBxI,eAAgB,MAGlBvZ,uCAAoB,SAAA2H,IAAA,IAAA4R,EAAA,OAAA9R,EAAAhE,EAAAuE,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAhG,MAAA,cAAAgG,EAAAhG,KAAA,EACWhC,EAAKyZ,oBADhB,OACZH,EADYtR,EAAAoL,KAElBpT,EAAKmN,SAAS,CAACmM,mBACftZ,EAAK+hB,mBAHa,wBAAA/Z,EAAAU,SAAAhB,EAAApE,WAMpBmW,uCAAoB,SAAA5E,IAAA,IAAA9K,EAAAuP,EAAA,OAAA9R,EAAAhE,EAAAuE,KAAA,SAAA+M,GAAA,cAAAA,EAAA7M,KAAA6M,EAAA9S,MAAA,cAAA+H,EACU/J,EAAKG,MADf4J,EACVqC,UADUrC,EACC6B,KACb0N,EAAiB,GAFLxE,EAAAzG,OAAA,SAIX,IAAIpH,QAAJ,eAAAkC,EAAA7B,OAAAC,EAAA,EAAAD,CAAAE,EAAAhE,EAAAiE,KAAY,SAAAmL,EAAO1L,EAASC,GAAhB,IAAAuF,EAAA,OAAAlF,EAAAhE,EAAAuE,KAAA,SAAAkL,GAAA,cAAAA,EAAAhL,KAAAgL,EAAAjR,MAAA,OAEf,IAFeiR,EAAAhL,KAAA,EAENyE,EAAI,EAAGA,EAAI,EAAGA,IACrB4M,EAAeuB,KAAK,CAClB/W,KAAMuP,GAAY3G,GAAG5I,KACrB4O,OAAQW,GAAY3G,GAAGgG,SALZO,EAAAjR,KAAA,sBAAAiR,EAAAhL,KAAA,EAAAgL,EAAA5K,GAAA4K,EAAA,SAAAA,EAAA5E,OAAA,SASRlH,EAAM8L,EAAA5K,KATE,OAYjBnB,EAAQoS,GAZS,wBAAArG,EAAAvK,SAAAkK,EAAAtP,KAAA,YAAZ,gBAAA8Q,EAAAC,GAAA,OAAAlL,EAAA0K,MAAAvQ,KAAAwQ,YAAA,KAJW,wBAAAgB,EAAApM,SAAAmM,EAAAvR,WAoBpBye,sCAAmB,SAAAlI,IAAA,IAAAtL,EAAAnC,EAAAR,EAAAoW,EAAAC,EAAAC,EAAAJ,EAAA,OAAAta,EAAAhE,EAAAuE,KAAA,SAAAsS,GAAA,cAAAA,EAAApS,KAAAoS,EAAArY,MAAA,OAAAuM,EACiBvO,EAAKG,MAA/BiM,EADSmC,EACTnC,UAAWR,EADF2C,EACE3C,KADF2C,EACQ5G,KAGrBqa,EAAoB,GAJPC,EAAAza,EAAAhE,EAAAiE,KAAA,SAAAwa,EAKRC,GALQ,IAAA1T,EAAA2T,EAAAjU,EAAA,OAAA1G,EAAAhE,EAAAuE,KAAA,SAAAwS,GAAA,cAAAA,EAAAtS,KAAAsS,EAAAvY,MAAA,OAMTwM,EAAU,GAND2T,EAAA3a,EAAAhE,EAAAiE,KAAA,SAAA0a,EAONjU,GAPM,IAAAyK,EAAAC,EAAAC,EAAA,OAAArR,EAAAhE,EAAAuE,KAAA,SAAA+R,GAAA,cAAAA,EAAA7R,KAAA6R,EAAA9X,MAAA,cAAA8X,EAAA9X,KAAA,EAQeoK,EAAU0M,IAAIC,iBAAiB7K,EAAUgU,EAAa,CAAE5W,KAAMM,EAAKyB,UARlF,cAQPsL,EAROmB,EAAA1G,KASPwF,EAAeI,MAAMnF,MAAM,KAAM,CAAChH,OAAQrM,SAASmY,EAAcjF,cAAcjF,IAAIwK,OAAOV,KAAMU,QATzFa,EAAA9X,KAAA,EAUUiF,QAAQuM,IAAIoF,EAAanK,IAAI,SAAAyK,GAAW,OAAI,IAAIjS,QAAJ,eAAAyC,EAAApC,OAAAC,EAAA,EAAAD,CAAAE,EAAAhE,EAAAiE,KAAY,SAAAsS,EAAO7S,EAASC,GAAhB,IAAAgS,EAAA,OAAA3R,EAAAhE,EAAAuE,KAAA,SAAAiS,GAAA,cAAAA,EAAA/R,KAAA+R,EAAAhY,MAAA,cAAAgY,EAAAhY,KAAA,EACrDoK,EAAU0M,IAAIM,aAAalL,EAAUgU,EAAahJ,EAAa,CAAE5N,KAAMM,EAAKyB,UADvB,OACvE8L,EADuEa,EAAA5G,KAE7ElM,EAAQiS,GAFqE,wBAAAa,EAAAtR,SAAAqR,EAAAzW,SAAZ,gBAAAqQ,EAAAC,GAAA,OAAAlK,EAAAmK,MAAAvQ,KAAAwQ,YAAA,OAVtD,OAeb+E,GALIA,EAVSiB,EAAA1G,MAeW2K,OAAO,SAAAqE,GAAK,OAAIA,EAAMpE,OAC9CxP,EAAQN,GAAY2K,EAhBP,wBAAAiB,EAAApR,SAAAyZ,EAAA7e,QAON4K,EAAW,EAPL,YAOQA,EAAW,GAPnB,CAAAqM,EAAAvY,KAAA,eAAAuY,EAAA8H,cAAAF,EAONjU,GAPM,eAOsBA,IAPtBqM,EAAAvY,KAAA,eAkBfggB,EAAkBE,GAAe1T,EAlBlB,wBAAA+L,EAAA7R,SAAAuZ,EAAA3e,QAKR4e,EAAc,EALN,YAKSA,EAAc,GALvB,CAAA7H,EAAArY,KAAA,eAAAqY,EAAAgI,cAAAJ,EAKRC,GALQ,eAK0BA,IAL1B7H,EAAArY,KAAA,eAsBX8f,EAAsBE,EAAkBvT,IAAI,SAAA2H,GAChD,OAAOA,EAAU3H,IAAI,SAAAC,GACnB,GAAIA,EAAO7B,OAAQ,CAIjB,IAHA,IAAI+U,EAAMlT,EAAO,GAAGmJ,MAChB3B,EAAMxH,EAAO,GAAGmJ,MAEXnL,EAAI,EAAGA,EAAIgC,EAAO7B,OAAQH,IAC7BgC,EAAOhC,GAAGmL,MAAMyK,GAAGV,KACrBA,EAAMlT,EAAOhC,GAAGmL,OAEdnJ,EAAOhC,GAAGmL,MAAM0K,GAAGrM,KACrBA,EAAMxH,EAAOhC,GAAGmL,OAIpB,MAAO,CAAE+J,MAAK1L,OAEd,MAAO,CAAE0L,IAAK,GAAI1L,IAAK,QAK7B5N,QAAQC,IAAI,sBAAuBuZ,GACnC9hB,EAAKmN,SAAS,CAAE2U,sBAAqB/U,WAAW,IA7C/B,yBAAAsN,EAAA3R,SAAAmR,EAAAvW,iFAgDV,IAAAyR,EACmBzR,KAAKnD,MADxByN,GAAAmH,EACC/K,QADD+K,EACUnJ,KAC0CtI,KAAK4I,OAAxD4V,EAFDlU,EAECkU,oBAAqBxI,EAFtB1L,EAEsB0L,eAAgBvM,EAFtCa,EAEsCb,UAE7C,OACE5C,EAAA3G,EAAAC,cAACoa,GAAD,KACG9Q,EACC5C,EAAA3G,EAAAC,cAACwR,EAAA,SAAD,KACE9K,EAAA3G,EAAAC,cAACqK,GAAD,MADF,qBAKA3D,EAAA3G,EAAAC,cAACwR,EAAA,SAAD,KACE9K,EAAA3G,EAAAC,cAAC+e,GAAD,CAAW1K,UAAQ,IAClBgK,EAAoBjV,QAAUiV,EAAoBrT,IAAI,SAACgU,EAAmB/V,GAApB,OACrDvC,EAAA3G,EAAAC,cAAC+e,GAAD,CACE7T,IAAKsP,KACLwD,SAAUgB,EACV/P,OAAQ4G,EAAe5M,GAAGgG,oBAnGf/O,aA0H3Bke,GAAe5V,YAbS,SAAAC,GACtB,MAAO,CACLE,UAAWF,EAAME,UACjBR,KAAMM,EAAMN,KACZjE,KAAMuE,EAAMvE,OAIW,SAAA0E,GACzB,MAAO,IAIMJ,CAA6C4V,IAE7CA,OADfA,GAAexX,IA7HA,GA6HAA,CAAoBwX,uBC7G7Ba,eACJ,SAAAA,EAAYviB,GAAO,IAAAH,EAAA,OAAAsH,OAAA8Q,EAAA,EAAA9Q,CAAAhE,KAAAof,IACjB1iB,EAAAsH,OAAA+Q,EAAA,EAAA/Q,CAAAhE,KAAAgE,OAAAgR,EAAA,EAAAhR,CAAAob,GAAAnK,KAAAjV,KAAMnD,KAQRJ,kBAAoB,WAClBC,EAAK2iB,sBAVY3iB,EAanB2iB,mBAbmBrb,OAAAC,EAAA,EAAAD,CAAAE,EAAAhE,EAAAiE,KAaE,SAAAC,IAAA,IAAAqC,EAAAqC,EAAAR,EAAAgX,EAAAC,EAAArhB,EAAAC,EAAAC,EAAAE,EAAAG,EAAA8B,EAAA6X,EAAAC,EAAAC,EAAAC,EAAAC,EAAAzS,EAAAF,EAAAuD,EAAAoW,EAAAC,EAAA,OAAAvb,EAAAhE,EAAAuE,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAhG,MAAA,cAAA+H,EACS/J,EAAKG,MAAzBiM,EADWrC,EACXqC,UAAWR,EADA7B,EACA6B,KADA5D,EAAAC,KAAA,EAAAD,EAAAhG,KAAA,EAKQoK,EAAU4W,OAAOL,mBAAmB,CAAErX,KAAMM,EAAKyB,UALzD,YAKXuV,EALW5a,EAAAoL,MAMFvG,OANE,CAAA7E,EAAAhG,KAAA,SAOT6gB,EAAW,GAPFrhB,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAAqG,EAAAC,KAAA,GAAArG,EASAghB,EATA/gB,OAAAC,YAAA,WAAAN,GAAAO,EAAAH,EAAAI,QAAAC,KAAA,CAAA+F,EAAAhG,KAAA,gBASN6B,EATM9B,EAAAI,MAAA6F,EAAAK,GAUbwa,EAVa7a,EAAAyS,GAWP5W,EAAG6P,WAXI1L,EAAAhG,KAAA,GAYAoK,EAAU4W,OAAOC,WAAWpf,EAAI,CAAEyH,KAAMM,EAAKyB,UAZ7C,QAAArF,EAAA2S,GAAA3S,EAAAoL,KAAApL,EAAA4S,GAAA,CAWX/W,GAXWmE,EAAAyS,GAYXva,IAZW8H,EAAA2S,IAAA3S,EAAAK,GAUJwS,KAVItC,KAAAvQ,EAAAK,GAAAL,EAAA4S,IAAA,QAAApZ,GAAA,EAAAwG,EAAAhG,KAAA,iBAAAgG,EAAAhG,KAAA,iBAAAgG,EAAAC,KAAA,GAAAD,EAAA8S,GAAA9S,EAAA,UAAAvG,GAAA,EAAAC,EAAAsG,EAAA8S,GAAA,QAAA9S,EAAAC,KAAA,GAAAD,EAAAC,KAAA,GAAAzG,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAyF,EAAAC,KAAA,IAAAxG,EAAA,CAAAuG,EAAAhG,KAAA,eAAAN,EAAA,eAAAsG,EAAA+S,OAAA,mBAAA/S,EAAA+S,OAAA,YAAAW,GAAA,EAAAC,GAAA,EAAAC,OAAAja,EAAAqG,EAAAC,KAAA,GAAA4T,EAgBUgH,EAASK,UAhBnBrhB,OAAAC,YAAA,WAAA4Z,GAAAI,EAAAD,EAAA7Z,QAAAC,KAAA,CAAA+F,EAAAhG,KAAA,gBAAAqH,EAAAyS,EAAA3Z,MAAAgH,EAAA7B,OAAA6b,GAAA,EAAA7b,CAAA+B,EAAA,GAgBLqD,EAhBKvD,EAAA,GAgBF2Z,EAhBE3Z,EAAA,GAAAnB,EAAAhG,KAAA,GAiBUoK,EAAU4W,OAAOI,mBAAmBN,EAAQjf,GAAI,CAAEyH,KAAMM,EAAKyB,UAjBvE,QAiBP0V,EAjBO/a,EAAAoL,KAkBbyP,EAASnW,GAAGmL,MAAQkL,EAASlL,MAAMnE,WACnCmP,EAASnW,GAAGkL,OAASmL,EAASnL,OAnBjB,QAAA8D,GAAA,EAAA1T,EAAAhG,KAAA,iBAAAgG,EAAAhG,KAAA,iBAAAgG,EAAAC,KAAA,GAAAD,EAAAgT,GAAAhT,EAAA,UAAA2T,GAAA,EAAAC,EAAA5T,EAAAgT,GAAA,QAAAhT,EAAAC,KAAA,GAAAD,EAAAC,KAAA,GAAAyT,GAAA,MAAAG,EAAAtZ,QAAAsZ,EAAAtZ,SAAA,WAAAyF,EAAAC,KAAA,IAAA0T,EAAA,CAAA3T,EAAAhG,KAAA,eAAA4Z,EAAA,eAAA5T,EAAA+S,OAAA,mBAAA/S,EAAA+S,OAAA,YAsBf/a,EAAKmN,SAAS,CAAE0V,aAtBD,QAAA7a,EAAAhG,KAAA,iBAAAgG,EAAAC,KAAA,GAAAD,EAAAqb,GAAArb,EAAA,SAyBjBM,QAAQqM,MAAR3M,EAAAqb,IAzBiB,yBAAArb,EAAAU,SAAAhB,EAAApE,KAAA,iEAbFtD,EA0CnBsjB,IA1CmBhc,OAAAC,EAAA,EAAAD,CAAAE,EAAAhE,EAAAiE,KA0Cb,SAAAmL,IAAA,IAAArE,EAAAnC,EAAAR,EAAAgC,EAAAiV,EAAAU,EAAAT,EAAA,OAAAtb,EAAAhE,EAAAuE,KAAA,SAAAkL,GAAA,cAAAA,EAAAhL,KAAAgL,EAAAjR,MAAA,cAAAuM,EACwBvO,EAAKG,MAAzBiM,EADJmC,EACInC,UAAWR,EADf2C,EACe3C,KADfgC,EAEoC5N,EAAKkM,MAArC2W,EAFJjV,EAEIiV,SAAUU,EAFd3V,EAEc2V,kBACZT,EAAUD,EAASA,EAASzF,UAAU,SAAA0F,GAAO,OAAIA,EAAQjf,KAAO0f,KAHlEtQ,EAAAhL,KAAA,EAAAgL,EAAAjR,KAAA,EAKIoK,EAAU4W,OAAOM,IAAIC,EAAmB,CAAEjY,KAAMM,EAAKyB,QAASlL,MAAO2gB,EAAQjL,QALjF,OAAA5E,EAAAjR,KAAA,gBAAAiR,EAAAhL,KAAA,EAAAgL,EAAA5K,GAAA4K,EAAA,SAOF3K,QAAQqM,MAAR1B,EAAA5K,IAPE,QASJrI,EAAK2iB,qBATD,yBAAA1P,EAAAvK,SAAAkK,EAAAtP,KAAA,YAxCJtD,EAAKkM,MAAQ,CACX2W,SAAU,GACVU,kBAAmB,KACnBxW,WAAW,GALI/M,wEAsDV,IAAAsO,EAAAhL,KACC0G,EAAY1G,KAAKnD,MAAjB6J,QADD6S,EAKHvZ,KAAK4I,MAFP2W,EAHKhG,EAGLgG,SACAU,EAJK1G,EAIL0G,kBAGIhN,EAAc,CAClB,CAAEK,GAAItT,KAAKggB,IAAK9M,MAAO,QAGzB,OACErM,EAAA3G,EAAAC,cAACoa,GAAD,CAActH,YAAaA,GACzBpM,EAAA3G,EAAAC,cAAA,OAAKC,UAAWsG,EAAQ+B,WACD,IAApB8W,EAAShW,QAAgB,2CACzBgW,EAASpU,IAAI,SAAAqU,GAAO,OACnB3Y,EAAA3G,EAAAC,cAAA,OACEkL,IAAKmU,EAAQjf,GACbH,UAAWsG,EAAQwZ,WACnBtZ,QAAS,kBAAMoE,EAAKnB,SAAS,CAAEoW,kBAAmBT,EAAQjf,OAE1DsG,EAAA3G,EAAAC,cAAA,OAAKmL,MAAO,CACVxJ,gBAAiBme,IAAsBT,EAAQjf,GAAK,OAAS,KAC7DzD,MAAOmjB,IAAsBT,EAAQjf,GAAK,OAAS,OAElDif,EAAQjf,IAEXsG,EAAA3G,EAAAC,cAAA,WACGqf,EAAQ5iB,KAEXiK,EAAA3G,EAAAC,cAAA,WACGqf,EAAQjL,OAEX1N,EAAA3G,EAAAC,cAAA,WACGqf,EAAQlL,QAEXzN,EAAA3G,EAAAC,cAAC3D,GAAA,EAAD,CAASI,IAAK4iB,EAAQ5iB,kBA3FJyD,aAkHhC+e,GAAoBzW,YAdI,SAAAC,GACtB,MAAO,CACLE,UAAWF,EAAME,UACjBR,KAAMM,EAAMN,KACZjE,KAAMuE,EAAMvE,OAIW,SAAA0E,GACzB,MAAO,CACLa,aAAc,SAACa,EAAS9E,GAAV,OAAqBoD,EAAS,CAAEhB,KAAM,iBAAkB0C,UAAS9E,eAI/DgD,CAA6CyW,IAElDA,OADfA,GAAoBrY,IAvIL,CACb0B,UAAW,CACT7F,MAAO,OACP4Q,sBAAuB,CACrBC,KAAM,OAERC,qBAAsB,CACpBD,KAAM,QAGVyM,WAAY,CACVhe,cAAe,MACfE,WAAY,aACZ8J,UAAW,CACTzG,OAAQ,iBACRS,QAAS,KAwHKa,CAAoBqY,yBC3HlCe,GAAoB,QAEpBC,eACJ,SAAAA,IAAc,IAAA1jB,EAAA,OAAAsH,OAAA8Q,EAAA,EAAA9Q,CAAAhE,KAAAogB,IACZ1jB,EAAAsH,OAAA+Q,EAAA,EAAA/Q,CAAAhE,KAAAgE,OAAAgR,EAAA,EAAAhR,CAAAoc,GAAAnL,KAAAjV,QAQFqgB,MATcrc,OAAAC,EAAA,EAAAD,CAAAE,EAAAhE,EAAAiE,KASN,SAAAC,IAAA,IAAAqC,EAAAqC,EAAAR,EAAAsB,EAAA,OAAA1F,EAAAhE,EAAAuE,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAhG,MAAA,OAAA+H,EACoC/J,EAAKG,MAAvCiM,EADFrC,EACEqC,UAAWR,EADb7B,EACa6B,KAAMsB,EADnBnD,EACmBmD,aAEzBlN,EAAKmN,SAAS,CACZJ,WAAW,EACX6W,WAAY,6BAGdxX,EAAU4W,OAAOW,MAAM,CAAErY,KAAMM,EAAKyB,UACjCG,GAAG,kBAAmB,WACrBxN,EAAKmN,SAAS,CACZyW,WAAY,kCAGfpW,GAAG,UAAW,WACbmF,KACA3S,EAAK6jB,wBAENrW,GAAG,QAAS,SAAAE,GACXR,EAAaX,GAAamB,EAAEC,SAAU,OACtC3N,EAAKmN,SAAS,CACZJ,WAAW,EACX6W,WAAY,YAtBZ,wBAAA5b,EAAAU,SAAAhB,EAAApE,SATMtD,EAoCd6jB,oBApCcvc,OAAAC,EAAA,EAAAD,CAAAE,EAAAhE,EAAAiE,KAoCQ,SAAAmL,IAAA,IAAArE,EAAAnC,EAAAR,EAAAkY,EAAAlB,EAAAmB,EAAA,OAAAvc,EAAAhE,EAAAuE,KAAA,SAAAkL,GAAA,cAAAA,EAAAhL,KAAAgL,EAAAjR,MAAA,cAAAuM,EACQvO,EAAKG,MAAzBiM,EADYmC,EACZnC,UAAWR,EADC2C,EACD3C,KAGnB5L,EAAKmN,SAAS,CACZJ,WAAW,IALOkG,EAAAhL,KAAA,EAAAgL,EAAAjR,KAAA,EASOoK,EAAU4W,OAAOgB,gBAAgBpY,EAAKyB,QAAS,CAAE/B,KAAMM,EAAKyB,UATnE,cASZuV,EATY3P,EAAAG,KAUZ2Q,EAASnB,EAAWA,EAAW/V,OAAS,GAV5BoG,EAAAjR,KAAA,EAWFoK,EAAU4W,OAAOC,WAAWc,EAAQ,CAAEzY,KAAKM,EAAKyB,UAX9C,OAWlByW,EAXkB7Q,EAAAG,KAAAH,EAAAjR,KAAA,iBAAAiR,EAAAhL,KAAA,GAAAgL,EAAA5K,GAAA4K,EAAA,SAalB3K,QAAQqM,MAAR1B,EAAA5K,IAbkB,QAgBpBrI,EAAKmN,SAAS,CACZ8V,WAAYa,EACZ/W,WAAW,EACXkX,WAAW,EACXL,WAAYH,IACX,WACDzjB,EAAKG,MAAM+M,aACT/C,EAAA3G,EAAAC,cAACwR,EAAA,SAAD,sCAEG6O,GAAW3Z,EAAA3G,EAAAC,cAAC3D,GAAA,EAAD,CAASI,IAAK4jB,KAE5B,UA3BgB,yBAAA7Q,EAAAvK,SAAAkK,EAAAtP,KAAA,aAlCpBtD,EAAKkM,MAAQ,CACXa,WAAW,EACXkX,WAAW,EACXL,WAAYH,IALFzjB,wEAoEL,IAAAsO,EAAAhL,KACC0G,EAAY1G,KAAKnD,MAAjB6J,QADD4D,EAEsCtK,KAAK4I,MAA1Ca,EAFDa,EAECb,UAAWkX,EAFZrW,EAEYqW,UAAWL,EAFvBhW,EAEuBgW,WAE9B,OACEzZ,EAAA3G,EAAAC,cAACoa,GAAD,KACE1T,EAAA3G,EAAAC,cAACuI,GAAD,CACE1C,KAAK,QAELa,EAAA3G,EAAAC,cAAA,6CACA0G,EAAA3G,EAAAC,cAAA,wDACA0G,EAAA3G,EAAAC,cAAA,OAAKC,UAAWsG,EAAQuX,eACpBpX,EAAA3G,EAAAC,cAACwR,EAAA,SAAD,KACE9K,EAAA3G,EAAAC,cAACuI,GAAD,CACErC,UAAWoD,EACX9D,QAAQ,OACRiB,QAAS5G,KAAKqgB,OACdC,EAAY7W,GAAa5C,EAAA3G,EAAAC,cAACqK,GAAD,UAInC3D,EAAA3G,EAAAC,cAACqM,GAAAtM,EAAD,CACEuM,IAAKmU,KACLjU,WAAYgU,GAAa/T,KAAMC,OAAOC,QACtCC,OAAQ,GACRQ,kBAAmB,kBAAMvC,EAAKnB,SAAS,CAAE8W,WAAW,eA9F/BtgB,aAmH/B+f,GAAmBzX,YAdK,SAAAC,GACtB,MAAO,CACLE,UAAWF,EAAME,UACjBR,KAAMM,EAAMN,KACZjE,KAAMuE,EAAMvE,OAIW,SAAA0E,GACzB,MAAO,CACLa,aAAc,SAACa,EAAS9E,GAAV,OAAqBoD,EAAS,CAAEhB,KAAM,iBAAkB0C,UAAS9E,eAIhEgD,CAA6CyX,IAEjDA,OADfA,GAAmBrZ,IA5HJ,CACbkX,cAAe,CACb/b,cAAe,QA0HA6E,CAAoBqZ,IC/GjCS,eACJ,SAAAA,IAAc,IAAAnkB,EAAA,OAAAsH,OAAA8Q,EAAA,EAAA9Q,CAAAhE,KAAA6gB,IACZnkB,EAAAsH,OAAA+Q,EAAA,EAAA/Q,CAAAhE,KAAAgE,OAAAgR,EAAA,EAAAhR,CAAA6c,GAAA5L,KAAAjV,QAYFvD,kBAAoB,WAClBC,EAAKgkB,mBAdOhkB,EAiBdgkB,gBAjBc1c,OAAAC,EAAA,EAAAD,CAAAE,EAAAhE,EAAAiE,KAiBI,SAAAC,IAAA,IAAAqC,EAAAqC,EAAAR,EAAAiX,EAAAD,EAAAphB,EAAAC,EAAAC,EAAAE,EAAAG,EAAA8B,EAAA,OAAA2D,EAAAhE,EAAAuE,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAhG,MAAA,cAAA+H,EACY/J,EAAKG,MAAzBiM,EADQrC,EACRqC,UAAWR,EADH7B,EACG6B,KACbiX,EAAW,GAEjB7iB,EAAKmN,SAAS,CAAEJ,WAAW,IAJX/E,EAAAC,KAAA,EAAAD,EAAAhG,KAAA,EAOWoK,EAAU4W,OAAOgB,gBAAgBpY,EAAKyB,QAAS,CAAE/B,KAAMM,EAAKyB,UAPvE,YAORuV,EAPQ5a,EAAAoL,QAQIwP,EAAW/V,OARf,CAAA7E,EAAAhG,KAAA,SAAAR,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAAqG,EAAAC,KAAA,GAAArG,EASGghB,EATH/gB,OAAAC,YAAA,WAAAN,GAAAO,EAAAH,EAAAI,QAAAC,KAAA,CAAA+F,EAAAhG,KAAA,gBASH6B,EATG9B,EAAAI,MAAA6F,EAAAK,GAUVwa,EAVU7a,EAAAyS,GAWJ5W,EAAG6P,WAXC1L,EAAAhG,KAAA,GAYGoK,EAAU4W,OAAOC,WAAWpf,EAAI,CAAEyH,KAAKM,EAAKyB,UAZ/C,QAAArF,EAAA2S,GAAA3S,EAAAoL,KAAApL,EAAA4S,GAAA,CAWR/W,GAXQmE,EAAAyS,GAYRva,IAZQ8H,EAAA2S,IAAA3S,EAAAK,GAUDwS,KAVCtC,KAAAvQ,EAAAK,GAAAL,EAAA4S,IAAA,QAAApZ,GAAA,EAAAwG,EAAAhG,KAAA,iBAAAgG,EAAAhG,KAAA,iBAAAgG,EAAAC,KAAA,GAAAD,EAAA8S,GAAA9S,EAAA,UAAAvG,GAAA,EAAAC,EAAAsG,EAAA8S,GAAA,QAAA9S,EAAAC,KAAA,GAAAD,EAAAC,KAAA,GAAAzG,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAyF,EAAAC,KAAA,IAAAxG,EAAA,CAAAuG,EAAAhG,KAAA,eAAAN,EAAA,eAAAsG,EAAA+S,OAAA,mBAAA/S,EAAA+S,OAAA,YAAA/S,EAAAhG,KAAA,iBAAAgG,EAAAC,KAAA,GAAAD,EAAAgT,GAAAhT,EAAA,SAiBdM,QAAQqM,MAAR3M,EAAAgT,IAjBc,QAoBhBhb,EAAKmN,SAAS,CACZ0V,WACA9V,WAAW,IAtBG,yBAAA/E,EAAAU,SAAAhB,EAAApE,KAAA,uCAjBJtD,EA2Cdkd,YAAc,WAAM,IAAAtP,EACiC5N,EAAKkM,MAAhDqX,EADU3V,EACV2V,kBAAmBhH,EADT3O,EACS2O,UAAWsG,EADpBjV,EACoBiV,SAC9B7Y,EAAYhK,EAAKG,MAAjB6J,QACF8Y,EAAUD,EAAShT,KAAK,SAAAiT,GAAO,OAAIA,EAAQjf,KAAO0f,IAExDvjB,EAAKG,MAAM+M,aACT/C,EAAA3G,EAAAC,cAAA,OAAKC,UAAWsG,EAAQqT,SACtBlT,EAAA3G,EAAAC,cAAA,0DAGA0G,EAAA3G,EAAAC,cAAC3D,GAAA,EAAD,CAASI,IAAK4iB,EAAQ5iB,MACtBiK,EAAA3G,EAAAC,cAAA,iBACM8f,GAENpZ,EAAA3G,EAAAC,cAAA,WACE0G,EAAA3G,EAAAC,cAAA,oBACA0G,EAAA3G,EAAAC,cAAA,SAAOK,KAAK,YAAYwZ,aAAcf,EAAWlR,KAAK,SAASkS,SAAUvd,EAAKiX,gBAEhF9M,EAAA3G,EAAAC,cAACuI,GAAD,CACE/C,QAAQ,OACRU,UAAQ,EACRO,QAASlK,EAAKokB,MAHhB,OAMF,QACA,IApEUpkB,EAwEdokB,KAxEc9c,OAAAC,EAAA,EAAAD,CAAAE,EAAAhE,EAAAiE,KAwEP,SAAAmL,IAAA,IAAArE,EAAAnC,EAAAR,EAAAiR,EAAA0G,EAAAhH,EAAA,OAAA/U,EAAAhE,EAAAuE,KAAA,SAAAkL,GAAA,cAAAA,EAAAhL,KAAAgL,EAAAjR,MAAA,cAAAuM,EACuBvO,EAAKG,MAAzBiM,EADHmC,EACGnC,UAAWR,EADd2C,EACc3C,KADdiR,EAEoC7c,EAAKkM,MAAtCqX,EAFH1G,EAEG0G,kBAAmBhH,EAFtBM,EAEsBN,UAFtBtJ,EAAAhL,KAAA,EAAAgL,EAAAjR,KAAA,EAKGoK,EAAU4W,OAAOoB,KAAKb,EAAmBhH,EAAW,CAAEjR,KAAMM,EAAKyB,UALpE,OAAA4F,EAAAjR,KAAA,gBAAAiR,EAAAhL,KAAA,EAAAgL,EAAA5K,GAAA4K,EAAA,SAOH3K,QAAQqM,MAAR1B,EAAA5K,IAPG,QAULrI,EAAKgkB,kBACLhkB,EAAKG,MAAM+M,aAAa,MAXnB,yBAAA+F,EAAAvK,SAAAkK,EAAAtP,KAAA,YAtELtD,EAAKkM,MAAQ,CACX2W,SAAU,GACVvG,WAAY,GACZC,UAAW,GACXE,kBAAkB,EAClB1P,WAAW,EACXwW,kBAAmB,MAErBvjB,EAAKiX,aAAeA,GAAauG,KAAblW,OAAAmW,GAAA,EAAAnW,QAAAmW,GAAA,EAAAnW,CAAAtH,KAVRA,wEAsFL,IAAAsO,EAAAhL,KACC0G,EAAY1G,KAAKnD,MAAjB6J,QADDmT,EAMH7Z,KAAK4I,MAHP2W,EAHK1F,EAGL0F,SACA9V,EAJKoQ,EAILpQ,UACAwW,EALKpG,EAKLoG,kBAGIhN,EAAc,CAClB,CAAEK,GAAItT,KAAK4Z,YAAa1G,MAAO,SAGjC,OACErM,EAAA3G,EAAAC,cAACoa,GAAD,CAActH,YAAaA,GACxBxJ,EACC5C,EAAA3G,EAAAC,cAACwR,EAAA,SAAD,KACE9K,EAAA3G,EAAAC,cAACqK,GAAD,MADF,uBAKA3D,EAAA3G,EAAAC,cAAA,OAAKC,UAAWsG,EAAQ+B,WACrB8W,EAASpU,IAAI,SAACqU,EAASpW,GAAV,OACZvC,EAAA3G,EAAAC,cAAA,OACEkL,IAAKjC,EACLhJ,UAAWsG,EAAQwZ,WACnBtZ,QAAS,kBAAMoE,EAAKnB,SAAS,CAAEoW,kBAAmBT,EAAQjf,OAE1DsG,EAAA3G,EAAAC,cAAA,OAAKmL,MAAO,CACVxJ,gBAAiBme,IAAsBT,EAAQjf,GAAK,OAAS,KAC7DzD,MAAOmjB,IAAsBT,EAAQjf,GAAK,OAAS,OAElDif,EAAQjf,IAEXsG,EAAA3G,EAAAC,cAAA,WACGqf,EAAQ5iB,KAEXiK,EAAA3G,EAAAC,cAAC3D,GAAA,EAAD,CAASI,IAAK4iB,EAAQ5iB,kBA3HLyD,aAoJjCwgB,GAAqBlY,YAfG,SAAAC,GACtB,MAAO,CACLE,UAAWF,EAAME,UACjBR,KAAMM,EAAMN,KACZjE,KAAMuE,EAAMvE,OAIW,SAAA0E,GACzB,MAAO,CACLa,aAAc,SAACa,EAAS9E,EAASuI,GAAnB,OACZnF,EAAS,CAAEhB,KAAM,iBAAkB0C,UAAS9E,UAASuI,uBAItCvF,CAA6CkY,IAEnDA,OADfA,GAAqB9Z,IArKN,CACbmZ,WAAY,CACVhe,cAAe,MACfE,WAAY,aACZ8J,UAAW,CACTzG,OAAQ,iBACRS,QAAS,IAGb6T,QAAS,CACP1H,uBAAwB,CACtBwI,aAAc,SA0JC9T,CAAoB8Z,IC1KnCvb,GAAS,CACbyb,OAAQ,CACNtb,OAAQ,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,QAAH,MAAiB,aAAeN,GAAiBM,IACzD7I,MAAO,OACP8F,MAAO,cACPqD,aAAc,EACdC,QAAS,OACTV,UAAW,SACXjG,SAAU,WACVwM,OAAQ,EACRjK,gBAAiB,QAEnBkf,SAAU,CACR/e,QAAS,SAAA2D,GAAA,OAAAA,EAAGqb,UAA4B,OAAS,QACjDlV,OAAQ,EACRxM,SAAU,WACV2hB,WAAY,sBACZha,OAAQ,QACRtE,MAAO,UAIPme,GAAS,SAAAlb,GAAA,IAAGa,EAAHb,EAAGa,QAASC,EAAZd,EAAYc,SAAZ,OACXE,EAAA3G,EAAAC,cAAA,OAAKC,UAAWsG,EAAQsa,UACtBna,EAAA3G,EAAAC,cAAA,OAAKC,UAAWsG,EAAQqa,QACpBpa,KAMOoa,GADfA,GAASha,IAAYzB,GAAZyB,CAAoBga,ICbvBpe,8MACJiG,MAAQ,CACNuY,cAAe,QAGjB1kB,uCAAoB,SAAA2H,IAAA,OAAAF,EAAAhE,EAAAuE,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAhG,MAAA,cAAAgG,EAAAC,KAAA,EAAAD,EAAAhG,KAAA,EAEVhC,EAAK0kB,uBAFK,cAAA1c,EAAAhG,KAAA,EAGVhC,EAAK2kB,qBAHK,cAAA3c,EAAAhG,KAAA,EAMMhC,EAAK4kB,uBANX,WAAA5c,EAAAoL,KAAA,CAAApL,EAAAhG,KAAA,gBAAAgG,EAAAhG,KAAA,GASR2Q,KATQ,QAAA3K,EAAAhG,KAAA,iBAWdhC,EAAKG,MAAM0L,aAAa,WAXV,QAAA7D,EAAAhG,KAAA,wBAAAgG,EAAAC,KAAA,GAAAD,EAAAK,GAAAL,EAAA,SAAAA,EAAAqG,OAAA,SAeT/F,QAAQqM,MAAR3M,EAAAK,KAfS,QAkBlBrI,EAAKmN,SAAS,CAAEsX,eAAe,IAlBb,yBAAAzc,EAAAU,SAAAhB,EAAApE,KAAA,eAqBpBohB,qBAAuB,kBAAM,IAAIzd,QAAJ,eAAAiC,EAAA5B,OAAAC,EAAA,EAAAD,CAAAE,EAAAhE,EAAAiE,KAAY,SAAAoN,EAAO3N,EAASC,GAAhB,IAAAQ,EAAAkd,EAAAzY,EAAA,OAAA5E,EAAAhE,EAAAuE,KAAA,SAAA+M,GAAA,cAAAA,EAAA7M,KAAA6M,EAAA9S,MAAA,cAAA8S,EAAA7M,KAAA,EAAA6M,EAAA9S,KAAA,EAGlBgF,KAHkB,cAG/BW,EAH+BmN,EAAA1B,KAIrCpT,EAAKG,MAAM2kB,QAAQnd,GAJkBmN,EAAA9S,KAAA,EAOd2F,EAAKkK,IAAIkT,cAPK,cAO/BF,EAP+B/P,EAAA1B,KAQrCpT,EAAKG,MAAM6kB,WAAWH,EAAS,IAG3BzY,EAAY,CACd,CAAE6Y,KAAMC,EAAiBphB,KAAM,eAC/B,CAAEmhB,KAAME,EAASrhB,KAAM,OACvB,CAAEmhB,KAAMG,EAASthB,KAAM,OACvB,CAAEmhB,KAAMI,GAASvhB,KAAM,OACvB,CAAEmhB,KAAMK,GAAYxhB,KAAM,WAhBSgR,EAAA9S,KAAA,GAmBnBiF,QAAQuM,IACxBpH,EAAUqC,IAAI,SAAA8W,GAAQ,OAAI,IAAIte,QAAJ,eAAAkC,EAAA7B,OAAAC,EAAA,EAAAD,CAAAE,EAAAhE,EAAAiE,KAAY,SAAAmL,EAAO1L,EAASC,GAAhB,IAAAqe,EAAApU,EAAA,OAAA5J,EAAAhE,EAAAuE,KAAA,SAAAkL,GAAA,cAAAA,EAAAhL,KAAAgL,EAAAjR,MAAA,cAC9BwjB,EAAWC,KAAgBF,EAASN,OACjCS,YAAY/d,EAAKge,iBAFU1S,EAAAhL,KAAA,EAAAgL,EAAAjR,KAAA,EAIXwjB,EAASI,WAJE,OAI5BxU,EAJ4B6B,EAAAG,KAKlClM,EAAQ,CACNkK,SAAUA,EACVtN,KAAMyhB,EAASzhB,OAPiBmP,EAAAjR,KAAA,gBAAAiR,EAAAhL,KAAA,EAAAgL,EAAA5K,GAAA4K,EAAA,SAUlC9L,EAAM8L,EAAA5K,IAV4B,yBAAA4K,EAAAvK,SAAAkK,EAAAtP,KAAA,YAAZ,gBAAAqQ,EAAAC,GAAA,OAAAzK,EAAA0K,MAAAvQ,KAAAwQ,YAAA,OApBS,SAmBrC1H,EAnBqC0I,EAAA1B,MAoC3ByS,QAAQ,SAAAN,GAAQ,OAAIvlB,EAAKG,MAAM2lB,YAAYP,EAASnU,SAAUmU,EAASzhB,QAEjFoD,IAtCqC4N,EAAA9S,KAAA,iBAAA8S,EAAA7M,KAAA,GAAA6M,EAAAzM,GAAAyM,EAAA,SA0CrC3N,EAAM2N,EAAAzM,IA1C+B,yBAAAyM,EAAApM,SAAAmM,EAAAvR,KAAA,aAAZ,gBAAA8Q,EAAAC,GAAA,OAAAnL,EAAA2K,MAAAvQ,KAAAwQ,YAAA,OA8C7B6Q,mBAAqB,WAAM,IAAA5a,EAC0C/J,EAAKG,MAAhEiM,EADiBrC,EACjBqC,UAAWR,EADM7B,EACN6B,KAAM+E,EADA5G,EACA4G,mBAAoBhJ,EADpBoC,EACoBpC,KAAMoe,EAD1Bhc,EAC0Bgc,YAEnD3Z,EAAU8U,IAAI8E,eAAe,CAAEC,UAAW,WACvCzY,GAAG,OAAQ,SAAA0Y,GAAQ,IAAAC,EACQD,EAAKE,aAAvBC,EADUF,EACVE,OAAQC,EADEH,EACFG,MAEhB3V,EAAmB,CAEjBC,WAAY,GACZyP,eAAgBiG,IAIdD,IAAWza,EAAKyB,SAClBsF,OAKNhL,EAAKkK,IAAI0U,UAAU,mBAChB/Y,GAAG,OAAQ,SAAA0Y,GAERH,EAAY,CAAES,YAAaN,EAAKO,cAIxC7B,qBAAuB,kBAAM,IAAI3d,QAAJ,eAAAoC,EAAA/B,OAAAC,EAAA,EAAAD,CAAAE,EAAAhE,EAAAiE,KAAY,SAAAsS,EAAO7S,EAASC,GAAhB,IAAAoH,EAAAnC,EAAAR,EAAA8a,EAAA,OAAAlf,EAAAhE,EAAAuE,KAAA,SAAAiS,GAAA,cAAAA,EAAA/R,KAAA+R,EAAAhY,MAAA,cAAAuM,EACXvO,EAAKG,MAAzBiM,EAD+BmC,EAC/BnC,UAAWR,EADoB2C,EACpB3C,KADoBoO,EAAA/R,KAAA,EAAA+R,EAAAhY,KAAA,EAKboK,EAAUgB,IAAIuZ,UAAU/a,EAAKyB,QAAS,CAAE/B,KAAMM,EAAKyB,UALtC,OAKrCqZ,EALqC1M,EAAA5G,KAAA4G,EAAAhY,KAAA,uBAAAgY,EAAA/R,KAAA,EAAA+R,EAAA3R,GAAA2R,EAAA,SAAAA,EAAA3L,OAAA,SAO9BlH,EAAM6S,EAAA3R,KAPwB,WAUJ,MAA/Bqe,EAAgBhT,WAVmB,CAAAsG,EAAAhY,KAAA,gBAWrChC,EAAKG,MAAMyP,YAAY,CAAE9D,eAAe,IAXHkO,EAAA3L,OAAA,SAY9BnH,GAAQ,IAZsB,QAevClH,EAAKG,MAAMyP,YAAY,CAAE9D,eAAe,IACxC5E,GAAQ,GAhB+B,yBAAA8S,EAAAtR,SAAAqR,EAAAzW,KAAA,YAAZ,gBAAA6X,EAAAF,GAAA,OAAA5R,EAAAwK,MAAAvQ,KAAAwQ,YAAA,OAmB7B8S,kBAAoB,SAACjS,EAAOkS,GAC1Bve,QAAQqM,MAAMA,EAAOkS,4EAGd,IACCpC,EAAkBnhB,KAAK4I,MAAvBuY,cADD1P,EAE6DzR,KAAKnD,MAAjE6J,EAFD+K,EAEC/K,QAASuH,EAFVwD,EAEUxD,cAAeE,EAFzBsD,EAEyBtD,UAAWqV,EAFpC/R,EAEoC+R,eAAgBlb,EAFpDmJ,EAEoDnJ,KACrD8C,EAASF,EAAQqB,KAAK,SAAAnB,GAAM,OAAIA,EAAO7K,IAAM+H,EAAKwC,gBAExD,IAAKqW,EACH,OAAOta,EAAA3G,EAAAC,cAAA,+CAkBT,OACE0G,EAAA3G,EAAAC,cAAA,OAAKC,UAAWsG,EAAQ/D,IAAK2I,MAhBf,WACd,IAAMmY,EAAc,GAWpB,MATkC,WAA/BxV,EAAcjR,OAAO,EAAG,IAAkD,WAA/BiR,EAAcjR,OAAO,EAAG,IAClD,gBAAlBiR,GAAqD,gBAAlBA,IAEnCwV,EAAYC,gBAAZ,OAAAjhB,OAAqC2I,EAAO3K,IAA5C,MAEwB,OAAtB6H,EAAKwC,gBACP2Y,EAAY1gB,mBAAqB,UACjC0gB,EAAYzgB,eAAiB,OAExBygB,EAI6BE,ICtJ3B,SAAA3a,GACb,OAAOA,GACL,IAAK,UAAW,OAAOnC,EAAA3G,EAAAC,cAACyjB,GAAD,MACvB,IAAK,kBAAmB,OAAO/c,EAAA3G,EAAAC,cAAC0jB,GAAD,MAE/B,IAAK,SAAU,OAAOhd,EAAA3G,EAAAC,cAAC2jB,GAAD,MACtB,IAAK,aAAc,OAAOjd,EAAA3G,EAAAC,cAAC4jB,GAAD,MAE1B,IAAK,cAAe,OAAOld,EAAA3G,EAAAC,cAAC6jB,GAAD,MAC3B,IAAK,aAAc,OAAOnd,EAAA3G,EAAAC,cAAC8jB,GAAD,MAC1B,IAAK,oBAAqB,OAAOpd,EAAA3G,EAAAC,cAAC+jB,GAAD,MACjC,IAAK,mBAAoB,OAAOrd,EAAA3G,EAAAC,cAACgkB,GAAD,MAChC,IAAK,eAAgB,OAAOtd,EAAA3G,EAAAC,cAACikB,GAAD,MAE5B,IAAK,oBAAqB,OAAOvd,EAAA3G,EAAAC,cAACkkB,GAAD,MACjC,IAAK,mBAAoB,OAAOxd,EAAA3G,EAAAC,cAACmkB,GAAD,MAChC,IAAK,qBAAsB,OAAOzd,EAAA3G,EAAAC,cAACokB,GAAD,ODwI7BC,CAAcvW,GAEfpH,EAAA3G,EAAAC,cAACskB,GAAD,CAAQ9e,QAASwI,EAAUxI,QAASsb,UAAW9S,EAAU1D,SACtD0D,EAAU1D,SACT0D,EAAUD,iBACVrH,EAAA3G,EAAAC,cAACuI,GAAD,CACE/C,QAASwI,EAAUxI,QACnBU,UAAQ,EACRO,QAAS4c,GAHX,eA1JMnjB,aA6LlBsC,GAAMgG,YAvBkB,SAAAC,GACtB,MAAO,CACLqF,cAAerF,EAAMoF,KAAKC,cAC1BnF,UAAWF,EAAME,UACjBR,KAAMM,EAAMN,KACZ6F,UAAWvF,EAAMoF,KAAKG,UACtB9J,KAAMuE,EAAMvE,OAIW,SAAA0E,GACzB,MAAO,CACLyY,QAAS,SAAAnd,GAAI,OAAI0E,EAAS,CAAEhB,KAAM,WAAY1D,UAC9Cme,YAAa,SAAC1U,EAAUtN,GAAX,OAAoBuI,EAAS,CAAEhB,KAAM,eAAgB+F,WAAUtN,UAC5EkhB,WAAY,SAAA3X,GAAO,OAAIhB,EAAS,CAAEhB,KAAM,cAAegC,aACvDuC,YAAa,SAAAU,GAAI,OAAIjE,EAAS,CAAEhB,KAAM,gBAAiBiF,UACvDK,mBAAoB,SAAAG,GAAe,OAAIzE,EAAS,CAAEhB,KAAM,uBAAwByF,qBAChFiV,YAAa,SAAAjU,GAAQ,OAAIzF,EAAS,CAAEhB,KAAM,gBAAiByG,cAC3DgV,eAAgB,kBAAMza,EAAS,CAAEhB,KAAM,iBAAkB0C,QAAS,MAClElC,aAAc,SAAAS,GAAM,OAAID,EAAS,CAAEhB,KAAM,gBAAiBiB,cAIxDL,CAA6ChG,IAEpCA,OADfA,GAAMoE,IAAYpF,EAAZoF,CAA0BpE,IEzM1B+hB,GAAcC,QACW,cAA7B7gB,OAAO8gB,SAASC,UAEe,UAA7B/gB,OAAO8gB,SAASC,UAEhB/gB,OAAO8gB,SAASC,SAASC,MACvB,2DAsCN,SAASC,GAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB3c,QACfqc,UAAUC,cAAcQ,WAK1B1gB,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrB0gB,MAAM,SAAAtU,GACLrM,QAAQqM,MAAM,4CAA6CA,mBCrEjEuU,IAAShmB,OACPiH,EAAA3G,EAAAC,cAAC0lB,EAAA,EAAD,CAAU9W,MAAOA,IACflI,EAAA3G,EAAAC,cAAC2lB,GAAA,EAAD,CAAaC,QAASlf,EAAA3G,EAAAC,cAACqK,GAAD,MAAYyE,UAAWA,IAC3CpI,EAAA3G,EAAAC,cAAC6lB,GAAD,QAGJhoB,SAASioB,eAAe,SDIX,WACb,GAA6C,kBAAmBhB,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,GAAwBriB,OAAO8gB,UAC3CwB,SAAWtiB,OAAO8gB,SAASwB,OAIvC,OAGFtiB,OAAOC,iBAAiB,OAAQ,WAC9B,IAAMihB,EAAK,GAAAviB,OAAM0jB,GAAN,sBAEPzB,IAiDV,SAAiCM,GAE/BqB,MAAMrB,GACHI,KAAK,SAAAkB,GAGkB,MAApBA,EAASzZ,SACuD,IAAhEyZ,EAASC,QAAQ5J,IAAI,gBAAgB6J,QAAQ,cAG7CvB,UAAUC,cAAcuB,MAAMrB,KAAK,SAAAC,GACjCA,EAAaqB,aAAatB,KAAK,WAC7BthB,OAAO8gB,SAAS+B,aAKpB5B,GAAgBC,KAGnBW,MAAM,WACL3gB,QAAQC,IACN,mEArEA2hB,CAAwB5B,GAIxBC,UAAUC,cAAcuB,MAAMrB,KAAK,WACjCpgB,QAAQC,IACN,+GAMJ8f,GAAgBC,MC7BxB6B,uBCnBAzqB,EAAAC,QAAiBC,EAAAC,EAAuB,0DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.97d73503.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/planet0.cd2085d3.png\";","module.exports = __webpack_public_path__ + \"static/media/planet1.06ea6d4b.png\";","module.exports = __webpack_public_path__ + \"static/media/planet2.d673fc3f.png\";","module.exports = __webpack_public_path__ + \"static/media/planet3.7994fc8c.png\";","module.exports = __webpack_public_path__ + \"static/media/planet4.e55e01aa.png\";","module.exports = __webpack_public_path__ + \"static/media/planet5.0d7f8301.png\";","module.exports = __webpack_public_path__ + \"static/media/planet6.bb4a7911.png\";","module.exports = __webpack_public_path__ + \"static/media/temple.fa6a9ca3.png\";","module.exports = __webpack_public_path__ + \"static/media/planet0.047cef66.wav\";","module.exports = __webpack_public_path__ + \"static/media/planet1.fa9efbdc.wav\";","module.exports = __webpack_public_path__ + \"static/media/planet2.bb93aba8.wav\";","module.exports = __webpack_public_path__ + \"static/media/planet3.4dbe1f81.wav\";","module.exports = __webpack_public_path__ + \"static/media/planet4.a1685217.wav\";","module.exports = __webpack_public_path__ + \"static/media/planet5.59338ea4.wav\";","module.exports = __webpack_public_path__ + \"static/media/planet6.ebc4639a.wav\";","module.exports = __webpack_public_path__ + \"static/media/telegrama.b3d5d527.woff\";","module.exports = __webpack_public_path__ + \"static/media/travelling.5ff78101.wav\";","module.exports = __webpack_public_path__ + \"static/media/miningSuccess.10ca6502.wav\";","module.exports = __webpack_public_path__ + \"static/media/aCrystalWasForged.f4b5ea14.wav\";","import React, { Component } from \"react\"\nimport * as THREE from 'three'\n\nclass Crystal extends Component {\n  componentDidMount = () => {\n    this.renderCrystal()\n  }\n\n  renderCrystal = () => {\n    const { uri } = this.props\n\n    // Extract characters from URI to use for 3d model\n    const color = eval('0x' + uri.substr(0, 6))\n    const metalness = parseInt(uri.substr(7, 2), 16) / 256\n    const roughness = parseInt(uri.substr(9, 2), 16) / 256\n    const aspectDenom = ((parseInt(uri.substr(10, 2), 16) / 256) * 10) + 5\n    const zoom = ((parseInt(uri.substr(12, 2), 16) / 256) * 0.5) + 0.75\n\n    var scene = new THREE.Scene();\n\n    // denom can be number between 4 and 15\n    var cam = new THREE.PerspectiveCamera(100, 16/aspectDenom, 0.1, 1000);\n    cam.zoom = zoom\n    cam.updateProjectionMatrix()\n    var renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });\n    renderer.setClearColor(0x000000, 0.25);\n    renderer.setSize(90, 120);\n\n    const divs = document.getElementsByClassName(uri)\n    for (const div of divs) {\n      div.appendChild(renderer.domElement);\n    }\n\n    var box = new THREE.SphereGeometry(2, 6, 2);\n    var mesh = new THREE.MeshStandardMaterial({\n      color: color,\n      metalness: metalness,\n      roughness: roughness,\n    });\n    var cube = new THREE.Mesh(box, mesh);\n    scene.add(cube);\n\n    var light = new THREE.PointLight(0xffffff, 8, 0, 2);\n    light.position.set(300, 300, 250);\n    scene.add(light);\n\n    var light2 = new THREE.RectAreaLight(0xffffff, 4, 750, 1000);\n    light2.position.set(-300, -300, 250);\n    light2.lookAt( 0, 0, 0 );\n    scene.add(light2);\n\n    cam.position.z = 2.75;\n\n    var render = function() {\n      requestAnimationFrame(render);\n      cube.rotation.y += 0.01;\n      renderer.render(scene, cam);\n    };\n\n    render();\n  }\n\n  render() {\n    const { uri } = this.props\n\n    return (\n      <div className={uri} />\n    )\n  }\n}\nexport default Crystal;\n","import imgPlanet0 from 'assets/images/planet0.png'\nimport imgPlanet1 from 'assets/images/planet1.png'\nimport imgPlanet2 from 'assets/images/planet2.png'\nimport imgPlanet3 from 'assets/images/planet3.png'\nimport imgPlanet4 from 'assets/images/planet4.png'\nimport imgPlanet5 from 'assets/images/planet5.png'\nimport imgPlanet6 from 'assets/images/planet6.png'\n\nimport imgTemple from 'assets/images/temple.png'\n\nimport songPlanet0 from 'assets/songs/planet0.wav'\nimport songPlanet1 from 'assets/songs/planet1.wav'\nimport songPlanet2 from 'assets/songs/planet2.wav'\nimport songPlanet3 from 'assets/songs/planet3.wav'\nimport songPlanet4 from 'assets/songs/planet4.wav'\nimport songPlanet5 from 'assets/songs/planet5.wav'\nimport songPlanet6 from 'assets/songs/planet6.wav'\n\nexport default [\n  // Coordinates are intended to be 0-100% of window dimension\n  { id: 0, name: \"Mondopia\", img: imgPlanet0, x: 70, y: 70, song: songPlanet0 },\n  { id: 1, name: \"Zyrgon\",   img: imgPlanet1, x: 32, y: 42, song: songPlanet1 },\n  { id: 2, name: \"Ribos\",    img: imgPlanet2, x: 8,  y: 3,  song: songPlanet2 },\n  { id: 3, name: \"Mustafar\", img: imgPlanet3, x: 53, y: 16, song: songPlanet3 },\n  { id: 4, name: \"Arrakis\",  img: imgPlanet4, x: 82, y: 29, song: songPlanet4 },\n  { id: 5, name: \"Kronos\",   img: imgPlanet5, x: 94, y: 57, song: songPlanet5 },\n  { id: 6, name: \"4546B\",    img: imgPlanet6, x: 18, y: 78, song: songPlanet6 },\n  { id: 255, name: \"Temple of Nakamoto\", img: imgTemple, x: 29, y: 12 },\n]","import planets from 'utils/planets'\nimport telegrama from 'fonts/telegrama.woff'\n\nexport default {\n  '@global': {\n    body: {\n      backgroundColor: 'black',\n      color: 'white',\n      fontFamily: 'telegrama',\n      margin: 0,\n    },\n    div: {\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n      userSelect: 'none',\n      'backdrop-filter': 'blur(20px)',\n    },\n  },\n  '@font-face': {\n    fontFamily: 'telegrama',\n    src: `url(${telegrama}) format(\"woff\")`,\n  },\n\n  App: {\n    width: '100%',\n    minHeight: '100vh',\n    justifyContent: 'flex-start',\n\n    backgroundRepeat: 'no-repeat',\n    backgroundPosition: '50% 0%',\n    backgroundSize: '100%',\n  },\n\n  '@keyframes vibrate1': {\n    '0%': {\n      '-webkit-transform': 'translate(0)',\n              'transform': 'translate(0)',\n    },\n    '20%': {\n      '-webkit-transform': 'translate(-2px, 2px)',\n              'transform': 'translate(-2px, 2px)',\n    },\n    '40%': {\n      '-webkit-transform': 'translate(-2px, -2px)',\n              'transform': 'translate(-2px, -2px)',\n    },\n    '60%': {\n      '-webkit-transform': 'translate(2px, 2px)',\n              'transform': 'translate(2px, 2px)',\n    },\n    '80%': {\n      '-webkit-transform': 'translate(2px, -2px)',\n              'transform': 'translate(2px, -2px)',\n    },\n    '100%': {\n      '-webkit-transform': 'translate(0)',\n              'transform': 'translate(0)',\n    },\n  }\n}","import Web3 from \"web3\";\n \nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:9545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n \nexport default getWeb3;","export default color => {\n  switch(color) {\n    case 'good': return '#0f0'\n    case 'bad': return '#f00'\n    case 'status': return '#ff0'\n    case 'info': return '#0ff'\n    case 'dark': return '#666'\n    default: return '#fff'\n  }\n}","import React from \"react\";\nimport injectSheet from 'react-jss'\nimport colorFromFlavour from 'utils/colorFromFlavour'\n\nconst styles = {\n  Laserframe: {\n    textAlign: \"center\",\n    border: ({ flavour }) => '1px solid ' + colorFromFlavour(flavour),\n    color: ({ flavour }) => colorFromFlavour(flavour),\n    backgroundColor: ({ active }) => {\n      if (!active) return 'rgba(0, 0, 0, 0.75)'\n      return '#444'\n    },\n    width: ({ size }) => {\n      switch (size) {\n        case 'wide': return 'fill-available'\n        case 'small': return 'fit-content'\n        case 'wide3': return '33.33333%'\n        case 'wide4': return '25%'\n      }\n    },\n    borderRadius: 4,\n    padding: '12px',\n    margin: '4px',\n    cursor: ({ isButton }) => isButton ? 'pointer' : 'default',\n    userSelect: 'none',\n    '&:hover': {\n      color: ({ isButton }) => isButton ? '#000' : null,\n      backgroundColor: ({ isButton, flavour }) => isButton ? colorFromFlavour(flavour) : null,\n    }\n  }\n}\n\nclass Laserframe extends React.Component {\n  render() {\n    const { classes, children, onClick } = this.props\n\n    return (\n      <div\n        className={classes.Laserframe}\n        onClick={() => {\n          if (onClick) onClick()\n        }}\n      >\n        { children }\n      </div>\n    )\n  }\n}\n\nLaserframe = injectSheet(styles)(Laserframe)\nexport default Laserframe;\n","import React from \"react\";\nimport injectSheet from 'react-jss'\nimport colorFromFlavour from 'utils/colorFromFlavour'\n\nconst styles = {\n  Loader: {\n    margin: '4px',\n  },\n}\n\nlet Loader = ({ classes, flavour, size = 32 }) => (\n  // <!-- By Sam Herbert (@sherb), for everyone. More @ http://goo.gl/7AJzbL -->\n  <svg className={classes.Loader} width={size} height={size} viewBox=\"0 0 38 38\" xmlns=\"http://www.w3.org/2000/svg\" stroke={colorFromFlavour(flavour)}>\n    <g fill=\"none\" fillRule=\"evenodd\">\n      <g transform=\"translate(1 1)\" strokeWidth=\"2\">\n        <circle strokeOpacity=\".5\" cx=\"18\" cy=\"18\" r=\"18\"/>\n        <path d=\"M36 18c0-9.94-8.06-18-18-18\">\n          <animateTransform\n            attributeName=\"transform\"\n            type=\"rotate\"\n            from=\"0 18 18\"\n            to=\"360 18 18\"\n            dur=\"1s\"\n            repeatCount=\"indefinite\"\n          />\n        </path>\n      </g>\n    </g>\n  </svg>\n)\n\nLoader = injectSheet(styles)(Loader)\nexport default Loader","import React, { Component } from \"react\"\nimport { connect } from 'react-redux'\nimport injectSheet from 'react-jss'\nimport Laserframe from 'components/reusables/Laserframe'\nimport Loader from 'components/reusables/Loader'\n\nconst styles = {\n  container: {}\n}\n\nclass Welcome extends Component {\n  goToNextScreen = () => {\n    const { user, changeScreen} = this.props\n\n    if (user.ownsSpaceship)\n      changeScreen('Travel')\n    else\n      changeScreen('SpaceshipDealer')\n  }\n\n  render() {\n    const { classes } = this.props\n\n    return (\n      <div className={classes.container}>\n        <h1>Galactonomics</h1>\n        <Laserframe\n          isButton\n          onClick={this.goToNextScreen}\n          flavour=\"good\"\n        >Continue</Laserframe>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    contracts: state.contracts,\n    user: state.user,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    changeScreen: screen => dispatch({ type: 'CHANGE_SCREEN', screen }),\n  }\n}\n\nWelcome = connect(mapStateToProps, mapDispatchToProps)(Welcome)\nWelcome = injectSheet(styles)(Welcome)\nexport default Welcome;\n","export default function(string) {\n  // This is a temp solution, doesn't work that well\n  const vmError = \"Error: VM Exception while processing transaction: revert \"\n  const i = string.lastIndexOf(vmError)\n  return string.substring(i + vmError.length)\n}","import React, { Component } from \"react\"\nimport { connect } from 'react-redux'\nimport injectSheet from 'react-jss'\nimport Laserframe from 'components/reusables/Laserframe'\nimport spaceship from 'assets/images/spaceship.jpg'\nimport Loader from 'components/reusables/Loader'\nimport getRevertMsg from 'utils/getRevertMsg'\n\nconst styles = {\n  container: {}\n}\n\nclass SpaceshipDealer extends Component {\n  state = {\n    isLoading: false,\n    loadingText: '',\n  };\n\n  buySpaceship = async () => {\n    this.setState({ isLoading: true, loadingText: 'Waiting for your approval of ownership transfer' })\n\n    const { web3, contracts, user, changeScreen, setDialogBox } = this.props\n\n    contracts.gta.buySpaceship(\n      \"My Spaceship\",\n      { from: user.address, value: web3.utils.toWei(\"0.01\", \"ether\") }\n    )\n      .on('transactionHash', () => {\n        this.setState({ isLoading: true, loadingText: 'Waiting processing by the Galactic Transit Authority' })\n      })\n      .on('receipt', receipt => {\n        changeScreen('Travel')\n      })\n      .on('error', e => {\n        this.setState({ isLoading: false })\n        setDialogBox(getRevertMsg(e.message), \"bad\")\n      })\n  }\n\n  render() {\n    const { classes } = this.props\n    const { isLoading, loadingText } = this.state\n\n    return (\n      <div className={classes.container}>\n        <h2>It's dangerous to go alone.</h2>\n        <h1>Would you like to purchase a spaceship?</h1>\n        <h3>WARNING: Spaceship ownership is required by law to handle commodities in this galactic region</h3>\n        <img src={spaceship} />\n        <Laserframe\n          isButton\n          onClick={this.buySpaceship}\n          flavour=\"good\"\n        >{isLoading ? <div>{loadingText} <Loader flavour=\"good\" /></div> : 'Okay'}</Laserframe>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    contracts: state.contracts,\n    user: state.user,\n    web3: state.web3,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    changeScreen: screen => dispatch({ type: 'CHANGE_SCREEN', screen }),\n    setDialogBox: (content, flavour)=> dispatch({ type: 'SET_DIALOG_BOX', content, flavour }),\n  }\n}\n\nSpaceshipDealer = connect(mapStateToProps, mapDispatchToProps)(SpaceshipDealer)\nSpaceshipDealer = injectSheet(styles)(SpaceshipDealer)\nexport default SpaceshipDealer;\n","import React, { Component } from \"react\"\nimport { connect } from 'react-redux'\nimport injectSheet from 'react-jss'\nimport planets from 'utils/planets'\n\nconst PWIDTH = 128\n\nconst styles = {\n  Travel: {\n    justifyContent: 'flex-start',\n    '& h1': {\n      zIndex: 1,\n    }\n  },\n  planets: {\n    width: '100%',\n  },\n  planet: {\n    position: 'absolute',\n    cursor: 'pointer',\n    '&:hover > div': {\n      opacity: 1.0,\n    },\n    '& > div': {\n      opacity: 0.5,\n    },\n  },\n}\n\nclass Travel extends Component {\n  state = {};\n\n  startTravelling = async planetId => {\n    const { user, changeScreen, setTravellingTo } = this.props\n\n    // Go right to planet home if user is already on chosen planet\n    if (planetId == user.currentPlanet) {\n      return changeScreen('PlanetHome')\n    }\n\n    // Collect id of chosen planet\n    setTravellingTo(planetId)\n    // Go to travelling / 'loading' screen\n    changeScreen('Travelling')\n  }\n\n  render() {\n    const { classes, user } = this.props\n\n    return (\n      <div className={classes.Travel}>\n        <h1>Choose a planet to travel to</h1>\n        <div className={classes.planets}>\n          {planets.map((planet, i) =>\n            <div\n              key={i}\n              className={classes.planet}\n              style={{\n                left: ((window.innerWidth / 100) * planet.x) - (PWIDTH / 2),\n                bottom: ((window.innerHeight / 100) * planet.y),\n              }}\n              onClick={() => this.startTravelling(planet.id)}\n            >\n              <img\n                src={planet.img}\n                width={PWIDTH}\n                alt=\"\"\n              />\n              <div>\n                { planet.name }\n              </div>\n              {planet.id == user.currentPlanet && '(current)'}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    contracts: state.contracts,\n    user: state.user,\n    web3: state.web3,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    changeScreen: screen => dispatch({ type: 'CHANGE_SCREEN', screen }),\n    setTravellingTo: travellingTo => dispatch({ type: 'SET_TRAVELLING_TO', travellingTo }),\n  }\n}\n\nTravel = connect(mapStateToProps, mapDispatchToProps)(Travel)\nTravel = injectSheet(styles)(Travel)\nexport default Travel;\n","import React, { Component } from \"react\"\nimport { connect } from 'react-redux'\nimport injectSheet from 'react-jss'\nimport spaceship from 'assets/images/spaceship.jpg'\nimport planets from 'utils/planets'\nimport getRevertMsg from 'utils/getRevertMsg'\nimport Sound from 'react-sound';\nimport travellingSound from 'assets/sounds/travelling.wav'\n\nconst styles = {\n  container: {\n  },\n  travellingSpaceship: {\n    animation: 'vibrate1 0.3s linear infinite both',\n  },\n}\n\nclass Travelling extends Component {\n  state = {\n    isTravelling: false,\n  };\n\n  componentDidMount = () => {\n    this.travelToPlanet()\n  }\n\n  travelToPlanet = () => {\n    const { contracts, user, changeScreen, setUserInfo, setDialogBox } = this.props\n\n    contracts.gta.travelToPlanet(user.travellingTo, { from: user.address })\n      .on('transactionHash', () => {\n        this.setState({ isTravelling: true })\n      })\n      .on('receipt', receipt => {\n        setUserInfo({ currentPlanet: user.travellingTo })\n        changeScreen('PlanetIntro')\n      })\n      .on('error', e => {\n        setDialogBox(getRevertMsg(e.message), \"bad\")\n        changeScreen('Travel')\n      })\n  }\n\n  render() {\n    const { classes, travellingTo, user } = this.props\n    const { isTravelling } = this.state\n    const planet = planets.find(planet => planet.id == user.travellingTo)\n\n    return (\n      <div className={classes.container}>\n        {!isTravelling ?\n          <h1>Waiting for hyperdrive activation...</h1>\n          :\n          <h1>Travelling to {planet.id != '255' && 'planet '}{planet.name}...</h1>\n        }\n        <img\n          src={spaceship}\n          className={classes[isTravelling && 'travellingSpaceship']}\n        />\n        <Sound\n          url={travellingSound}\n          playStatus={isTravelling && Sound.status.PLAYING}\n          volume={7}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    travellingTo: state.user.travellingTo,\n    contracts: state.contracts,\n    user: state.user,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    changeScreen: screen => dispatch({ type: 'CHANGE_SCREEN', screen }),\n    setUserInfo: info => dispatch({ type: 'SET_USER_INFO', info }),\n    setDialogBox: (content, flavour)=> dispatch({ type: 'SET_DIALOG_BOX', content, flavour }),\n  }\n}\n\nTravelling = connect(mapStateToProps, mapDispatchToProps)(Travelling)\nTravelling = injectSheet(styles)(Travelling)\nexport default Travelling;\n","import React, { Component } from \"react\"\nimport { connect } from 'react-redux'\nimport injectSheet from 'react-jss'\nimport Laserframe from 'components/reusables/Laserframe'\nimport planets from 'utils/planets'\nimport Sound from 'react-sound';\n\nconst styles = {\n  PlanetIntro: {\n  }\n}\n\nclass PlanetIntro extends Component {\n  state = {\n    soundHasPlayed: false,\n  }\n\n  componentDidMount = () => {\n    // Reset some state since on a new planet now\n    this.props.setIndustrialState({\n      areasMined: [],\n    })\n  }\n\n  render() {\n    const { soundHasPlayed } = this.state\n    const { classes, user, changeScreen } = this.props\n    const planet = planets.find(planet => planet.id == user.currentPlanet)\n\n    return (\n      <div className={classes.PlanetIntro}>\n        <h1>Welcome to {planet.id != '255' && 'planet '}{planet.name}</h1>\n        <Laserframe\n          isButton\n          onClick={() => changeScreen('PlanetHome')}\n          flavour=\"good\"\n        >Continue >></Laserframe>\n        <img\n          src={planet.img}\n        />\n        <Sound\n          url={planet.song}\n          playStatus={!soundHasPlayed && Sound.status.PLAYING}\n          volume={75}\n          onFinishedPlaying={() => this.setState({ soundHasPlayed: true })}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    changeScreen: screen => dispatch({ type: 'CHANGE_SCREEN', screen }),\n    setIndustrialState: industrialState => dispatch({ type: 'SET_INDUSTRIAL_STATE', industrialState }),\n  }\n}\n\nPlanetIntro = connect(mapStateToProps, mapDispatchToProps)(PlanetIntro)\nPlanetIntro = injectSheet(styles)(PlanetIntro)\nexport default PlanetIntro;\n","import { createStore } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport hardSet from 'redux-persist/lib/stateReconciler/hardSet'\n\nimport rootReducer from './reducers/index';\nimport initialState from './initialState'\n\nconst NODE_ENV = process.env.NODE_ENV || 'development';\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  stateReconciler: hardSet,\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nlet reduxDevTools;\nif (NODE_ENV !== 'production' && window.__REDUX_DEVTOOLS_EXTENSION__) {\n  reduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION__()\n}\n\n\n// Named exports:\n\nexport const store = createStore(\n  persistedReducer,\n  initialState,\n  reduxDevTools,\n)\n\nexport const persistor = persistStore(store)","import { combineReducers } from 'redux'\n\nimport web3 from './web3'\nimport contracts from './contracts'\nimport view from './view'\nimport user from './user'\nimport industrial from './industrial'\nimport audio from './audio'\nimport eth from './eth'\n\nconst appReducer = combineReducers({\n  web3,\n  contracts,\n  view,\n  user,\n  industrial,\n  audio,\n  eth,\n})\n\nexport default (state, action) => appReducer(state, action)","export default (state, action) => {\n  switch (action.type) {\n    case 'SET_WEB3': {\n      return action.web3\n    }\n\n    default: return { ...state }\n  }\n}","export default (state, action) => {\n  switch (action.type) {\n    case 'ADD_CONTRACT': {\n      const { name, instance } = action\n\n      return {\n        ...state,\n        [name]: instance,\n      }\n    }\n\n    default: return { ...state }\n  }\n}","export default (state, action) => {\n  switch (action.type) {\n    case 'CHANGE_SCREEN': {\n      const { screen } = action\n\n      return {\n        ...state,\n        currentScreen: screen,\n      }\n    }\n\n    case 'SET_DIALOG_BOX': {\n      const { content, flavour, noDefaultButton } = action\n\n      return {\n        ...state,\n        dialogBox: {\n          ...state.dialogBox,\n          content,\n          flavour,\n          noDefaultButton,\n        }\n      }\n    }\n\n    default: return { ...state }\n  }\n}","export default (state, action) => {\n  switch (action.type) {\n    case 'SET_USER_INFO': {\n      const { info } = action\n\n      return {\n        ...state,\n        ...info,\n      }\n    }\n\n    case 'SET_ADDRESS': {\n      const { address } = action\n\n      return {\n        ...state,\n        address,\n      }\n    }\n\n    case 'SET_TRAVELLING_TO': {\n      const { travellingTo } = action\n\n      return {\n        ...state,\n        travellingTo,\n      }\n    }\n\n    default: return { ...state }\n  }\n}","export default (state, action) => {\n  switch (action.type) {\n    case 'SET_INDUSTRIAL_STATE': {\n      const { industrialState } = action\n\n      return {\n        ...state,\n        ...industrialState,\n      }\n    }\n\n    default: return { ...state }\n  }\n}","export default (state, action) => {\n  switch (action.type) {\n    case 'SET_AUDIO_STATE': {\n      const { audioState } = action\n\n      return {\n        ...state,\n        ...audioState,\n      }\n    }\n\n    default: return { ...state }\n  }\n}","export default (state, action) => {\n  switch (action.type) {\n    case 'SET_ETH_STATE': {\n      const { ethState } = action\n\n      return {\n        ...state,\n        ...ethState,\n      }\n    }\n\n    default: return { ...state }\n  }\n}","export default {\n  view: {\n    currentScreen: 'Welcome',\n    dialogBox: {},\n  },\n  industrial: {\n    areasMined: [],\n  }\n}","export default [\n  { name: 'Iodine', symbol: 'IOD' },\n  { name: 'Neon gas', symbol: 'NEG' },\n  { name: 'Iron ore', symbol: 'IRN' },\n  { name: 'Platinum ore', symbol: 'PLT' },\n  { name: 'Gold ore', symbol: 'GLD' },\n  { name: 'Petroleum', symbol: 'PET' },\n  { name: 'Water', symbol: 'WTR' },\n]","import { store } from '../redux/store'\nimport commodities from 'utils/commodities'\n\nexport default () => new Promise(async (resolve, reject) => {\n  /* 'Refreshes' user data and saves in redux store */\n  const state = store.getState()\n  const { contracts, user, web3 } = state\n\n  let playerInfo, currentCargo, balance\n  try {\n    playerInfo = await contracts.gta.getInfo({ from: user.address })\n    currentCargo = await contracts.commodities.getCurrentCargo(user.address, { from: user.address })\n    balance = await web3.eth.getBalance(user.address)\n  } catch (e) {\n    return reject(e)\n  }\n\n  const cargoPerCommodity = await Promise.all([0, 1, 2, 3, 4, 5, 6].map(id => new Promise(async (resolve, reject) => {\n    let amount, symbol\n    try {\n      amount = (await contracts.commodities.getBalance(id, { from: user.address })).toString()\n    } catch (e) {\n      return reject(e)\n    }\n    resolve({ amount, symbol: commodities[id].symbol })\n  })))\n\n  store.dispatch({\n    type: 'SET_USER_INFO',\n    info: {\n      currentFuel: playerInfo.currentFuel.toString(),\n      currentPlanet: playerInfo.currentPlanet.toString(),\n      currentCargo: currentCargo,\n      maxCargo: playerInfo.maxCargo.toString(),\n      maxFuel: playerInfo.maxFuel.toString(),\n      spaceshipName: playerInfo.spaceshipName.toString(),\n      balance: web3.utils.fromWei(balance),\n      cargoPerCommodity: cargoPerCommodity,\n    }\n  })\n\n  resolve()\n})","import React, { Component, Fragment } from \"react\";\nimport injectSheet from 'react-jss'\nimport { connect } from 'react-redux'\nimport Laserframe from 'components/reusables/Laserframe'\nimport { FaGasPump } from 'react-icons/fa';\nimport getRevertMsg from 'utils/getRevertMsg'\nimport getPlayerInfo from 'utils/getPlayerInfo'\nimport Loader from 'components/reusables/Loader'\nimport Sound from 'react-sound';\nimport receivedSomething from 'assets/sounds/receivedSomething.wav'\n\nconst styles = {\n}\n\nclass FuelMeter extends Component {\n  state = {\n    isLoading: false,\n    isRefueling: false,\n    refuelCost: {},\n    doneFueling: false,\n  }\n\n  componentDidMount = () => {\n    this.checkRefuelCost()\n  }\n\n  checkRefuelCost = async () => {\n    this.setState({ isLoading: true })\n\n    const { contracts, user } = this.props\n\n    let refuelCost\n    try {\n      refuelCost = await contracts.gta.refuelCost({ from: user.address })\n    } catch (e) {\n      return console.error(e)\n    }\n\n    this.setState({ refuelCost: refuelCost, isLoading: false })\n  }\n\n  refuel = async () => {\n    const { contracts, user } = this.props\n\n    contracts.gta.refuel({ from: user.address, value: this.state.refuelCost })\n      .on('transactionHash', () => {\n        this.setState({ isRefueling: true })\n      })\n      .on('receipt', async () => {\n        await getPlayerInfo()\n        this.setState({\n          isRefueling: false,\n          doneFueling: true,\n        })\n      })\n      .on('error', e => {\n        this.props.setDialogBox(getRevertMsg(e.message), 'bad')\n      })\n  }\n\n  render() {\n    const { classes, currentFuel, maxFuel, web3 } = this.props\n    const { isRefueling, doneFueling } = this.state\n\n    let refuelCost\n    try {\n      refuelCost = web3.utils.fromWei(this.state.refuelCost.toString())\n    } catch (e) {\n      refuelCost = <Loader />\n    }\n\n    const isFull = currentFuel === maxFuel\n\n    return (\n      <Fragment>\n        <Laserframe\n          size=\"wide\"\n        >Fuel</Laserframe>\n        <FaGasPump />\n        <div>{currentFuel}/{maxFuel} megalitres</div>\n        {!isFull && <div>Cost to refuel: Ξ{refuelCost}</div>}\n        <Laserframe\n          flavour={isRefueling ? 'status' : 'good'}\n          isButton={!isFull}\n          size=\"wide\"\n          onClick={() => { if (!isFull) this.refuel()}}\n        >{isRefueling ? <div>Refueling... <Loader flavour=\"status\" /></div> : (isFull ? 'Tank is full' : 'Fill up tank')}</Laserframe>\n        <Sound\n          url={receivedSomething}\n          playStatus={doneFueling && Sound.status.PLAYING}\n          volume={25}\n          onFinishedPlaying={() => this.setState({ doneFueling: false })}\n        />\n      </Fragment>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    contracts: state.contracts,\n    user: state.user,\n    web3: state.web3,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setDialogBox: (content, flavour)=> dispatch({ type: 'SET_DIALOG_BOX', content, flavour }),\n  }\n}\n\nFuelMeter = connect(mapStateToProps, mapDispatchToProps)(FuelMeter)\nFuelMeter = injectSheet(styles)(FuelMeter)\nexport default FuelMeter;\n","import React, { Component, Fragment } from \"react\"\nimport { connect } from 'react-redux'\nimport injectSheet from 'react-jss'\nimport Laserframe from 'components/reusables/Laserframe'\nimport FuelMeter from 'components/screens/planet/FuelMeter'\nimport planets from 'utils/planets'\nimport {\n  FaBalanceScale,\n  FaChartBar,\n  FaIndustry,\n  FaHammer,\n  FaEthereum,\n} from 'react-icons/fa';\nimport { MdBusinessCenter } from 'react-icons/md'\nimport getPlayerInfo from 'utils/getPlayerInfo'\n\nconst styles = {\n  PlanetHome: {\n    width: 'fill-available',\n    flexDirection: 'row',\n\n    '& > div': {\n      height: 'fill-available',\n      justifyContent: 'flex-start',\n    },\n\n    '& > div:nth-child(1)': {\n      width: '20%',\n    },\n\n    '& > div:nth-child(2)': {\n      width: '65%',\n    },\n\n    '& > div:nth-child(3)': {\n      width: '15%',\n    },\n  },\n  planetImg: {\n    width: '60%',\n    padding: '12%',\n  },\n  top3: {\n    alignItems: 'flex-start',\n    flexDirection: 'row',\n    width: 'fill-available',\n    '@global': {\n      svg: {\n        margin: '16px',\n      }\n    }\n  },\n}\n\nclass PlanetHome extends Component {\n  state = {};\n\n  componentDidMount = async () => {\n    getPlayerInfo()\n  }\n\n  render() {\n    const { classes, user, changeScreen } = this.props\n    const planet = planets.find(planet => planet.id == user.currentPlanet)\n    const iconSize = 96\n\n    return (\n      <Fragment>\n        <div className={classes.PlanetHome}>\n          <div>\n            <Laserframe\n              onClick={() => changeScreen('Travel')}\n              isButton\n              flavour=\"good\"\n              size=\"wide\"\n            >Travel (Leave {planet.name})</Laserframe>\n            <Laserframe\n              flavour=\"status\"\n              size=\"wide\"\n            >Ξ{user.balance}</Laserframe>\n          </div>\n          <div className={classes.top3}>\n            {planet.id == 255 ?\n              <Fragment>\n                <Laserframe\n                  onClick={() => changeScreen('TempleMarketplace')}\n                  isButton\n                  flavour=\"info\"\n                  size=\"wide3\"\n                >\n                  <MdBusinessCenter size={iconSize} />\n                  Crystal Marketplace\n                </Laserframe>\n                <Laserframe\n                  onClick={() => changeScreen('PlanetPrices')}\n                  isButton\n                  flavour=\"info\"\n                  size=\"wide3\"\n                >\n                  <FaChartBar size={iconSize} />\n                  Commodity Prices\n                </Laserframe>\n                <Laserframe\n                  onClick={() => changeScreen('TempleIndustrial')}\n                  isButton\n                  flavour=\"info\"\n                  size=\"wide3\"\n                >\n                  <FaHammer size={iconSize} />\n                  Forge Crystals\n                </Laserframe>\n                <Laserframe\n                  onClick={() => changeScreen('TempleViewCrystals')}\n                  isButton\n                  flavour=\"info\"\n                  size=\"wide3\"\n                >\n                  <FaEthereum size={iconSize} />\n                  View My Crystals\n                </Laserframe>\n              </Fragment>\n              :\n              <Fragment>\n                <Laserframe\n                  onClick={() => changeScreen('PlanetMarketplace')}\n                  isButton\n                  flavour=\"info\"\n                  size=\"wide3\"\n                >\n                  <FaBalanceScale size={iconSize} />\n                  Marketplace\n                </Laserframe>\n                <Laserframe\n                  onClick={() => changeScreen('PlanetPrices')}\n                  isButton\n                  flavour=\"info\"\n                  size=\"wide3\"\n                >\n                  <FaChartBar className={classes.icon}size={iconSize} />\n                  Commodity Prices\n                </Laserframe>\n                <Laserframe\n                  onClick={() => changeScreen('PlanetIndustrial')}\n                  isButton\n                  flavour=\"info\"\n                  size=\"wide3\"\n                >\n                  <FaIndustry size={iconSize} />\n                  Industrial Operations\n                </Laserframe>\n              </Fragment>\n            }\n          </div>\n          <div>\n            <FuelMeter\n              currentFuel={user.currentFuel}\n              maxFuel={user.maxFuel}\n              />\n          </div>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user,\n    web3: state.web3,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setUserInfo: info => dispatch({ type: 'SET_USER_INFO', info }),\n    changeScreen: screen => dispatch({ type: 'CHANGE_SCREEN', screen }),\n  }\n}\n\nPlanetHome = connect(mapStateToProps, mapDispatchToProps)(PlanetHome)\nPlanetHome = injectSheet(styles)(PlanetHome)\nexport default PlanetHome;\n","import React, { Fragment } from \"react\";\nimport injectSheet from 'react-jss'\nimport commodities from 'utils/commodities'\nimport Laserframe from 'components/reusables/Laserframe'\n\nconst styles = {\n  CargoMeter: {\n    flexDirection: 'row',\n  },\n}\n\nlet CargoMeter = ({ classes, current = 0, max = 0, cargoPerCommodity = [] }) => (\n  <div className={classes.CargoMeter}>\n    <Laserframe>\n      {\"Total cargo: \" + current.toString()}/{max.toString() + \" kg\"}\n    </Laserframe>\n    {cargoPerCommodity.map((commodity, i) =>\n      <Laserframe key={i} flavour=\"dark\">\n        {commodities[i].symbol} {commodity.amount}\n      </Laserframe>\n    )}\n  </div>\n)\n\nCargoMeter = injectSheet(styles)(CargoMeter)\nexport default CargoMeter;\n","import React, { Component, Fragment } from \"react\"\nimport { connect } from 'react-redux'\nimport injectSheet from 'react-jss'\nimport Laserframe from 'components/reusables/Laserframe'\nimport CargoMeter from 'components/screens/planet/CargoMeter'\n\nconst styles = {\n  MPIContainer: {\n    minHeight: '100vh',\n    width: 'fill-available',\n    '& > div': {\n      width: 'fill-available',\n    },\n    '& > div:first-child': {\n      flex: 1,\n      flexDirection: 'row',\n      alignItems: 'flex-start',\n      '& > div:first-child': {\n        flex: 1,\n      },\n      '& > div:last-child': {\n        flex: 0.2,\n      },\n    },\n    '& > div:last-child': {\n      flexDirection: 'row',\n    },\n  },\n}\n\nclass MPIContainer extends Component {\n  render() {\n    const { classes, user, changeScreen, currentScreen, sideButtons, cargoPerCommodity } = this.props\n\n    let navLinks\n    if (user.currentPlanet != 255) {\n      navLinks = [\n        { name: 'PlanetHome', label: '<< Back' },\n        { name: 'PlanetMarketplace', label: 'Marketplace' },\n        { name: 'PlanetPrices', label: 'Prices elsewhere' },\n        { name: 'PlanetIndustrial', label: 'Industrial operations' },\n      ]\n    } else {\n      navLinks = [\n        { name: 'PlanetHome', label: '<< Back' },\n        { name: 'TempleMarketplace', label: 'Crystal marketplace' },\n        { name: 'PlanetPrices', label: 'Prices elsewhere' },\n        { name: 'TempleIndustrial', label: 'Forge Crystals' },\n        { name: 'TempleViewCrystals', label: 'View My Crystals' },\n      ]\n    }\n\n    return (\n      <Fragment>\n        <div className={classes.MPIContainer}>\n          <div>\n            {/* Top Row */}\n            <div>\n              {/* Top-left */}\n              <CargoMeter current={user.currentCargo} max={user.maxCargo} cargoPerCommodity={user.cargoPerCommodity} />\n              {/* Main screen content goes here */}\n              <Fragment>{this.props.children}</Fragment>\n            </div>\n            <div >\n              {/* Top-right */}\n              <Laserframe\n                flavour=\"status\"\n                size=\"wide\"\n                >Ξ{user.balance}</Laserframe>\n              <div style={{ marginTop: '20%', width: '100%' }}>\n                {sideButtons && sideButtons.map((sideButton, i) => (\n                  <Laserframe\n                    key={i}\n                    isButton\n                    onClick={sideButton.fn}\n                    size=\"wide\"\n                  >{sideButton.label}</Laserframe>\n                ))}\n              </div>\n            </div>\n          </div>\n          <div>\n            {/* Bottom row */}\n            {navLinks.map((link, i) =>\n              <Laserframe\n                key={i}\n                isButton\n                active={currentScreen === link.name}\n                size=\"wide4\"\n                onClick={() => changeScreen(link.name)}\n              >{link.label}</Laserframe>\n            )}\n          </div>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentScreen: state.view.currentScreen,\n    contracts: state.contracts,\n    user: state.user,\n    web3: state.web3,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setUserInfo: info => dispatch({ type: 'SET_USER_INFO', info }),\n    changeScreen: screen => dispatch({ type: 'CHANGE_SCREEN', screen }),\n  }\n}\n\nMPIContainer = connect(mapStateToProps, mapDispatchToProps)(MPIContainer)\nMPIContainer = injectSheet(styles)(MPIContainer)\nexport default MPIContainer;\n","export default function(event) {\n  const target = event.target;\n  const value = target.type === 'checkbox' ? target.checked : target.value;\n  const name = target.name;\n\n  this.setState({\n    [name]: value\n  });\n}\n","export default function b(a){return a?(a^Math.random()*16>>a/4).toString(16):([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,b)}\n","export default function(addr) {\n  if (addr) {\n    const start = addr.substr(0, 6)\n    const end = addr.substr(-4)\n    return start + '...' + end\n  }\n  return ''\n}\n","import React, { Component, Fragment } from \"react\"\nimport injectSheet from 'react-jss'\nimport { connect } from 'react-redux'\nimport ellipAddr from 'utils/ellipAddr'\n\nconst styles = {\n  SellOrder: {\n    flexDirection: 'row',\n    width: 'fill-available',\n    cursor: ({ isHeader }) => !isHeader ? 'pointer' : null,\n\n    backgroundColor: ({ isSelected }) => isSelected ? '#777' : '#000',\n    '&:hover': {\n      backgroundColor: ({ isSelected, isHeader }) => { if (!isHeader) return isSelected ? '#777' : '#222' },\n    },\n\n    '& > div': {\n      border: '1px solid grey',\n      width: '25%',\n      fontWeight: ({ isHeader }) => isHeader ? 'bold' : null,\n    },\n  }\n}\n\nlet SellOrder = ({ classes, onClick, seller, amount, price, symbol, isHeader, fromWei }) => {\n  let items\n  if (isHeader) {\n    items = ['Seller', 'Price (ETH)', `Amount (${symbol})`, 'Total (ETH)']\n  } else {\n    items = [ellipAddr(seller), fromWei(String(price)), amount, fromWei(String(amount * price))]\n  }\n\n  return (\n    <div\n      onClick={onClick}\n      className={classes.SellOrder}\n    >\n      {items.map((item, i) => (\n        <div key={i}>\n          {item}\n        </div>\n      ))}\n    </div>\n  )\n}\n\nconst mapStateToProps = state => {\n  return {\n    fromWei: state.web3.utils.fromWei,\n  }\n}\n\nSellOrder = connect(mapStateToProps)(SellOrder)\nSellOrder = injectSheet(styles)(SellOrder)\nexport default SellOrder","import React, { Component, Fragment } from \"react\"\nimport { connect } from 'react-redux'\nimport injectSheet from 'react-jss'\nimport Laserframe from 'components/reusables/Laserframe'\nimport MPIContainer from 'components/screens/planet/MPIContainer'\nimport handleChange from 'utils/handleChange'\nimport uuid from 'utils/uuid'\nimport SellOrder from 'components/reusables/SellOrder'\nimport getPlayerInfo from 'utils/getPlayerInfo'\nimport Loader from 'components/reusables/Loader'\n\nconst styles = {\n  container: {\n    flexDirection: 'row',\n    width: '100%',\n    alignItems: 'flex-start',\n    '& > div:first-child': {\n      flex: '0.2',\n    },\n    '& > div:last-child': {\n      flex: '0.8',\n    },\n  },\n  sellBox: {\n    '& > div:first-child': {\n      marginBottom: '1em',\n    },\n  },\n}\n\nclass PlanetMarketplace extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      commodities: [],\n      sellOrders: [],\n      selectedCommodityId: null,\n      selectedSellOrderId: null,\n\n      sellAmount: '',\n      sellPrice: '',\n\n      isSellBoxVisible: false,\n\n      isLoading: false,\n    }\n\n    this.handleChange = handleChange.bind(this)\n  }\n\n  componentDidMount = () => {\n    this.getCommodities()\n  }\n\n  componentDidUpdate(_, prevState) {\n    if (this.state.selectedCommodityId !== prevState.selectedCommodityId) {\n      this.getSellOrders()\n    }\n  }\n\n  getSellOrders = async () => {\n    const { contracts, user } = this.props\n    const { selectedCommodityId } = this.state\n\n    if (selectedCommodityId !== null) {\n      this.setState({ isLoading: true })\n\n      const numSellOrders = await contracts.gea.getNumSellOrders(\n        user.currentPlanet,\n        selectedCommodityId,\n        { from: user.address }\n      )\n\n      const sellOrderIds = Array.apply(null, {length: parseInt(numSellOrders.toString())}).map(Number.call, Number)\n\n      // Collect all sell orders\n      const sellOrders = await Promise.all(sellOrderIds.map(sellOrderId => new Promise(async (resolve, reject) => {\n        let sellOrder\n        try {\n          sellOrder = await contracts.gea.getSellOrder(user.currentPlanet, selectedCommodityId, sellOrderId, { from: user.address })\n        } catch (e) {\n          reject(e)\n        }\n        resolve(sellOrder)\n      })))\n      this.setState({ sellOrders, isLoading: false })\n    }\n  }\n\n  getCommodities = async () => {\n    const commoditiesTraded = await this.getCommoditiesTraded()\n    const commodityInfos = await this.getCommodityInfos(commoditiesTraded)\n    const commodityBalances = await this.getCommodityBalances(commoditiesTraded)\n\n    this.setState({\n      commodities: commodityInfos.map((commodityInfo, i) => ({\n        id: commoditiesTraded[i],\n        name: commodityInfo.name,\n        symbol: commodityInfo.symbol,\n        myBalance: commodityBalances[i]\n      }))\n    })\n  }\n\n  getCommoditiesTraded = async () => {\n    const { contracts, user } = this.props\n    let commoditiesTraded\n    return new Promise(async (resolve, reject) => {\n      try {\n        commoditiesTraded = await contracts.gea.getCommoditiesTraded(user.currentPlanet, { from: user.address })\n      } catch (e) {\n        return reject(e)\n      }\n      commoditiesTraded = commoditiesTraded.map(commodityIdBN => commodityIdBN.toNumber())\n      resolve(commoditiesTraded)\n    })\n  }\n\n  getCommodityInfos = async commodityIds => {\n    const { contracts, user } = this.props\n    const commodityInfos = []\n    return new Promise(async (resolve, reject) => {\n      try {\n        for (let id of commodityIds) {\n          commodityInfos.push({\n            name: await contracts.commodities.getName(id, { from: user.address }),\n            symbol: await contracts.commodities.getSymbol(id, { from: user.address }),\n          })\n        }\n      } catch (e) {\n        return reject(e)\n      }\n      resolve(commodityInfos)\n    })\n  }\n\n  getCommodityBalances = async commodityIds => {\n    const { contracts, user } = this.props\n    let commodityBalances = []\n    return new Promise(async (resolve, reject) => {\n      try {\n        for (let id of commodityIds) {\n          commodityBalances.push(await contracts.commodities.getBalance(id, { from: user.address }))\n        }\n      } catch (e) {\n        reject(e)\n      }\n      commodityBalances = commodityBalances.map(commodityIdBN => commodityIdBN.toNumber())\n      resolve(commodityBalances)\n    })\n  }\n\n  createSellOrder = async () => {\n    const { contracts, user } = this.props\n    const { selectedCommodityId, sellAmount, sellPrice } = this.state\n\n    try {\n      await contracts.gea.createSellOrder(\n        user.currentPlanet,\n        selectedCommodityId,\n        sellAmount,\n        sellPrice,\n        { from: user.address },\n      )\n    } catch (e) {\n      this.setState({ isSellBoxVisible: false })\n      this.props.setDialogBox(\"Error creating sell order\", \"bad\")\n      return\n    }\n\n    // Close dialog box\n    this.props.setDialogBox(null)\n    // Refresh list of sell orders\n    this.getSellOrders()\n    // Refresh commodity balances\n    this.getCommodities()\n    // Refresh cargo\n    getPlayerInfo()\n  }\n\n  onClickBuy = async () => {\n    const { contracts, user } = this.props\n    const { sellOrders, selectedCommodityId, selectedSellOrderId } = this.state\n    const sellOrder = sellOrders[selectedSellOrderId]\n\n    try {\n      await contracts.gea.buySellOrder(\n        user.currentPlanet,\n        selectedCommodityId,\n        selectedSellOrderId,\n        { from: user.address, value: sellOrder.amount.mul(sellOrder.price)},\n      )\n    } catch (e) {\n      this.props.setDialogBox(\"Error buying order\", \"bad\")\n      return\n    }\n\n    // Refresh list of sell orders\n    this.getSellOrders()\n    // Refresh commodity balances\n    this.getCommodities()\n    // Refresh cargo\n    getPlayerInfo()\n  }\n\n  onClickSell = () => {\n    const {\n      commodities,\n      sellPrice,\n      sellAmount,\n      selectedCommodityId,\n    } = this.state\n\n    const { classes } = this.props\n\n    let commodity = { name: '', symbol: '' }\n    if (commodities.length && typeof selectedCommodityId === 'number') {\n      commodity = commodities[commodities.findIndex(commodity => commodity.id === selectedCommodityId)]\n    }\n\n    if (selectedCommodityId !== null) {\n      this.props.setDialogBox(\n        <div className={classes.sellBox}>\n          <div>Selling {commodity.name}</div>\n          <div>\n            <div>Amount</div>\n            <input name=\"sellAmount\" defaultValue={sellAmount} type=\"number\" onChange={this.handleChange} />\n          </div>\n          <div>\n            <div>Price</div>\n            <input name=\"sellPrice\" defaultValue={sellPrice} type=\"number\" onChange={this.handleChange} />\n          </div>\n          <Laserframe\n            flavour=\"info\"\n            isButton\n            onClick={this.createSellOrder}\n          >Ok</Laserframe>\n        </div>,\n        \"info\",\n        true,\n      )\n    } else {\n      this.props.setDialogBox(\"You need to select a commodity to sell\", \"bad\")\n    }\n  }\n\n  render() {\n    const { classes } = this.props\n    const {\n      commodities,\n      sellOrders,\n      selectedCommodityId,\n      selectedSellOrderId,\n      isLoading,\n    } = this.state\n\n    let commodity = { name: '', symbol: '' }\n    if (commodities.length && typeof selectedCommodityId === 'number') {\n      commodity = commodities[commodities.findIndex(commodity => commodity.id === selectedCommodityId)]\n    }\n\n    const sideButtons = [\n      { fn: this.onClickBuy, label: 'Buy' },\n      { fn: this.onClickSell, label: 'Sell' },\n    ]\n\n    return (\n      <MPIContainer sideButtons={sideButtons}>\n        <div className={classes.container}>\n          <div>\n            {/* Render commodity names and balances */}\n            {commodities.map((commodity, i) => (\n              <Laserframe\n                key={i}\n                isButton\n                size=\"wide\"\n                active={selectedCommodityId === commodity.id}\n                onClick={() => this.setState({ selectedCommodityId: commodities[i].id })}\n              >\n                <div>{commodity.name}</div>\n                <div>{\"(You have: \" + commodity.myBalance.toString() + \" kg)\"}</div>\n              </Laserframe>\n            ))}\n          </div>\n          {isLoading ?\n            <div>\n              <Loader />\n              Loading orders...\n            </div>\n            :\n            <div>\n              {/* Render sell orders for currently viewed commodity */}\n              {selectedCommodityId !== null ?\n                <Fragment>\n                  <SellOrder isHeader symbol={commodity.symbol} />\n                  {sellOrders\n                    .filter(sellOrder => sellOrder.open)\n                    .map(sellOrder => (\n                      <SellOrder\n                        key={uuid()}\n                        onClick={() => this.setState({\n                          selectedSellOrderId: sellOrder.orderId.toString()\n                        })}\n                        seller={sellOrder.seller}\n                        amount={sellOrder.amount.toString()}\n                        price={sellOrder.price.toString()}\n                        isSelected={selectedSellOrderId === sellOrder.orderId.toString()}\n                      />\n                    ))\n                  }\n                </Fragment>\n                :\n                'Select a commodity on the left panel to start buying or selling'\n              }\n            </div>\n          }\n        </div>\n      </MPIContainer>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    contracts: state.contracts,\n    user: state.user,\n    web3: state.web3,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setDialogBox: (content, flavour, noDefaultButton) =>\n      dispatch({ type: 'SET_DIALOG_BOX', content, flavour, noDefaultButton }),\n  }\n}\n\nPlanetMarketplace = connect(mapStateToProps, mapDispatchToProps)(PlanetMarketplace)\nPlanetMarketplace = injectSheet(styles)(PlanetMarketplace)\nexport default PlanetMarketplace;\n","import React, { Component, Fragment } from \"react\";\nimport injectSheet from 'react-jss'\nimport { connect } from 'react-redux'\nimport Laserframe from 'components/reusables/Laserframe'\n\nconst styles = {\n  MiningPad: {\n    flexDirection: 'row',\n    display: 'grid',\n    'grid-template-columns': 'repeat(128, 1fr)',\n    'grid-template-rows': 'auto',\n    fontSize: 16,\n  },\n  area: {\n    zIndex: 1,\n    backgroundColor: '#44',\n    width: 'min-content',\n    paddingTop: '2px',\n    '&:hover': {\n      backgroundColor: '#444 !important',\n      cursor: 'pointer',\n    }\n  },\n}\n\nclass MiningPad extends Component {\n  mineArea = (start, end) => {\n    const { setIndustrialState } = this.props\n    setIndustrialState({\n      isMining: true,\n      areaStart: start,\n      areaEnd: end,\n    })\n  }\n\n  render() {\n    const { classes, setIndustrialState, areaSize } = this.props\n    const { areasMined } = this.props.industrial\n\n    return (\n      <Laserframe\n        size=\"wide\"\n      >\n        <div className={classes.MiningPad}>\n          {Array(4096).fill().map((_, i) => {\n            const areaStart = i * areaSize\n            const areaEnd = areaStart + areaSize\n            const wasMined = Array.isArray(areasMined) && areasMined.includes(i)\n            const char = wasMined ? 'X' : 'O'\n            return (\n              <span\n                className={classes.area}\n                key={i}\n                onClick={() => {\n                  if (!wasMined)\n                    this.mineArea(areaStart, areaEnd)\n                }}\n                style={{\n                  color: wasMined ? '#f00' : null,\n                }}\n                onMouseEnter={e => {\n                  e.stopPropagation()\n                  if (!wasMined)\n                    setIndustrialState({ areaStart, areaEnd, nonce: areaStart })\n                }}\n                onMouseLeave={e => {\n                  e.stopPropagation()\n                  if (!wasMined)\n                    setIndustrialState({ areaStart: undefined, areaEnd: undefined })\n                }}\n              >{char}</span>\n            )\n          })}\n        </div>\n      </Laserframe>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    contracts: state.contracts,\n    user: state.user,\n    industrial: state.industrial,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setDialogBox: (content, flavour)=> dispatch({ type: 'SET_DIALOG_BOX', content, flavour }),\n    setIndustrialState: industrialState => dispatch({ type: 'SET_INDUSTRIAL_STATE', industrialState }),\n  }\n}\n\nMiningPad = connect(mapStateToProps, mapDispatchToProps)(MiningPad)\nMiningPad = injectSheet(styles)(MiningPad)\nexport default MiningPad;\n","import React, { Component, Fragment } from \"react\"\nimport { connect } from 'react-redux'\nimport injectSheet from 'react-jss'\nimport Laserframe from 'components/reusables/Laserframe'\nimport MPIContainer from 'components/screens/planet/MPIContainer'\nimport sha256 from 'js-sha256'\nimport getPlayerInfo from 'utils/getPlayerInfo'\nimport Loader from 'components/reusables/Loader'\nimport MiningPad from 'components/screens/planet/MiningPad'\nimport Sound from 'react-sound';\nimport miningSuccess from 'assets/sounds/miningSuccess.wav'\nimport receivedSomething from 'assets/sounds/receivedSomething.wav'\n\nconst styles = {\n  acceptDecline: {\n    flexDirection: 'row',\n  }\n}\n\nconst AREA_SIZE = 1024\n\nfunction checkIfHashUnderTarget(hash, target) {\n  hash = parseInt('0x' + String(hash), 16)\n  target = parseInt(target, 16)\n  return hash < target\n}\n\nclass PlanetIndustrial extends Component {\n  componentDidMount = () => {\n    this.getCommodity()\n  }\n\n  componentDidUpdate = prevProps => {\n    const { setIndustrialState, setDialogBox } = this.props\n    const { isMining, nonce, areaStart, areaEnd, areasMined, commodityName } = this.props.industrial\n\n    // When mining is started... (an area is clicked)\n    if (!prevProps.industrial.isMining && isMining) {\n      window.requestAnimationFrame(this.step)\n    }\n\n    // When finished mining an area...\n    if (prevProps.industrial.nonce !== nonce && nonce >= areaEnd) {\n      setIndustrialState({\n        nonce: undefined,\n        isMining: false,\n        // Array that holds indexes of areas that have been mined\n        areasMined: areasMined.concat([areaStart / AREA_SIZE]),\n      })\n      setDialogBox(`No ${commodityName} was found in that area, \\nclick to continue.`)\n    }\n  }\n\n  getCommodity = async () => {\n    const { user, contracts, setIndustrialState } = this.props\n    let commodity\n\n    try {\n      commodity = await contracts.commodities.get(user.currentPlanet, { from: user.address })\n    } catch (e) {\n      return console.error(e)\n    }\n\n    setIndustrialState({\n      commodityName: commodity.name,\n      commoditySymbol: commodity.symbol,\n      miningReward: commodity.miningReward.toString(),\n      miningTarget: commodity.miningTarget.toString(),\n      prevMiningHash: commodity.prevMiningHash,\n    })\n  }\n\n  step = () => {\n    const { user, setIndustrialState } = this.props\n    const { miningTarget, prevMiningHash, nonce, isMining } = this.props.industrial\n\n    if (typeof nonce === 'number') {\n      const hash = sha256(\n        nonce.toString() +\n        user.currentPlanet.toString() +\n        prevMiningHash +\n        user.address.substring(2).toLowerCase()\n      )\n      setIndustrialState({ hash })\n\n      const validProofFound = checkIfHashUnderTarget(hash, miningTarget)\n\n      if (validProofFound)\n        return setIndustrialState({\n          playSuccessSound: true,\n          isMining: false,\n          hasValidProof: true,\n        })\n\n        setIndustrialState({ nonce: nonce + 1 })\n\n      if (isMining)\n        window.requestAnimationFrame(this.step)\n    }\n  }\n\n  stopMining = () => {\n    this.props.setIndustrialState({ isMining: false })\n  }\n\n  submitProof = async () => {\n    let { user, contracts, setIndustrialState, setDialogBox } = this.props\n    const { nonce } = this.props.industrial\n\n    setIndustrialState({ isSubmitting: true })\n\n    try {\n      await contracts.gia.submitProofOfWork(String(nonce), { from: user.address })\n    } catch (e) {\n      console.error(e)\n    }\n\n    const oldQuant = Number(user.cargoPerCommodity[user.currentPlanet].amount)\n    await getPlayerInfo()\n    user = this.props.user\n    const newQuant = Number(user.cargoPerCommodity[user.currentPlanet].amount)\n\n    this.getCommodity()\n    setIndustrialState({\n      isMining: false,\n      hasValidProof: false,\n      hash: '',\n      nonce: 0,\n      isSubmitting: false,\n    })\n\n    if (newQuant > oldQuant) {\n      setIndustrialState({ playReceivedSound: true })\n    } else {\n      setDialogBox('Sorry, but your proof-of-work was not accepted', 'bad')\n    }\n  }\n\n  render() {\n    const { classes, industrial, setIndustrialState } = this.props\n    const {\n      isMining,\n      hash,\n      hasValidProof,\n      isSubmitting,\n      commodityName,\n      areaStart,\n      areaEnd,\n      playReceivedSound,\n      playSuccessSound,\n    } = industrial\n\n    return (\n      <MPIContainer>\n          <Laserframe\n            size=\"wide\"\n          >\n            {!isMining && !hasValidProof &&\n              <Fragment>\n                Click an area to start mining for {commodityName}...\n                <MiningPad areaSize={AREA_SIZE} />\n                <Laserframe\n                  flavour='status'\n                >\n                  {areaStart && areaEnd ? `Area ${areaStart} to ${areaEnd}` : 'Waiting...'}\n                </Laserframe>\n              </Fragment>\n            }\n            {isMining &&\n              <Fragment>\n                <div>\n                  Mining in area {areaStart} to {areaEnd}...\n                </div>\n                <Laserframe flavour='bad'>\n                  { hash }\n                </Laserframe>\n                <Laserframe\n                  isButton\n                  onClick={this.stopMining}\n                >\n                  Stop mining\n                </Laserframe>\n              </Fragment>\n            }\n            {!isMining && hasValidProof &&\n              <Fragment>\n                <div>\n                  Valid proof of work hash found!\n                </div>\n                <Laserframe flavour='good'>\n                  { hash }\n                </Laserframe>\n                <Laserframe\n                  isButton\n                  onClick={this.submitProof}\n                >\n                  {!isSubmitting ? 'Submit proof of work' : <Fragment>Waiting for validation...<Loader /></Fragment>}\n                </Laserframe>\n              </Fragment>\n            }\n          </Laserframe>\n          <Sound\n            url={miningSuccess}\n            playStatus={playSuccessSound && Sound.status.PLAYING}\n            volume={10}\n            onFinishedPlaying={() => setIndustrialState({ playSuccessSound: false })}\n          />\n          <Sound\n            url={receivedSomething}\n            playStatus={playReceivedSound && Sound.status.PLAYING}\n            volume={25}\n            onFinishedPlaying={() => setIndustrialState({ playReceivedSound: false })}\n          />\n      </MPIContainer>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    contracts: state.contracts,\n    user: state.user,\n    web3: state.web3,\n    industrial: state.industrial,\n    eth: state.eth,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setDialogBox: (content, flavour)=> dispatch({ type: 'SET_DIALOG_BOX', content, flavour }),\n    setIndustrialState: industrialState => dispatch({ type: 'SET_INDUSTRIAL_STATE', industrialState }),\n  }\n}\n\nPlanetIndustrial = connect(mapStateToProps, mapDispatchToProps)(PlanetIndustrial)\nPlanetIndustrial = injectSheet(styles)(PlanetIndustrial)\nexport default PlanetIndustrial;\n","import React, { Fragment } from \"react\"\nimport injectSheet from 'react-jss'\nimport { connect } from 'react-redux'\nimport planets from 'utils/planets'\nimport uuid from 'utils/uuid'\n\nconst styles = {\n  PricesRow: {\n    flexDirection: 'row',\n    width: 'fill-available',\n    backgroundColor: '#000',\n\n    '& > div': {\n      border: '1px solid grey',\n      width: '25%',\n      fontWeight: ({ isHeader }) => isHeader ? 'bold' : null,\n      flexDirection: 'row',\n    },\n  }\n}\n\nlet PricesRow = ({ classes, onClick, symbol, minMaxes, isHeader, fromWei }) => {\n  let items = []\n  if (isHeader) {\n    items = planets.slice(0, 7).map(planet => planet.name)\n    items.unshift(\" \")\n  } else {\n    items = minMaxes.slice()\n    items.unshift({symbol})\n  }\n\n  return (\n    <div\n      onClick={onClick}\n      className={classes.PricesRow}\n    >\n      {items.length && items.map((item, i) => {\n        if (isHeader) {\n          return (\n            <div key={uuid()}>\n              {item}\n            </div>\n          )\n        } else {\n          return (i === 0 ? <div key={uuid()}>{item.symbol}</div> :\n            <div key={uuid()}>\n              <span key={uuid()}>\n                {item.min && item.min.toString()}\n              </span>\n              <span key={uuid()}>\n                {' - '}\n              </span>\n              <span key={uuid()}>\n                {item.max && item.max.toString()}\n              </span>\n            </div>\n          )\n        }\n      })}\n    </div>\n  )\n}\n\nconst mapStateToProps = state => {\n  return {\n    fromWei: state.web3.utils.fromWei,\n  }\n}\n\nPricesRow = connect(mapStateToProps)(PricesRow)\nPricesRow = injectSheet(styles)(PricesRow)\nexport default PricesRow","import React, { Component, Fragment } from \"react\"\nimport { connect } from 'react-redux'\nimport injectSheet from 'react-jss'\nimport planets from 'utils/planets'\nimport MPIContainer from 'components/screens/planet/MPIContainer'\nimport PricesRow from 'components/reusables/PricesRow'\nimport uuid from 'utils/uuid'\nimport Loader from 'components/reusables/Loader'\nimport commodities from 'utils/commodities'\n\nconst styles = {}\n\nclass PlanetPrices extends Component {\n  state = {\n    isLoading: true,\n    commoditiesMinMaxes: [],\n    commodityInfos: [],\n  }\n\n  componentDidMount = async () => {\n    const commodityInfos = await this.getCommodityInfos()\n    this.setState({commodityInfos})\n    this.getAllSellOrders()\n  }\n\n  getCommodityInfos = async () => {\n    const { contracts, user } = this.props\n    const commodityInfos = []\n\n    return new Promise(async (resolve, reject) => {\n      try {\n        for (let i = 0; i < 7; i++) {\n          commodityInfos.push({\n            name: commodities[i].name,\n            symbol: commodities[i].symbol,\n          })\n        }\n      } catch (e) {\n        return reject(e)\n      }\n\n      resolve(commodityInfos)\n    })\n  }\n\n  getAllSellOrders = async () => {\n    const { contracts, user, web3 } = this.props\n\n    // Collect all sell orders for each commodity on each planet\n    let commoditiesPrices = []\n    for (let commodityId = 0; commodityId < 7; commodityId++) {\n      const planets = []\n      for (let planetId = 0; planetId < 7; planetId++) {\n        const numSellOrders = await contracts.gea.getNumSellOrders(planetId, commodityId, { from: user.address })\n        const sellOrderIds = Array.apply(null, {length: parseInt(numSellOrders.toString())}).map(Number.call, Number)\n        let sellOrders = await Promise.all(sellOrderIds.map(sellOrderId => new Promise(async (resolve, reject) => {\n          const sellOrder = await contracts.gea.getSellOrder(planetId, commodityId, sellOrderId, { from: user.address })\n          resolve(sellOrder)\n        })))\n        // Filter out closed orders\n        sellOrders = sellOrders.filter(order => order.open)\n        planets[planetId] = sellOrders\n      }\n      commoditiesPrices[commodityId] = planets\n    }\n\n    // Change array to only having min/max prices\n    const commoditiesMinMaxes = commoditiesPrices.map(commodity => {\n      return commodity.map(planet => {\n        if (planet.length) {\n          let min = planet[0].price\n          let max = planet[0].price\n\n          for (let i = 1; i < planet.length; i++) {\n            if (planet[i].price.lt(min)) {\n              min = planet[i].price\n            }\n            if (planet[i].price.gt(max)) {\n              max = planet[i].price\n            }\n          }\n\n          return { min, max }\n        } else {\n          return { min: '', max: '' }\n        }\n      })\n    })\n\n    console.log('commoditiesMinMaxes', commoditiesMinMaxes);\n    this.setState({ commoditiesMinMaxes, isLoading: false, })\n  }\n\n  render() {\n    const { classes, user } = this.props\n    const { commoditiesMinMaxes, commodityInfos, isLoading } = this.state\n\n    return (\n      <MPIContainer>\n        {isLoading ?\n          <Fragment>\n            <Loader />\n            Loading prices...\n          </Fragment>\n          :\n          <Fragment>\n            <PricesRow isHeader />\n            {commoditiesMinMaxes.length && commoditiesMinMaxes.map((commodityMinMaxes, i) => (\n              <PricesRow\n                key={uuid()}\n                minMaxes={commodityMinMaxes}\n                symbol={commodityInfos[i].symbol}\n              />\n            ))}\n          </Fragment>\n        }\n      </MPIContainer>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    contracts: state.contracts,\n    user: state.user,\n    web3: state.web3,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  }\n}\n\nPlanetPrices = connect(mapStateToProps, mapDispatchToProps)(PlanetPrices)\nPlanetPrices = injectSheet(styles)(PlanetPrices)\nexport default PlanetPrices;\n","import React, { Component, Fragment } from \"react\"\nimport { connect } from 'react-redux'\nimport injectSheet from 'react-jss'\nimport MPIContainer from 'components/screens/planet/MPIContainer'\nimport Crystal from 'components/reusables/Crystal'\n\nconst styles = {\n  container: {\n    width: '100%',\n    '& > div:first-child': {\n      flex: '0.2',\n    },\n    '& > div:last-child': {\n      flex: '0.8',\n    },\n  },\n  crystalRow: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    '& > div': {\n      border: '1px solid grey',\n      padding: 8,\n    }\n  }\n}\n\nclass TempleMarketplace extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      crystals: [],\n      selectedCrystalId: null,\n      isLoading: false,\n    }\n  }\n\n  componentDidMount = () => {\n    this.getCrystalsForSale()\n  }\n\n  getCrystalsForSale = async () => {\n    const { contracts, user } = this.props\n\n    try {\n      // Get the IDs of each crystal for sale, then get their URIs\n      const crystalIds = await contracts.temple.getCrystalsForSale({ from: user.address })\n      if (crystalIds.length) {\n        const crystals = []\n\n        for (let id of crystalIds) {\n          crystals.push({\n            id: id.toString(),\n            uri: await contracts.temple.crystalURI(id, { from: user.address }),\n          })\n        }\n\n        for (let [i, crystal] of crystals.entries()) {\n          const sellData = await contracts.temple.getCrystalSellData(crystal.id, { from: user.address })\n          crystals[i].price = sellData.price.toString()\n          crystals[i].seller = sellData.seller\n        }\n\n        this.setState({ crystals })\n      }\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  buy = async () => {\n    const { contracts, user } = this.props\n    const { crystals, selectedCrystalId } = this.state\n    const crystal = crystals[crystals.findIndex(crystal => crystal.id === selectedCrystalId)]\n    try {\n      await contracts.temple.buy(selectedCrystalId, { from: user.address, value: crystal.price })\n    } catch (e) {\n      console.error(e)\n    }\n    this.getCrystalsForSale()\n  }\n\n  render() {\n    const { classes } = this.props\n    const {\n      crystals,\n      selectedCrystalId,\n    } = this.state\n\n    const sideButtons = [\n      { fn: this.buy, label: 'Buy' },\n    ]\n\n    return (\n      <MPIContainer sideButtons={sideButtons}>\n        <div className={classes.container}>\n          {crystals.length === 0 && 'There are no crystals for sale right now'}\n          {crystals.map(crystal => (\n            <div\n              key={crystal.id}\n              className={classes.crystalRow}\n              onClick={() => this.setState({ selectedCrystalId: crystal.id })}\n            >\n              <div style={{\n                backgroundColor: selectedCrystalId === crystal.id ? '#fff' : null,\n                color: selectedCrystalId === crystal.id ? '#000' : null,\n              }}>\n                {crystal.id}\n              </div>\n              <div>\n                {crystal.uri}\n              </div>\n              <div>\n                {crystal.price}\n              </div>\n              <div>\n                {crystal.seller}\n              </div>\n              <Crystal uri={crystal.uri} />\n            </div>\n          ))}\n        </div>\n      </MPIContainer>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    contracts: state.contracts,\n    user: state.user,\n    web3: state.web3,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setDialogBox: (content, flavour)=> dispatch({ type: 'SET_DIALOG_BOX', content, flavour }),\n  }\n}\n\nTempleMarketplace = connect(mapStateToProps, mapDispatchToProps)(TempleMarketplace)\nTempleMarketplace = injectSheet(styles)(TempleMarketplace)\nexport default TempleMarketplace;\n","import React, { Component, Fragment } from \"react\"\nimport { connect } from 'react-redux'\nimport injectSheet from 'react-jss'\nimport Laserframe from 'components/reusables/Laserframe'\nimport MPIContainer from 'components/screens/planet/MPIContainer'\nimport getPlayerInfo from 'utils/getPlayerInfo'\nimport Loader from 'components/reusables/Loader'\nimport Crystal from 'components/reusables/Crystal'\nimport Sound from 'react-sound';\nimport aCrystalWasForged from 'assets/sounds/aCrystalWasForged.wav'\nimport getRevertMsg from 'utils/getRevertMsg'\n\nconst styles = {\n  acceptDecline: {\n    flexDirection: 'row',\n  }\n}\n\nconst defaultButtonText = 'Forge'\n\nclass TempleIndustrial extends Component {\n  constructor() {\n    super()\n    this.state = {\n      isLoading: false,\n      playSound: false,\n      buttonText: defaultButtonText,\n    }\n  }\n\n  forge = async () => {\n    const { contracts, user, setDialogBox } = this.props\n\n    this.setState({\n      isLoading: true,\n      buttonText: 'Waiting for signature...'\n    })\n\n    contracts.temple.forge({ from: user.address })\n      .on('transactionHash', () => {\n        this.setState({\n          buttonText: 'Waiting for confirmation...'\n        })\n      })\n      .on('receipt', () => {\n        getPlayerInfo()\n        this.getLatestCrystalURI()\n      })\n      .on('error', e => {\n        setDialogBox(getRevertMsg(e.message), \"bad\")\n        this.setState({\n          isLoading: false,\n          buttonText: 'Forge',\n        })\n      })\n  }\n\n  getLatestCrystalURI = async () => {\n    const { contracts, user } = this.props\n    let lastURI\n\n    this.setState({\n      isLoading: true\n    })\n\n    try {\n      const crystalIds = await contracts.temple.crystalsOfOwner(user.address, { from: user.address })\n      const lastId = crystalIds[crystalIds.length - 1]\n      lastURI = await contracts.temple.crystalURI(lastId, { from:user.address })\n    } catch (e) {\n      console.error(e)\n    }\n\n    this.setState({\n      crystalURI: lastURI,\n      isLoading: false,\n      playSound: true,\n      buttonText: defaultButtonText,\n    }, () => {\n      this.props.setDialogBox(\n        <Fragment>\n          You have forged a new crystal!\n          {lastURI && <Crystal uri={lastURI} />}\n        </Fragment>,\n        'good',\n      )\n    })\n  }\n\n  render() {\n    const { classes } = this.props\n    const { isLoading, playSound, buttonText } = this.state\n\n    return (\n      <MPIContainer>\n        <Laserframe\n          size=\"wide\"\n        >\n          <div>Would like to forge a crystal?</div>\n          <div>(Requires 10,000 kg of all 7 commodities)</div>\n          <div className={classes.acceptDecline}>\n              <Fragment>\n                <Laserframe\n                  isButton={!isLoading}\n                  flavour=\"good\"\n                  onClick={this.forge}\n                >{buttonText}{isLoading && <Loader />}</Laserframe>\n              </Fragment>\n          </div>\n        </Laserframe>\n        <Sound\n          url={aCrystalWasForged}\n          playStatus={playSound && Sound.status.PLAYING}\n          volume={25}\n          onFinishedPlaying={() => this.setState({ playSound: false })}\n        />\n      </MPIContainer>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    contracts: state.contracts,\n    user: state.user,\n    web3: state.web3,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setDialogBox: (content, flavour)=> dispatch({ type: 'SET_DIALOG_BOX', content, flavour }),\n  }\n}\n\nTempleIndustrial = connect(mapStateToProps, mapDispatchToProps)(TempleIndustrial)\nTempleIndustrial = injectSheet(styles)(TempleIndustrial)\nexport default TempleIndustrial;\n","import React, { Component, Fragment } from \"react\"\nimport { connect } from 'react-redux'\nimport injectSheet from 'react-jss'\nimport Laserframe from 'components/reusables/Laserframe'\nimport MPIContainer from 'components/screens/planet/MPIContainer'\nimport handleChange from 'utils/handleChange'\nimport Loader from 'components/reusables/Loader'\nimport Crystal from 'components/reusables/Crystal'\n\nconst styles = {\n  crystalRow: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    '& > div': {\n      border: '1px solid grey',\n      padding: 8,\n    }\n  },\n  sellBox: {\n    '& > div:nth-child(3)': {\n      marginBottom: '1em',\n    },\n  },\n}\n\nclass TempleViewCrystals extends Component {\n  constructor() {\n    super()\n    this.state = {\n      crystals: [],\n      sellAmount: '',\n      sellPrice: '',\n      isSellBoxVisible: false,\n      isLoading: false,\n      selectedCrystalId: null,\n    }\n    this.handleChange = handleChange.bind(this)\n  }\n\n  componentDidMount = () => {\n    this.crystalsOfOwner()\n  }\n\n  crystalsOfOwner = async () => {\n    const { contracts, user } = this.props\n    const crystals = []\n\n    this.setState({ isLoading: true })\n\n    try {\n      const crystalIds = await contracts.temple.crystalsOfOwner(user.address, { from: user.address })\n      if (crystalIds && crystalIds.length) {\n        for (let id of crystalIds) {\n          crystals.push({\n            id: id.toString(),\n            uri: await contracts.temple.crystalURI(id, { from:user.address })\n          })\n        }\n      }\n    } catch (e) {\n      console.error(e)\n    }\n\n    this.setState({\n      crystals,\n      isLoading: false\n    })\n  }\n\n  onClickSell = () => {\n    const { selectedCrystalId, sellPrice, crystals } = this.state\n    const { classes } = this.props\n    const crystal = crystals.find(crystal => crystal.id === selectedCrystalId)\n\n    this.props.setDialogBox(\n      <div className={classes.sellBox}>\n        <div>\n          Are you sure you want to sell this crystal?\n        </div>\n        <Crystal uri={crystal.uri} />\n        <div>\n          Id {selectedCrystalId}\n        </div>\n        <div>\n          <div>Price</div>\n          <input name=\"sellPrice\" defaultValue={sellPrice} type=\"number\" onChange={this.handleChange}></input>\n        </div>\n        <Laserframe\n          flavour=\"info\"\n          isButton\n          onClick={this.sell}\n        >Ok</Laserframe>\n      </div>,\n      'info',\n      true,\n    )\n  }\n\n  sell = async () => {\n    const { contracts, user } = this.props\n    const { selectedCrystalId, sellPrice } = this.state\n\n    try {\n      await contracts.temple.sell(selectedCrystalId, sellPrice, { from: user.address })\n    } catch (e) {\n      console.error(e)\n    }\n\n    this.crystalsOfOwner()\n    this.props.setDialogBox(null)\n  }\n\n  render() {\n    const { classes } = this.props\n    const {\n      crystals,\n      isLoading,\n      selectedCrystalId,\n    } = this.state\n\n    const sideButtons = [\n      { fn: this.onClickSell, label: 'Sell' },\n    ]\n\n    return (\n      <MPIContainer sideButtons={sideButtons}>\n        {isLoading ?\n          <Fragment>\n            <Loader />\n            Loading crystals...\n          </Fragment>\n          :\n          <div className={classes.container}>\n            {crystals.map((crystal, i) =>\n              <div\n                key={i}\n                className={classes.crystalRow}\n                onClick={() => this.setState({ selectedCrystalId: crystal.id })}\n              >\n                <div style={{\n                  backgroundColor: selectedCrystalId === crystal.id ? '#fff' : null,\n                  color: selectedCrystalId === crystal.id ? '#000' : null,\n                }}>\n                  {crystal.id}\n                </div>\n                <div>\n                  {crystal.uri}\n                </div>\n                <Crystal uri={crystal.uri} />\n              </div>\n            )}\n          </div>\n        }\n      </MPIContainer>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    contracts: state.contracts,\n    user: state.user,\n    web3: state.web3,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setDialogBox: (content, flavour, noDefaultButton) =>\n      dispatch({ type: 'SET_DIALOG_BOX', content, flavour, noDefaultButton }),\n  }\n}\n\nTempleViewCrystals = connect(mapStateToProps, mapDispatchToProps)(TempleViewCrystals)\nTempleViewCrystals = injectSheet(styles)(TempleViewCrystals)\nexport default TempleViewCrystals;\n","import React from \"react\";\nimport injectSheet from 'react-jss'\nimport colorFromFlavour from 'utils/colorFromFlavour'\n\nconst styles = {\n  Dialog: {\n    border: ({ flavour }) => '1px solid ' + colorFromFlavour(flavour),\n    color: '#fff',\n    width: 'fit-content',\n    borderRadius: 4,\n    padding: '16px',\n    textAlign: \"center\",\n    position: 'absolute',\n    zIndex: 3,\n    backgroundColor: '#000',\n  },\n  backdrop: {\n    display: ({ isVisible }) => isVisible ? 'flex' : 'none',\n    zIndex: 2,\n    position: 'absolute',\n    background: 'rgba(0, 0, 0, 0.75)',\n    height: '100vh',\n    width: '100vw',\n  }\n}\n\nlet Dialog = ({ classes, children }) => (\n  <div className={classes.backdrop}>\n    <div className={classes.Dialog}>\n      { children }\n    </div>\n  </div>\n)\n\nDialog = injectSheet(styles)(Dialog)\nexport default Dialog;\n","import React, { Component } from \"react\"\nimport { connect } from 'react-redux'\nimport injectSheet from 'react-jss'\nimport globalStyles from 'globalStyles'\n\nimport commoditiesJSON from \"contracts/Commodities.json\"\nimport gtaJSON from \"contracts/GalacticTransitAuthority.json\"\nimport geaJSON from \"contracts/GalacticEconomicAuthority.json\"\nimport giaJSON from \"contracts/GalacticIndustrialAuthority.json\"\nimport templeJSON from \"contracts/TempleAuthority.json\"\n\nimport getWeb3 from \"utils/getWeb3\"\nimport truffleContract from \"truffle-contract\"\n\nimport screenMapping from 'utils/screenMapping'\nimport Dialog from 'components/reusables/Dialog'\nimport Laserframe from 'components/reusables/Laserframe'\n\nimport getPlayerInfo from 'utils/getPlayerInfo'\nimport planets from 'utils/planets'\n\nclass App extends Component {\n  state = {\n    isInitialized: null,\n  }\n\n  componentDidMount = async () => {\n    try {\n      await this.initWeb3AndContracts()\n      await this.initEventListening()\n\n      let ownsSpaceship\n      ownsSpaceship = await this.checkIfOwnsSpaceship()\n\n      if (ownsSpaceship) {\n        await getPlayerInfo()\n      } else {\n        this.props.changeScreen('Welcome')\n      }\n\n    } catch (e) {\n      return console.error(e)\n    }\n\n    this.setState({ isInitialized: true })\n  }\n\n  initWeb3AndContracts = () => new Promise(async (resolve, reject) => {\n    try {\n      // Save web3 in redux store\n      const web3 = await getWeb3()\n      this.props.setWeb3(web3)\n\n      // Save account in redux store\n      const accounts = await web3.eth.getAccounts()\n      this.props.setAddress(accounts[0])\n\n      // Get all contract instances\n      let contracts = [\n        { json: commoditiesJSON, name: 'commodities' },\n        { json: gtaJSON, name: 'gta' },\n        { json: geaJSON, name: 'gea' },\n        { json: giaJSON, name: 'gia' },\n        { json: templeJSON, name: 'temple' },\n      ]\n\n      contracts = await Promise.all(\n        contracts.map(contract => new Promise(async (resolve, reject) => {\n          const Contract = truffleContract(contract.json)\n          Contract.setProvider(web3.currentProvider)\n          try {\n            const instance = await Contract.deployed()\n            resolve({\n              instance: instance,\n              name: contract.name,\n            })\n          } catch (e) {\n            reject(e)\n          }\n        }))\n      )\n\n      // Save the contracts to redux store\n      contracts.forEach(contract => this.props.addContract(contract.instance, contract.name))\n\n      resolve()\n\n    } catch (e) {\n      // Catch any errors for any of the above operations.\n      reject(e)\n    }\n  })\n\n  initEventListening = () => {\n    const { contracts, user, setIndustrialState, web3, setEthState } = this.props\n\n    contracts.gia.CommodityMined({ fromBlock: 'latest' })\n      .on('data', data => {\n        const { _miner, _hash } = data.returnValues\n\n        setIndustrialState({\n          // Reset areas mined because there is a new prevHash\n          areasMined: [],\n          prevMiningHash: _hash,\n        })\n\n        // To refresh commodity amounts if current user was the miner\n        if (_miner === user.address) {\n          getPlayerInfo()\n        }\n      })\n\n    // Listen for new blocks\n    web3.eth.subscribe('newBlockHeaders')\n      .on('data', data => {\n          // Store current block number in store (not used)\n          setEthState({ blockNumber: data.number })\n        })\n  }\n\n  checkIfOwnsSpaceship = () => new Promise(async (resolve, reject) => {\n    const { contracts, user } = this.props\n\n    let spaceshipsOwned\n    try {\n      spaceshipsOwned = await contracts.gta.balanceOf(user.address, { from: user.address })\n    } catch (e) {\n      return reject(e)\n    }\n\n    if (spaceshipsOwned.toString() === '0') {\n      this.props.setUserInfo({ ownsSpaceship: false })\n      return resolve(false)\n    }\n\n    this.props.setUserInfo({ ownsSpaceship: true })\n    resolve(true)\n  })\n\n  componentDidCatch = (error, errorInfo) => {\n    console.error(error, errorInfo)\n  }\n\n  render() {\n    const { isInitialized } = this.state\n    const { classes, currentScreen, dialogBox, closeDialogBox, user } = this.props\n    const planet = planets.find(planet => planet.id == user.currentPlanet)\n\n    if (!isInitialized) {\n      return <div>Activating L-337 Nanobulators...</div>\n    }\n\n    const bgImage = () => {\n      const styleObject = {}\n      if (\n        (currentScreen.substr(0, 6) === 'Planet' || currentScreen.substr(0, 6) === 'Temple')&&\n        currentScreen !== 'PlanetIntro' && currentScreen !== 'TempleIntro'\n      ) {\n        styleObject.backgroundImage = `url(${planet.img})`\n      }\n      if (user.currentPlanet == '255') {\n        styleObject.backgroundPosition = '50% 40%'\n        styleObject.backgroundSize = '50%'\n      }\n      return styleObject\n    }\n\n    return (\n      <div className={classes.App} style={bgImage()}>\n        {/* Render current screen */}\n        {screenMapping(currentScreen)}\n        {/* Global dialog box */}\n        <Dialog flavour={dialogBox.flavour} isVisible={dialogBox.content}>\n          {dialogBox.content}\n          {!dialogBox.noDefaultButton &&\n            <Laserframe\n              flavour={dialogBox.flavour}\n              isButton\n              onClick={closeDialogBox}\n            >Ok</Laserframe>\n          }\n        </Dialog>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentScreen: state.view.currentScreen,\n    contracts: state.contracts,\n    user: state.user,\n    dialogBox: state.view.dialogBox,\n    web3: state.web3,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setWeb3: web3 => dispatch({ type: 'SET_WEB3', web3 }),\n    addContract: (instance, name) => dispatch({ type: 'ADD_CONTRACT', instance, name }),\n    setAddress: address => dispatch({ type: 'SET_ADDRESS', address }),\n    setUserInfo: info => dispatch({ type: 'SET_USER_INFO', info }),\n    setIndustrialState: industrialState => dispatch({ type: 'SET_INDUSTRIAL_STATE', industrialState }),\n    setEthState: ethState => dispatch({ type: 'SET_ETH_STATE', ethState }),\n    closeDialogBox: () => dispatch({ type: 'SET_DIALOG_BOX', content: '' }),\n    changeScreen: screen => dispatch({ type: 'CHANGE_SCREEN', screen }),\n  }\n}\n\nApp = connect(mapStateToProps, mapDispatchToProps)(App)\nApp = injectSheet(globalStyles)(App)\nexport default App\n","import React from \"react\"\n\nimport Welcome from \"components/screens/Welcome\"\nimport SpaceshipDealer from \"components/screens/SpaceshipDealer\"\n\nimport Travel from  \"components/screens/Travel\"\nimport Travelling from  \"components/screens/Travelling\"\n\nimport PlanetIntro from  \"components/screens/planet/PlanetIntro\"\nimport PlanetHome from  \"components/screens/planet/PlanetHome\"\nimport PlanetMarketplace from  \"components/screens/planet/PlanetMarketplace\"\nimport PlanetIndustrial from  \"components/screens/planet/PlanetIndustrial\"\nimport PlanetPrices from  \"components/screens/planet/PlanetPrices\"\n\nimport TempleMarketplace from  \"components/screens/planet/TempleMarketplace\"\nimport TempleIndustrial from  \"components/screens/planet/TempleIndustrial\"\nimport TempleViewCrystals from  \"components/screens/planet/TempleViewCrystals\"\n\nexport default screen => {\n  switch(screen) {\n    case 'Welcome': return <Welcome />\n    case 'SpaceshipDealer': return <SpaceshipDealer/>\n\n    case 'Travel': return <Travel/>\n    case 'Travelling': return <Travelling/>\n\n    case 'PlanetIntro': return <PlanetIntro/>\n    case 'PlanetHome': return <PlanetHome/>\n    case 'PlanetMarketplace': return <PlanetMarketplace/>\n    case 'PlanetIndustrial': return <PlanetIndustrial/>\n    case 'PlanetPrices': return <PlanetPrices/>\n\n    case 'TempleMarketplace': return <TempleMarketplace/>\n    case 'TempleIndustrial': return <TempleIndustrial/>\n    case 'TempleViewCrystals': return <TempleViewCrystals/>\n    default: break\n  }\n}","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nimport { Provider } from \"react-redux\";\nimport { store, persistor } from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react'\nimport Loader from 'components/reusables/Loader'\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={<Loader />} persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n);\n\nregisterServiceWorker();\n","module.exports = __webpack_public_path__ + \"static/media/spaceship.9cbc836b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/receivedSomething.d8e37266.wav\";"],"sourceRoot":""}