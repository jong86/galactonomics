{"version":3,"sources":["assets/images/planet0.png","assets/images/planet1.png","assets/images/planet2.png","assets/images/planet3.png","assets/images/planet4.png","assets/images/planet5.png","assets/images/planet6.png","assets/images/temple.png","assets/songs/planet0.wav","assets/songs/planet1.wav","assets/songs/planet2.wav","assets/songs/planet3.wav","assets/songs/planet4.wav","assets/songs/planet5.wav","assets/songs/planet6.wav","fonts/telegrama.woff","assets/sounds/travelling.wav","assets/sounds/miningSuccess.wav","assets/sounds/mining.wav","assets/sounds/miningFail.wav","assets/sounds/aCrystalWasForged.wav","components/reusables/Crystal.js","utils/planets.js","globalStyles.js","utils/getWeb3.js","utils/colorFromFlavour.js","components/reusables/Laserframe.js","components/reusables/Loader.js","components/screens/Welcome.js","utils/getErrorMsg.js","components/screens/SpaceshipDealer.js","redux/store.js","redux/reducers/index.js","redux/reducers/web3.js","redux/reducers/contracts.js","redux/reducers/view.js","redux/reducers/user.js","redux/reducers/industrial.js","redux/reducers/audio.js","redux/reducers/eth.js","redux/initialState.js","utils/commodities.js","utils/getPlayerInfo.js","components/screens/Travel.js","components/screens/Travelling.js","components/screens/planet/PlanetIntro.js","components/screens/planet/FuelMeter.js","components/screens/planet/PlanetHome.js","components/screens/planet/CargoMeter.js","components/screens/planet/MPIContainer.js","utils/handleChange.js","utils/uuid.js","utils/ellipAddr.js","components/reusables/SellOrder.js","components/screens/planet/PlanetMarketplace.js","components/screens/planet/MiningPad.js","components/screens/planet/PlanetIndustrial.js","components/reusables/PricesRow.js","components/screens/planet/PlanetPrices.js","components/screens/planet/TempleMarketplace.js","components/screens/planet/TempleIndustrial.js","components/screens/planet/TempleViewCrystals.js","components/reusables/Dialog.js","App.js","utils/screenMapping.js","registerServiceWorker.js","index.js","assets/images/spaceship.jpg","assets/sounds/receivedSomething.wav"],"names":["module","exports","__webpack_require__","p","Crystal","componentDidMount","_this","renderCrystal","uri","props","color","eval","substr","metalness","parseInt","roughness","aspectDenom","zoom","scene","THREE","cam","updateProjectionMatrix","renderer","alpha","antialias","setClearColor","setSize","divs","document","getElementsByClassName","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","next","done","div","value","appendChild","domElement","err","return","box","mesh","cube","add","light","position","set","light2","lookAt","z","render","requestAnimationFrame","rotation","y","this","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","Component","utils_planets","id","name","img","imgPlanet0","x","song","songPlanet0","imgPlanet1","songPlanet1","imgPlanet2","songPlanet2","imgPlanet3","songPlanet3","imgPlanet4","songPlanet4","imgPlanet5","songPlanet5","imgPlanet6","songPlanet6","imgTemple","globalStyles","@global","body","backgroundColor","fontFamily","margin","display","flexDirection","justifyContent","alignItems","userSelect","backdrop-filter","@font-face","src","concat","telegrama","App","width","minHeight","backgroundRepeat","backgroundPosition","backgroundSize","@keyframes vibrate1","0%","-webkit-transform","transform","20%","40%","60%","80%","100%","getWeb3","Promise","resolve","reject","window","addEventListener","Object","asyncToGenerator","regenerator_default","mark","_callee","web3","_web","provider","_web2","wrap","_context","prev","ethereum","Web3","enable","t0","console","log","providers","HttpProvider","stop","colorFromFlavour","styles","Laserframe","textAlign","border","_ref","flavour","_ref2","_ref3","active","_ref4","size","borderRadius","padding","cursor","_ref5","isButton","&:hover","_ref6","_ref7","_this$props","classes","children","onClick","react_default","React","injectSheet","Loader","_ref$size","height","viewBox","xmlns","stroke","fill","fillRule","strokeWidth","strokeOpacity","cx","cy","r","d","attributeName","type","from","to","dur","repeatCount","Welcome","goToNextScreen","user","changeScreen","ownsSpaceship","container","reusables_Laserframe","connect","state","ownProps","contracts","dispatch","screen","getErrorMsg","string","i","errorMsg","JSON","stringify","lastIndexOf","substring","length","SpaceshipDealer","isLoading","loadingText","buySpaceship","setDialogBox","setState","gta","address","utils","toWei","on","receipt","e","message","_this$state","spaceship","reusables_Loader","content","reduxDevTools","appReducer","combineReducers","action","objectSpread","instance","defineProperty","view","currentScreen","noDefaultButton","dialogBox","info","travellingTo","industrial","industrialState","audio","audioState","eth","ethState","persistConfig","key","storage","stateReconciler","hardSet","persistedReducer","persistReducer","store","createStore","areasMined","persistor","persistStore","utils_commodities","symbol","getPlayerInfo","_callee2","playerInfo","currentCargo","balance","cargoPerCommodity","_context2","getState","getInfo","sent","commodities","getCurrentCargo","getBalance","abrupt","all","map","amount","toString","_x3","_x4","apply","arguments","currentFuel","currentPlanet","maxCargo","maxFuel","spaceshipName","fromWei","_x","_x2","Travel","startTravelling","planetId","setTravellingTo","_this2","_this$props2","planets","planet","style","left","innerWidth","PWIDTH","bottom","innerHeight","alt","& h1","zIndex","&:hover > div","opacity","& > div","Travelling","isTravelling","currentSpeed","travelToPlanet","componentDidUpdate","_","prevState","changeSpeed","signCoef","Math","random","modulator","newSpeed","parseFloat","toFixed","setUserInfo","find","react_sound_lib_default","url","travellingSound","playStatus","Sound","status","PLAYING","volume","travellingSpaceship","animation","PlanetIntro","soundHasPlayed","setIndustrialState","isMining","hasValidProof","miningJustFailed","isSubmitting","onFinishedPlaying","FuelMeter","isRefueling","refuelCost","doneFueling","checkRefuelCost","error","refuel","_callee3","_context3","_this$props3","isFull","react","fa","receivedSomething","PlanetHome","top3","md","icon","planet_FuelMeter","& > div:nth-child(1)","& > div:nth-child(2)","& > div:nth-child(3)","planetImg","svg","CargoMeter","_ref$current","current","_ref$max","max","_ref$cargoPerCommodit","commodity","MPIContainer","navLinks","sideButtons","label","planet_CargoMeter","marginTop","sideButton","fn","link","& > div:first-child","flex","& > div:last-child","handleChange","event","target","checked","b","replace","SellOrder","items","addr","seller","price","isHeader","String","item","isSelected","fontWeight","PlanetMarketplace","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getCommodities","getSellOrders","selectedCommodityId","numSellOrders","sellOrderIds","sellOrders","gea","getNumSellOrders","Array","Number","sellOrderId","sellOrder","getSellOrder","commoditiesTraded","commodityInfos","commodityBalances","getCommoditiesTraded","getCommodityInfos","getCommodityBalances","commodityInfo","myBalance","_callee5","_context5","_callee4","_context4","commodityIdBN","toNumber","_callee7","commodityIds","_context7","_callee6","_context6","getName","t1","getSymbol","t2","t3","push","t4","finish","t5","_x6","_x7","_x5","_ref8","_callee9","_this$props4","_context9","_ref9","_callee8","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_context8","_x9","_x10","_x8","createSellOrder","_callee10","_this$props5","sellAmount","sellPrice","_context10","isSellBoxVisible","onClickBuy","_callee11","_this$props6","_this$state2","selectedSellOrderId","_context11","buySellOrder","mul","onClickSell","_this$state3","findIndex","sellBox","defaultValue","onChange","bind","assertThisInitialized","_this$state4","planet_MPIContainer","reusables_SellOrder","filter","open","uuid","orderId","marginBottom","MiningPad","mineArea","start","end","areaStart","areaEnd","areaSize","wasMined","isArray","includes","char","area","onMouseEnter","stopPropagation","nonce","onMouseLeave","grid-template-columns","grid-template-rows","fontSize","paddingTop","AREA_SIZE","PlanetIndustrial","getCommodity","getMiningData","prevProps","_this$props$industria","commodityName","playMiningSound","step","playMiningFailSound","get","commoditySymbol","miningReward","miningTarget","prevMiningHash","response","gia","_this$props$industria2","hash","sha256","toLowerCase","checkIfHashUnderTarget","playSuccessSound","stopMining","submitProof","oldQuant","newQuant","submitProofOfWork","playReceivedSound","statusBarText","planet_MiningPad","miningSuccess","mining","loop","miningFail","acceptDecline","PricesRow","minMaxes","commodityId","slice","unshift","highlight","min","PlanetPrices","commoditiesMinMaxes","getAllSellOrders","tradedOnPlanet","traded","split","commoditiesPrices","_loop","_loop2","order","delegateYield","table","lt","gt","reusables_PricesRow","commodityMinMaxes","TempleMarketplace","getCrystalsForSale","crystalIds","crystals","crystal","sellData","temple","crystalURI","entries","slicedToArray","getCrystalSellData","t6","buy","selectedCrystalId","crystalRow","defaultButtonText","TempleIndustrial","forge","buttonText","getLatestCrystalURI","lastURI","lastId","crystalsOfOwner","playSound","aCrystalWasForged","TempleViewCrystals","reverse","sell","Dialog","backdrop","isVisible","background","isInitialized","initWeb3AndContracts","initEventListening","checkIfOwnsSpaceship","accounts","setWeb3","getAccounts","setAddress","json","commoditiesJSON","gtaJSON","geaJSON","giaJSON","templeJSON","contract","Contract","truffleContract","setProvider","currentProvider","deployed","forEach","addContract","setEthState","CommodityMined","fromBlock","data","_data$returnValues","returnValues","_miner","_hash","subscribe","blockNumber","number","spaceshipsOwned","balanceOf","componentDidCatch","errorInfo","closeDialogBox","styleObject","backgroundImage","bgImage","screens_Welcome","screens_SpaceshipDealer","screens_Travel","screens_Travelling","planet_PlanetIntro","planet_PlanetHome","planet_PlanetMarketplace","planet_PlanetIndustrial","planet_PlanetPrices","planet_TempleMarketplace","planet_TempleIndustrial","planet_TempleViewCrystals","screenMapping","reusables_Dialog","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","es","integration_react","loading","src_App","getElementById","URL","process","origin","fetch","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c89809c5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/planet0.cd2085d3.png\";","module.exports = __webpack_public_path__ + \"static/media/planet1.06ea6d4b.png\";","module.exports = __webpack_public_path__ + \"static/media/planet2.d673fc3f.png\";","module.exports = __webpack_public_path__ + \"static/media/planet3.7994fc8c.png\";","module.exports = __webpack_public_path__ + \"static/media/planet4.e55e01aa.png\";","module.exports = __webpack_public_path__ + \"static/media/planet5.0d7f8301.png\";","module.exports = __webpack_public_path__ + \"static/media/planet6.bb4a7911.png\";","module.exports = __webpack_public_path__ + \"static/media/temple.fa6a9ca3.png\";","module.exports = __webpack_public_path__ + \"static/media/planet0.047cef66.wav\";","module.exports = __webpack_public_path__ + \"static/media/planet1.fa9efbdc.wav\";","module.exports = __webpack_public_path__ + \"static/media/planet2.bb93aba8.wav\";","module.exports = __webpack_public_path__ + \"static/media/planet3.4dbe1f81.wav\";","module.exports = __webpack_public_path__ + \"static/media/planet4.a1685217.wav\";","module.exports = __webpack_public_path__ + \"static/media/planet5.59338ea4.wav\";","module.exports = __webpack_public_path__ + \"static/media/planet6.ebc4639a.wav\";","module.exports = __webpack_public_path__ + \"static/media/telegrama.b3d5d527.woff\";","module.exports = __webpack_public_path__ + \"static/media/travelling.5ff78101.wav\";","module.exports = __webpack_public_path__ + \"static/media/miningSuccess.10ca6502.wav\";","module.exports = __webpack_public_path__ + \"static/media/mining.4f66c5d3.wav\";","module.exports = __webpack_public_path__ + \"static/media/miningFail.45ac8397.wav\";","module.exports = __webpack_public_path__ + \"static/media/aCrystalWasForged.f4b5ea14.wav\";","import React, { Component } from \"react\"\nimport * as THREE from 'three'\n\nclass Crystal extends Component {\n  componentDidMount = () => {\n    this.renderCrystal()\n  }\n\n  renderCrystal = () => {\n    const { uri } = this.props\n\n    // Extract characters from URI to use for 3d model\n    const color = eval('0x' + uri.substr(0, 6))\n    const metalness = parseInt(uri.substr(7, 2), 16) / 256\n    const roughness = parseInt(uri.substr(9, 2), 16) / 256\n    const aspectDenom = ((parseInt(uri.substr(10, 2), 16) / 256) * 10) + 5\n    const zoom = ((parseInt(uri.substr(12, 2), 16) / 256) * 0.5) + 0.75\n\n    var scene = new THREE.Scene();\n\n    // denom can be number between 4 and 15\n    var cam = new THREE.PerspectiveCamera(100, 16/aspectDenom, 0.1, 1000);\n    cam.zoom = zoom\n    cam.updateProjectionMatrix()\n    var renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });\n    renderer.setClearColor(0x000000, 0.25);\n    renderer.setSize(90, 120);\n\n    const divs = document.getElementsByClassName(uri)\n    for (const div of divs) {\n      div.appendChild(renderer.domElement);\n    }\n\n    var box = new THREE.SphereGeometry(2, 6, 2);\n    var mesh = new THREE.MeshStandardMaterial({\n      color: color,\n      metalness: metalness,\n      roughness: roughness,\n    });\n    var cube = new THREE.Mesh(box, mesh);\n    scene.add(cube);\n\n    var light = new THREE.PointLight(0xffffff, 8, 0, 2);\n    light.position.set(300, 300, 250);\n    scene.add(light);\n\n    var light2 = new THREE.RectAreaLight(0xffffff, 4, 750, 1000);\n    light2.position.set(-300, -300, 250);\n    light2.lookAt( 0, 0, 0 );\n    scene.add(light2);\n\n    cam.position.z = 2.75;\n\n    var render = function() {\n      requestAnimationFrame(render);\n      cube.rotation.y += 0.01;\n      renderer.render(scene, cam);\n    };\n\n    render();\n  }\n\n  render() {\n    const { uri } = this.props\n\n    return (\n      <div className={uri} />\n    )\n  }\n}\nexport default Crystal;\n","import imgPlanet0 from 'assets/images/planet0.png'\nimport imgPlanet1 from 'assets/images/planet1.png'\nimport imgPlanet2 from 'assets/images/planet2.png'\nimport imgPlanet3 from 'assets/images/planet3.png'\nimport imgPlanet4 from 'assets/images/planet4.png'\nimport imgPlanet5 from 'assets/images/planet5.png'\nimport imgPlanet6 from 'assets/images/planet6.png'\n\nimport imgTemple from 'assets/images/temple.png'\n\nimport songPlanet0 from 'assets/songs/planet0.wav'\nimport songPlanet1 from 'assets/songs/planet1.wav'\nimport songPlanet2 from 'assets/songs/planet2.wav'\nimport songPlanet3 from 'assets/songs/planet3.wav'\nimport songPlanet4 from 'assets/songs/planet4.wav'\nimport songPlanet5 from 'assets/songs/planet5.wav'\nimport songPlanet6 from 'assets/songs/planet6.wav'\n\nexport default [\n  // Coordinates are intended to be 0-100% of window dimension\n  { id: 0, name: \"Mondopia\", img: imgPlanet0, x: 70, y: 70, song: songPlanet0 },\n  { id: 1, name: \"Zyrgon\",   img: imgPlanet1, x: 32, y: 42, song: songPlanet1 },\n  { id: 2, name: \"Ribos\",    img: imgPlanet2, x: 8,  y: 3,  song: songPlanet2 },\n  { id: 3, name: \"Mustafar\", img: imgPlanet3, x: 53, y: 16, song: songPlanet3 },\n  { id: 4, name: \"Arrakis\",  img: imgPlanet4, x: 82, y: 29, song: songPlanet4 },\n  { id: 5, name: \"Kronos\",   img: imgPlanet5, x: 94, y: 57, song: songPlanet5 },\n  { id: 6, name: \"4546B\",    img: imgPlanet6, x: 18, y: 78, song: songPlanet6 },\n  { id: 255, name: \"Temple of Nakamoto\", img: imgTemple, x: 29, y: 12 },\n]","import planets from 'utils/planets'\nimport telegrama from 'fonts/telegrama.woff'\n\nexport default {\n  '@global': {\n    body: {\n      backgroundColor: 'black',\n      color: 'white',\n      fontFamily: 'telegrama',\n      margin: 0,\n    },\n    div: {\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n      userSelect: 'none',\n      'backdrop-filter': 'blur(20px)',\n    },\n  },\n  '@font-face': {\n    fontFamily: 'telegrama',\n    src: `url(${telegrama}) format(\"woff\")`,\n  },\n\n  App: {\n    width: '100%',\n    minHeight: '100vh',\n    justifyContent: 'flex-start',\n\n    backgroundRepeat: 'no-repeat',\n    backgroundPosition: '50% 0%',\n    backgroundSize: '100%',\n  },\n\n  '@keyframes vibrate1': {\n    '0%': {\n      '-webkit-transform': 'translate(0)',\n              'transform': 'translate(0)',\n    },\n    '20%': {\n      '-webkit-transform': 'translate(-2px, 2px)',\n              'transform': 'translate(-2px, 2px)',\n    },\n    '40%': {\n      '-webkit-transform': 'translate(-2px, -2px)',\n              'transform': 'translate(-2px, -2px)',\n    },\n    '60%': {\n      '-webkit-transform': 'translate(2px, 2px)',\n              'transform': 'translate(2px, 2px)',\n    },\n    '80%': {\n      '-webkit-transform': 'translate(2px, -2px)',\n              'transform': 'translate(2px, -2px)',\n    },\n    '100%': {\n      '-webkit-transform': 'translate(0)',\n              'transform': 'translate(0)',\n    },\n  }\n}","import Web3 from \"web3\";\n \nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:9545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n \nexport default getWeb3;","export default color => {\n  switch(color) {\n    case 'good': return '#0f0'\n    case 'bad': return '#f00'\n    case 'status': return '#ff0'\n    case 'info': return '#0ff'\n    case 'dark': return '#666'\n    default: return '#fff'\n  }\n}","import React from \"react\";\nimport injectSheet from 'react-jss'\nimport colorFromFlavour from 'utils/colorFromFlavour'\n\nconst styles = {\n  Laserframe: {\n    textAlign: \"center\",\n    border: ({ flavour }) => '1px solid ' + colorFromFlavour(flavour),\n    color: ({ flavour }) => colorFromFlavour(flavour),\n    backgroundColor: ({ active }) => {\n      if (!active) return 'rgba(0, 0, 0, 0.75)'\n      return '#444'\n    },\n    width: ({ size }) => {\n      switch (size) {\n        case 'wide': return 'fill-available'\n        case 'small': return 'fit-content'\n        case 'wide3': return '33.33333%'\n        case 'wide4': return '25%'\n      }\n    },\n    borderRadius: 4,\n    padding: '12px',\n    margin: '4px',\n    cursor: ({ isButton }) => isButton ? 'pointer' : 'default',\n    userSelect: 'none',\n    '&:hover': {\n      color: ({ isButton }) => isButton ? '#000' : null,\n      backgroundColor: ({ isButton, flavour }) => isButton ? colorFromFlavour(flavour) : null,\n    }\n  }\n}\n\nclass Laserframe extends React.Component {\n  render() {\n    const { classes, children, onClick } = this.props\n\n    return (\n      <div\n        className={classes.Laserframe}\n        onClick={() => {\n          if (onClick) onClick()\n        }}\n      >\n        { children }\n      </div>\n    )\n  }\n}\n\nLaserframe = injectSheet(styles)(Laserframe)\nexport default Laserframe;\n","import React from \"react\";\nimport injectSheet from 'react-jss'\nimport colorFromFlavour from 'utils/colorFromFlavour'\n\nconst styles = {\n  Loader: {\n    margin: '4px',\n  },\n}\n\nlet Loader = ({ classes, flavour, size = 32 }) => (\n  // <!-- By Sam Herbert (@sherb), for everyone. More @ http://goo.gl/7AJzbL -->\n  <svg className={classes.Loader} width={size} height={size} viewBox=\"0 0 38 38\" xmlns=\"http://www.w3.org/2000/svg\" stroke={'#fff'}>\n    <g fill=\"none\" fillRule=\"evenodd\">\n      <g transform=\"translate(1 1)\" strokeWidth=\"2\">\n        <circle strokeOpacity=\".5\" cx=\"18\" cy=\"18\" r=\"18\"/>\n        <path d=\"M36 18c0-9.94-8.06-18-18-18\">\n          <animateTransform\n            attributeName=\"transform\"\n            type=\"rotate\"\n            from=\"0 18 18\"\n            to=\"360 18 18\"\n            dur=\"1s\"\n            repeatCount=\"indefinite\"\n          />\n        </path>\n      </g>\n    </g>\n  </svg>\n)\n\nLoader = injectSheet(styles)(Loader)\nexport default Loader","import React, { Component } from \"react\"\nimport { connect } from 'react-redux'\nimport injectSheet from 'react-jss'\nimport Laserframe from 'components/reusables/Laserframe'\nimport Loader from 'components/reusables/Loader'\n\nconst styles = {\n  container: {}\n}\n\nclass Welcome extends Component {\n  goToNextScreen = () => {\n    const { user, changeScreen} = this.props\n\n    if (user.ownsSpaceship)\n      changeScreen('Travel')\n    else\n      changeScreen('SpaceshipDealer')\n  }\n\n  render() {\n    const { classes } = this.props\n\n    return (\n      <div className={classes.container}>\n        <h1>Galactonomics</h1>\n        <Laserframe\n          isButton\n          onClick={this.goToNextScreen}\n          flavour=\"good\"\n        >Continue</Laserframe>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    contracts: state.contracts,\n    user: state.user,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    changeScreen: screen => dispatch({ type: 'CHANGE_SCREEN', screen }),\n  }\n}\n\nWelcome = connect(mapStateToProps, mapDispatchToProps)(Welcome)\nWelcome = injectSheet(styles)(Welcome)\nexport default Welcome;\n","export default function(string) {\n  // This is a temp solution, doesn't work that well\n  if (typeof string === 'object') {\n    string = JSON.stringify(string)\n  }\n\n  let i, errorMsg\n  errorMsg = \"Error: VM Exception while processing transaction: revert \"\n  i = string.lastIndexOf(errorMsg)\n\n  if (i === -1) {\n    errorMsg = \"Error: MetaMask Tx Signature: \"\n    i = string.lastIndexOf(errorMsg)\n  }\n\n  const output = string.substring(i + errorMsg.length)\n  return output\n}","import React, { Component } from \"react\"\nimport { connect } from 'react-redux'\nimport injectSheet from 'react-jss'\nimport Laserframe from 'components/reusables/Laserframe'\nimport spaceship from 'assets/images/spaceship.jpg'\nimport Loader from 'components/reusables/Loader'\nimport getErrorMsg from 'utils/getErrorMsg'\n\nconst styles = {\n  container: {}\n}\n\nclass SpaceshipDealer extends Component {\n  state = {\n    isLoading: false,\n    loadingText: '',\n  };\n\n  buySpaceship = async () => {\n    this.setState({ isLoading: true, loadingText: 'Waiting for your approval of ownership transfer' })\n\n    const { web3, contracts, user, changeScreen, setDialogBox } = this.props\n\n    contracts.gta.buySpaceship(\n      \"My Spaceship\",\n      { from: user.address, value: web3.utils.toWei(\"0.01\", \"ether\") }\n    )\n      .on('transactionHash', () => {\n        this.setState({ isLoading: true, loadingText: 'Waiting processing by the Galactic Transit Authority' })\n      })\n      .on('receipt', receipt => {\n        changeScreen('Travel')\n      })\n      .on('error', e => {\n        this.setState({ isLoading: false })\n        setDialogBox(getErrorMsg(e.message), \"bad\")\n      })\n  }\n\n  render() {\n    const { classes } = this.props\n    const { isLoading, loadingText } = this.state\n\n    return (\n      <div className={classes.container}>\n        <h2>It's dangerous to go alone.</h2>\n        <h1>Would you like to purchase a spaceship?</h1>\n        <h3>WARNING: Spaceship ownership is required by law to handle commodities in this galactic region</h3>\n        <img src={spaceship} />\n        <Laserframe\n          isButton={!isLoading}\n          onClick={this.buySpaceship}\n          flavour=\"good\"\n        >{isLoading ? <div>{loadingText} <Loader flavour=\"good\" /></div> : 'Okay'}</Laserframe>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    contracts: state.contracts,\n    user: state.user,\n    web3: state.web3,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    changeScreen: screen => dispatch({ type: 'CHANGE_SCREEN', screen }),\n    setDialogBox: (content, flavour)=> dispatch({ type: 'SET_DIALOG_BOX', content, flavour }),\n  }\n}\n\nSpaceshipDealer = connect(mapStateToProps, mapDispatchToProps)(SpaceshipDealer)\nSpaceshipDealer = injectSheet(styles)(SpaceshipDealer)\nexport default SpaceshipDealer;\n","import { createStore } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport hardSet from 'redux-persist/lib/stateReconciler/hardSet'\n\nimport rootReducer from './reducers/index';\nimport initialState from './initialState'\n\nconst NODE_ENV = process.env.NODE_ENV || 'development';\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  stateReconciler: hardSet,\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nlet reduxDevTools;\nif (NODE_ENV !== 'production' && window.__REDUX_DEVTOOLS_EXTENSION__) {\n  reduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION__()\n}\n\n\n// Named exports:\n\nexport const store = createStore(\n  persistedReducer,\n  initialState,\n  reduxDevTools,\n)\n\nexport const persistor = persistStore(store)","import { combineReducers } from 'redux'\n\nimport web3 from './web3'\nimport contracts from './contracts'\nimport view from './view'\nimport user from './user'\nimport industrial from './industrial'\nimport audio from './audio'\nimport eth from './eth'\n\nconst appReducer = combineReducers({\n  web3,\n  contracts,\n  view,\n  user,\n  industrial,\n  audio,\n  eth,\n})\n\nexport default (state, action) => appReducer(state, action)","export default (state, action) => {\n  switch (action.type) {\n    case 'SET_WEB3': {\n      return action.web3\n    }\n\n    default: return { ...state }\n  }\n}","export default (state, action) => {\n  switch (action.type) {\n    case 'ADD_CONTRACT': {\n      const { name, instance } = action\n\n      return {\n        ...state,\n        [name]: instance,\n      }\n    }\n\n    default: return { ...state }\n  }\n}","export default (state, action) => {\n  switch (action.type) {\n    case 'CHANGE_SCREEN': {\n      const { screen } = action\n\n      return {\n        ...state,\n        currentScreen: screen,\n      }\n    }\n\n    case 'SET_DIALOG_BOX': {\n      const { content, flavour, noDefaultButton } = action\n\n      return {\n        ...state,\n        dialogBox: {\n          ...state.dialogBox,\n          content,\n          flavour,\n          noDefaultButton,\n        }\n      }\n    }\n\n    default: return { ...state }\n  }\n}","export default (state, action) => {\n  switch (action.type) {\n    case 'SET_USER_INFO': {\n      const { info } = action\n\n      return {\n        ...state,\n        ...info,\n      }\n    }\n\n    case 'SET_ADDRESS': {\n      const { address } = action\n\n      return {\n        ...state,\n        address,\n      }\n    }\n\n    case 'SET_TRAVELLING_TO': {\n      const { travellingTo } = action\n\n      return {\n        ...state,\n        travellingTo,\n      }\n    }\n\n    default: return { ...state }\n  }\n}","export default (state, action) => {\n  switch (action.type) {\n    case 'SET_INDUSTRIAL_STATE': {\n      const { industrialState } = action\n\n      return {\n        ...state,\n        ...industrialState,\n      }\n    }\n\n    default: return { ...state }\n  }\n}","export default (state, action) => {\n  switch (action.type) {\n    case 'SET_AUDIO_STATE': {\n      const { audioState } = action\n\n      return {\n        ...state,\n        ...audioState,\n      }\n    }\n\n    default: return { ...state }\n  }\n}","export default (state, action) => {\n  switch (action.type) {\n    case 'SET_ETH_STATE': {\n      const { ethState } = action\n\n      return {\n        ...state,\n        ...ethState,\n      }\n    }\n\n    default: return { ...state }\n  }\n}","export default {\n  view: {\n    currentScreen: 'Welcome',\n    dialogBox: {},\n  },\n  industrial: {\n    areasMined: [],\n  },\n}","export default [\n  { name: 'Iodine', symbol: 'IOD' },\n  { name: 'Neon gas', symbol: 'NEG' },\n  { name: 'Iron ore', symbol: 'IRN' },\n  { name: 'Platinum ore', symbol: 'PLT' },\n  { name: 'Gold ore', symbol: 'GLD' },\n  { name: 'Petroleum', symbol: 'PET' },\n  { name: 'Water', symbol: 'WTR' },\n]","import { store } from '../redux/store'\nimport commodities from 'utils/commodities'\n\nexport default () => new Promise(async (resolve, reject) => {\n  /* 'Refreshes' user data and saves in redux store */\n  const state = store.getState()\n  const { contracts, user, web3 } = state\n\n  let playerInfo, currentCargo, balance\n  try {\n    playerInfo = await contracts.gta.getInfo({ from: user.address })\n    currentCargo = await contracts.commodities.getCurrentCargo(user.address, { from: user.address })\n    balance = await web3.eth.getBalance(user.address)\n  } catch (e) {\n    return reject(e)\n  }\n\n  const cargoPerCommodity = await Promise.all([0, 1, 2, 3, 4, 5, 6].map(id => new Promise(async (resolve, reject) => {\n    let amount, symbol\n    try {\n      amount = (await contracts.commodities.getBalance(id, { from: user.address })).toString()\n    } catch (e) {\n      return reject(e)\n    }\n    resolve({ amount, symbol: commodities[id].symbol })\n  })))\n\n  store.dispatch({\n    type: 'SET_USER_INFO',\n    info: {\n      currentFuel: playerInfo.currentFuel.toString(),\n      currentPlanet: playerInfo.currentPlanet.toString(),\n      currentCargo: currentCargo,\n      maxCargo: playerInfo.maxCargo.toString(),\n      maxFuel: playerInfo.maxFuel.toString(),\n      spaceshipName: playerInfo.spaceshipName.toString(),\n      balance: web3.utils.fromWei(balance),\n      cargoPerCommodity: cargoPerCommodity,\n    }\n  })\n\n  resolve()\n})","import React, { Component } from \"react\"\nimport { connect } from 'react-redux'\nimport injectSheet from 'react-jss'\nimport planets from 'utils/planets'\nimport getPlayerInfo from 'utils/getPlayerInfo'\n\nconst PWIDTH = 128\n\nconst styles = {\n  Travel: {\n    justifyContent: 'flex-start',\n    '& h1': {\n      zIndex: 1,\n    }\n  },\n  planets: {\n    width: '100%',\n  },\n  planet: {\n    position: 'absolute',\n    cursor: 'pointer',\n    '&:hover > div': {\n      opacity: 1.0,\n    },\n    '& > div': {\n      opacity: 0.5,\n    },\n  },\n}\n\nclass Travel extends Component {\n  state = {};\n\n  componentDidMount = () => {\n    getPlayerInfo()\n  }\n\n  startTravelling = async planetId => {\n    const { user, changeScreen, setTravellingTo } = this.props\n\n    // Go right to planet home if user is already on chosen planet\n    if (planetId == user.currentPlanet) {\n      return changeScreen('PlanetHome')\n    }\n\n    // Collect id of chosen planet\n    setTravellingTo(planetId)\n    // Go to travelling / 'loading' screen\n    changeScreen('Travelling')\n  }\n\n  render() {\n    const { classes, user } = this.props\n\n    return (\n      <div className={classes.Travel}>\n        <h1>Choose a planet to travel to</h1>\n        <div className={classes.planets}>\n          {planets.map((planet, i) =>\n            <div\n              key={i}\n              className={classes.planet}\n              style={{\n                left: ((window.innerWidth / 100) * planet.x) - (PWIDTH / 2),\n                bottom: ((window.innerHeight / 100) * planet.y),\n              }}\n              onClick={() => this.startTravelling(planet.id)}\n            >\n              <img\n                src={planet.img}\n                width={PWIDTH}\n                alt=\"\"\n              />\n              <div>\n                { planet.name }\n              </div>\n              {planet.id == user.currentPlanet && '(current)'}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    contracts: state.contracts,\n    user: state.user,\n    web3: state.web3,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    changeScreen: screen => dispatch({ type: 'CHANGE_SCREEN', screen }),\n    setTravellingTo: travellingTo => dispatch({ type: 'SET_TRAVELLING_TO', travellingTo }),\n  }\n}\n\nTravel = connect(mapStateToProps, mapDispatchToProps)(Travel)\nTravel = injectSheet(styles)(Travel)\nexport default Travel;\n","import React, { Component } from \"react\"\nimport { connect } from 'react-redux'\nimport injectSheet from 'react-jss'\nimport spaceship from 'assets/images/spaceship.jpg'\nimport planets from 'utils/planets'\nimport getErrorMsg from 'utils/getErrorMsg'\nimport Sound from 'react-sound';\nimport travellingSound from 'assets/sounds/travelling.wav'\nimport Laserframe from 'components/reusables/Laserframe.js'\n\nconst styles = {\n  container: {\n  },\n  travellingSpaceship: {\n    animation: 'vibrate1 0.3s linear infinite both',\n  },\n}\n\nclass Travelling extends Component {\n  state = {\n    isTravelling: false,\n    currentSpeed: 5.39,\n  };\n\n  componentDidMount = () => {\n    this.travelToPlanet()\n  }\n\n  componentDidUpdate = (_, prevState) => {\n    if (!prevState.isTravelling && this.state.isTravelling) {\n      // start animation\n      window.requestAnimationFrame(this.changeSpeed)\n    }\n  }\n\n  changeSpeed = () => {\n    let signCoef = 1\n    if (Math.random() <= 0.5) {\n      signCoef = -1\n    }\n\n    const modulator = Math.random() * 0.1 * signCoef\n    const { currentSpeed } = this.state\n    const newSpeed = parseFloat(parseFloat(currentSpeed) + modulator).toFixed(7)\n\n    this.setState({\n      currentSpeed: newSpeed\n    })\n    window.requestAnimationFrame(this.changeSpeed)\n  }\n\n  travelToPlanet = () => {\n    const { contracts, user, changeScreen, setUserInfo, setDialogBox } = this.props\n\n    contracts.gta.travelToPlanet(user.travellingTo, { from: user.address })\n      .on('transactionHash', () => {\n        this.setState({ isTravelling: true })\n      })\n      .on('receipt', receipt => {\n        setUserInfo({ currentPlanet: user.travellingTo })\n        changeScreen('PlanetIntro')\n      })\n      .on('error', e => {\n        setDialogBox(getErrorMsg(e.message), \"bad\")\n        changeScreen('Travel')\n      })\n  }\n\n  render() {\n    const { classes, user } = this.props\n    const { isTravelling, currentSpeed } = this.state\n    const planet = planets.find(planet => planet.id == user.travellingTo)\n\n    return (\n      <div className={classes.container}>\n        {!isTravelling ?\n          <h1>Waiting for hyperdrive activation...</h1>\n          :\n          <h1>Travelling to {planet.id != '255' && 'planet '}{planet.name}...</h1>\n        }\n        <img\n          src={spaceship}\n          className={classes[isTravelling && 'travellingSpaceship']}\n        />\n        <Laserframe flavour=\"info\">\n          Current speed: {isTravelling ? currentSpeed + ' * 10^11 kph' : 'N/A'}\n        </Laserframe>\n        <Sound\n          url={travellingSound}\n          playStatus={isTravelling && Sound.status.PLAYING}\n          volume={7}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    contracts: state.contracts,\n    user: state.user,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    changeScreen: screen => dispatch({ type: 'CHANGE_SCREEN', screen }),\n    setUserInfo: info => dispatch({ type: 'SET_USER_INFO', info }),\n    setDialogBox: (content, flavour)=> dispatch({ type: 'SET_DIALOG_BOX', content, flavour }),\n  }\n}\n\nTravelling = connect(mapStateToProps, mapDispatchToProps)(Travelling)\nTravelling = injectSheet(styles)(Travelling)\nexport default Travelling;\n","import React, { Component } from \"react\"\nimport { connect } from 'react-redux'\nimport injectSheet from 'react-jss'\nimport Laserframe from 'components/reusables/Laserframe'\nimport planets from 'utils/planets'\nimport Sound from 'react-sound';\n\nconst styles = {\n  PlanetIntro: {\n  }\n}\n\nclass PlanetIntro extends Component {\n  state = {\n    soundHasPlayed: false,\n  }\n\n  componentDidMount = () => {\n    // Reset some state since on a new planet now\n    this.props.setIndustrialState({\n      areasMined: [],\n      isMining: false,\n      hasValidProof: false,\n      miningJustFailed: false,\n      isSubmitting: false,\n    })\n  }\n\n  render() {\n    const { soundHasPlayed } = this.state\n    const { classes, user, changeScreen } = this.props\n    const planet = planets.find(planet => planet.id == user.currentPlanet)\n\n    return (\n      <div className={classes.PlanetIntro}>\n        <h1>Welcome to {planet.id != '255' && 'planet '}{planet.name}</h1>\n        <Laserframe\n          isButton\n          onClick={() => changeScreen('PlanetHome')}\n          flavour=\"good\"\n        >Continue >></Laserframe>\n        <img\n          src={planet.img}\n        />\n        <Sound\n          url={planet.song}\n          playStatus={!soundHasPlayed && Sound.status.PLAYING}\n          volume={75}\n          onFinishedPlaying={() => this.setState({ soundHasPlayed: true })}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    changeScreen: screen => dispatch({ type: 'CHANGE_SCREEN', screen }),\n    setIndustrialState: industrialState => dispatch({ type: 'SET_INDUSTRIAL_STATE', industrialState }),\n  }\n}\n\nPlanetIntro = connect(mapStateToProps, mapDispatchToProps)(PlanetIntro)\nPlanetIntro = injectSheet(styles)(PlanetIntro)\nexport default PlanetIntro;\n","import React, { Component, Fragment } from \"react\";\nimport injectSheet from 'react-jss'\nimport { connect } from 'react-redux'\nimport Laserframe from 'components/reusables/Laserframe'\nimport { FaGasPump } from 'react-icons/fa';\nimport getErrorMsg from 'utils/getErrorMsg'\nimport getPlayerInfo from 'utils/getPlayerInfo'\nimport Loader from 'components/reusables/Loader'\nimport Sound from 'react-sound';\nimport receivedSomething from 'assets/sounds/receivedSomething.wav'\n\nconst styles = {\n}\n\nclass FuelMeter extends Component {\n  state = {\n    isLoading: false,\n    isRefueling: false,\n    refuelCost: {},\n    doneFueling: false,\n  }\n\n  componentDidMount = () => {\n    this.checkRefuelCost()\n  }\n\n  checkRefuelCost = async () => {\n    this.setState({ isLoading: true })\n\n    const { contracts, user } = this.props\n\n    let refuelCost\n    try {\n      refuelCost = await contracts.gta.refuelCost({ from: user.address })\n    } catch (e) {\n      return console.error(e)\n    }\n\n    this.setState({ refuelCost: refuelCost, isLoading: false })\n  }\n\n  refuel = async () => {\n    const { contracts, user } = this.props\n\n    contracts.gta.refuel({ from: user.address, value: this.state.refuelCost })\n      .on('transactionHash', () => {\n        this.setState({ isRefueling: true })\n      })\n      .on('receipt', async () => {\n        await getPlayerInfo()\n        this.setState({\n          isRefueling: false,\n          doneFueling: true,\n        })\n      })\n      .on('error', e => {\n        this.props.setDialogBox(getErrorMsg(e.message), 'bad')\n      })\n  }\n\n  render() {\n    const { classes, currentFuel, maxFuel, web3 } = this.props\n    const { isRefueling, doneFueling } = this.state\n\n    let refuelCost\n    try {\n      refuelCost = web3.utils.fromWei(this.state.refuelCost.toString())\n    } catch (e) {\n      refuelCost = <Loader />\n    }\n\n    const isFull = currentFuel === maxFuel\n\n    return (\n      <Fragment>\n        <Laserframe\n          size=\"wide\"\n        >Fuel</Laserframe>\n        <FaGasPump />\n        <div>{currentFuel}/{maxFuel} megalitres</div>\n        {!isFull && <div>Cost to refuel: Ξ{refuelCost}</div>}\n        <Laserframe\n          flavour={isRefueling ? 'status' : 'good'}\n          isButton={!isFull}\n          size=\"wide\"\n          onClick={() => { if (!isFull) this.refuel()}}\n        >{isRefueling ? <div>Refueling... <Loader flavour=\"status\" /></div> : (isFull ? 'Tank is full' : 'Fill up tank')}</Laserframe>\n        <Sound\n          url={receivedSomething}\n          playStatus={doneFueling && Sound.status.PLAYING}\n          volume={25}\n          onFinishedPlaying={() => this.setState({ doneFueling: false })}\n        />\n      </Fragment>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    contracts: state.contracts,\n    user: state.user,\n    web3: state.web3,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setDialogBox: (content, flavour)=> dispatch({ type: 'SET_DIALOG_BOX', content, flavour }),\n  }\n}\n\nFuelMeter = connect(mapStateToProps, mapDispatchToProps)(FuelMeter)\nFuelMeter = injectSheet(styles)(FuelMeter)\nexport default FuelMeter;\n","import React, { Component, Fragment } from \"react\"\nimport { connect } from 'react-redux'\nimport injectSheet from 'react-jss'\nimport Laserframe from 'components/reusables/Laserframe'\nimport FuelMeter from 'components/screens/planet/FuelMeter'\nimport planets from 'utils/planets'\nimport {\n  FaBalanceScale,\n  FaChartBar,\n  FaIndustry,\n  FaHammer,\n  FaEthereum,\n} from 'react-icons/fa';\nimport { MdBusinessCenter } from 'react-icons/md'\nimport getPlayerInfo from 'utils/getPlayerInfo'\n\nconst styles = {\n  PlanetHome: {\n    width: 'fill-available',\n    flexDirection: 'row',\n\n    '& > div': {\n      height: 'fill-available',\n      justifyContent: 'flex-start',\n    },\n\n    '& > div:nth-child(1)': {\n      width: '20%',\n    },\n\n    '& > div:nth-child(2)': {\n      width: '65%',\n    },\n\n    '& > div:nth-child(3)': {\n      width: '15%',\n    },\n  },\n  planetImg: {\n    width: '60%',\n    padding: '12%',\n  },\n  top3: {\n    alignItems: 'flex-start',\n    flexDirection: 'row',\n    width: 'fill-available',\n    '@global': {\n      svg: {\n        margin: '16px',\n      }\n    }\n  },\n}\n\nclass PlanetHome extends Component {\n  state = {};\n\n  componentDidMount = async () => {\n    getPlayerInfo()\n  }\n\n  render() {\n    const { classes, user, changeScreen } = this.props\n    const planet = planets.find(planet => planet.id == user.currentPlanet)\n    const iconSize = 96\n\n    return (\n      <Fragment>\n        <div className={classes.PlanetHome}>\n          <div>\n            <Laserframe\n              onClick={() => changeScreen('Travel')}\n              isButton\n              flavour=\"good\"\n              size=\"wide\"\n            >Travel (Leave {planet.name})</Laserframe>\n            <Laserframe\n              flavour=\"status\"\n              size=\"wide\"\n            >Ξ{user.balance}</Laserframe>\n          </div>\n          <div className={classes.top3}>\n            {planet.id == 255 ?\n              <Fragment>\n                <Laserframe\n                  onClick={() => changeScreen('TempleMarketplace')}\n                  isButton\n                  flavour=\"info\"\n                  size=\"wide3\"\n                >\n                  <MdBusinessCenter size={iconSize} />\n                  Crystal Marketplace\n                </Laserframe>\n                <Laserframe\n                  onClick={() => changeScreen('PlanetPrices')}\n                  isButton\n                  flavour=\"info\"\n                  size=\"wide3\"\n                >\n                  <FaChartBar size={iconSize} />\n                  Commodity Prices\n                </Laserframe>\n                <Laserframe\n                  onClick={() => changeScreen('TempleIndustrial')}\n                  isButton\n                  flavour=\"info\"\n                  size=\"wide3\"\n                >\n                  <FaHammer size={iconSize} />\n                  Forge Crystals\n                </Laserframe>\n                <Laserframe\n                  onClick={() => changeScreen('TempleViewCrystals')}\n                  isButton\n                  flavour=\"info\"\n                  size=\"wide3\"\n                >\n                  <FaEthereum size={iconSize} />\n                  View My Crystals\n                </Laserframe>\n              </Fragment>\n              :\n              <Fragment>\n                <Laserframe\n                  onClick={() => changeScreen('PlanetMarketplace')}\n                  isButton\n                  flavour=\"info\"\n                  size=\"wide3\"\n                >\n                  <FaBalanceScale size={iconSize} />\n                  Marketplace\n                </Laserframe>\n                <Laserframe\n                  onClick={() => changeScreen('PlanetPrices')}\n                  isButton\n                  flavour=\"info\"\n                  size=\"wide3\"\n                >\n                  <FaChartBar className={classes.icon}size={iconSize} />\n                  Commodity Prices\n                </Laserframe>\n                <Laserframe\n                  onClick={() => changeScreen('PlanetIndustrial')}\n                  isButton\n                  flavour=\"info\"\n                  size=\"wide3\"\n                >\n                  <FaIndustry size={iconSize} />\n                  Industrial Operations\n                </Laserframe>\n              </Fragment>\n            }\n          </div>\n          <div>\n            <FuelMeter\n              currentFuel={user.currentFuel}\n              maxFuel={user.maxFuel}\n              />\n          </div>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user,\n    web3: state.web3,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setUserInfo: info => dispatch({ type: 'SET_USER_INFO', info }),\n    changeScreen: screen => dispatch({ type: 'CHANGE_SCREEN', screen }),\n  }\n}\n\nPlanetHome = connect(mapStateToProps, mapDispatchToProps)(PlanetHome)\nPlanetHome = injectSheet(styles)(PlanetHome)\nexport default PlanetHome;\n","import React from \"react\"\nimport injectSheet from 'react-jss'\nimport commodities from 'utils/commodities'\nimport Laserframe from 'components/reusables/Laserframe'\n\nconst styles = {\n  CargoMeter: {\n    flexDirection: 'row',\n  },\n}\n\nlet CargoMeter = ({ classes, current = 0, max = 0, cargoPerCommodity = [] }) => (\n  <div className={classes.CargoMeter}>\n    <Laserframe>\n      {\"Total cargo: \" + current.toString()}/{max.toString() + \" kg\"}\n    </Laserframe>\n    {cargoPerCommodity.map((commodity, i) =>\n      <Laserframe key={i} flavour=\"dark\">\n        {commodities[i].symbol} {commodity.amount}\n      </Laserframe>\n    )}\n  </div>\n)\n\nCargoMeter = injectSheet(styles)(CargoMeter)\nexport default CargoMeter;\n","import React, { Component, Fragment } from \"react\"\nimport { connect } from 'react-redux'\nimport injectSheet from 'react-jss'\nimport Laserframe from 'components/reusables/Laserframe'\nimport CargoMeter from 'components/screens/planet/CargoMeter'\n\nconst styles = {\n  MPIContainer: {\n    minHeight: '100vh',\n    width: 'fill-available',\n    '& > div': {\n      width: 'fill-available',\n    },\n    '& > div:first-child': {\n      flex: 1,\n      flexDirection: 'row',\n      alignItems: 'flex-start',\n      '& > div:first-child': {\n        flex: 1,\n      },\n      '& > div:last-child': {\n        flex: 0.2,\n      },\n    },\n    '& > div:last-child': {\n      flexDirection: 'row',\n    },\n  },\n}\n\nclass MPIContainer extends Component {\n  render() {\n    const { classes, user, changeScreen, currentScreen, sideButtons, cargoPerCommodity } = this.props\n\n    let navLinks\n    if (user.currentPlanet != 255) {\n      navLinks = [\n        { name: 'PlanetHome', label: '<< Back' },\n        { name: 'PlanetMarketplace', label: 'Marketplace' },\n        { name: 'PlanetPrices', label: 'Prices elsewhere' },\n        { name: 'PlanetIndustrial', label: 'Industrial operations' },\n      ]\n    } else {\n      navLinks = [\n        { name: 'PlanetHome', label: '<< Back' },\n        { name: 'TempleMarketplace', label: 'Crystal marketplace' },\n        { name: 'PlanetPrices', label: 'Prices elsewhere' },\n        { name: 'TempleIndustrial', label: 'Forge Crystals' },\n        { name: 'TempleViewCrystals', label: 'View My Crystals' },\n      ]\n    }\n\n    return (\n      <Fragment>\n        <div className={classes.MPIContainer}>\n          <div>\n            {/* Top Row */}\n            <div>\n              {/* Top-left */}\n              <CargoMeter current={user.currentCargo} max={user.maxCargo} cargoPerCommodity={user.cargoPerCommodity} />\n              {/* Main screen content goes here */}\n              <Fragment>{this.props.children}</Fragment>\n            </div>\n            <div >\n              {/* Top-right */}\n              <Laserframe\n                flavour=\"status\"\n                size=\"wide\"\n                >Ξ{user.balance}</Laserframe>\n              <div style={{ marginTop: '20%', width: '100%' }}>\n                {sideButtons && sideButtons.map((sideButton, i) => (\n                  <Laserframe\n                    key={i}\n                    isButton\n                    onClick={sideButton.fn}\n                    size=\"wide\"\n                  >{sideButton.label}</Laserframe>\n                ))}\n              </div>\n            </div>\n          </div>\n          <div>\n            {/* Bottom row */}\n            {navLinks.map((link, i) =>\n              <Laserframe\n                key={i}\n                isButton\n                active={currentScreen === link.name}\n                size=\"wide4\"\n                onClick={() => changeScreen(link.name)}\n              >{link.label}</Laserframe>\n            )}\n          </div>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentScreen: state.view.currentScreen,\n    contracts: state.contracts,\n    user: state.user,\n    web3: state.web3,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setUserInfo: info => dispatch({ type: 'SET_USER_INFO', info }),\n    changeScreen: screen => dispatch({ type: 'CHANGE_SCREEN', screen }),\n  }\n}\n\nMPIContainer = connect(mapStateToProps, mapDispatchToProps)(MPIContainer)\nMPIContainer = injectSheet(styles)(MPIContainer)\nexport default MPIContainer;\n","export default function(event) {\n  const target = event.target;\n  const value = target.type === 'checkbox' ? target.checked : target.value;\n  const name = target.name;\n\n  this.setState({\n    [name]: value\n  });\n}\n","export default function b(a){return a?(a^Math.random()*16>>a/4).toString(16):([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,b)}\n","export default function(addr) {\n  if (addr) {\n    const start = addr.substr(0, 6)\n    const end = addr.substr(-4)\n    return start + '...' + end\n  }\n  return ''\n}\n","import React, { Component, Fragment } from \"react\"\nimport injectSheet from 'react-jss'\nimport { connect } from 'react-redux'\nimport ellipAddr from 'utils/ellipAddr'\n\nconst styles = {\n  SellOrder: {\n    flexDirection: 'row',\n    width: 'fill-available',\n    cursor: ({ isHeader }) => !isHeader ? 'pointer' : null,\n\n    backgroundColor: ({ isSelected }) => isSelected ? '#777' : '#000',\n    '&:hover': {\n      backgroundColor: ({ isSelected, isHeader }) => { if (!isHeader) return isSelected ? '#777' : '#222' },\n    },\n\n    '& > div': {\n      border: '1px solid grey',\n      width: '25%',\n      fontWeight: ({ isHeader }) => isHeader ? 'bold' : null,\n    },\n  }\n}\n\nlet SellOrder = ({ classes, onClick, seller, amount, price, symbol, isHeader, fromWei }) => {\n  let items\n  if (isHeader) {\n    items = ['Seller', 'Price (ETH)', `Amount (${symbol})`, 'Total (ETH)']\n  } else {\n    items = [ellipAddr(seller), fromWei(String(price)), amount, fromWei(String(amount * price))]\n  }\n\n  return (\n    <div\n      onClick={onClick}\n      className={classes.SellOrder}\n    >\n      {items.map((item, i) => (\n        <div key={i}>\n          {item}\n        </div>\n      ))}\n    </div>\n  )\n}\n\nconst mapStateToProps = state => {\n  return {\n    fromWei: state.web3.utils.fromWei,\n  }\n}\n\nSellOrder = connect(mapStateToProps)(SellOrder)\nSellOrder = injectSheet(styles)(SellOrder)\nexport default SellOrder","import React, { Component, Fragment } from \"react\"\nimport { connect } from 'react-redux'\nimport injectSheet from 'react-jss'\nimport Laserframe from 'components/reusables/Laserframe'\nimport MPIContainer from 'components/screens/planet/MPIContainer'\nimport handleChange from 'utils/handleChange'\nimport uuid from 'utils/uuid'\nimport SellOrder from 'components/reusables/SellOrder'\nimport getPlayerInfo from 'utils/getPlayerInfo'\nimport Loader from 'components/reusables/Loader'\n\nconst styles = {\n  container: {\n    flexDirection: 'row',\n    width: '100%',\n    alignItems: 'flex-start',\n    '& > div:first-child': {\n      flex: '0.2',\n    },\n    '& > div:last-child': {\n      flex: '0.8',\n    },\n  },\n  sellBox: {\n    '& > div:first-child': {\n      marginBottom: '1em',\n    },\n  },\n}\n\nclass PlanetMarketplace extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      commodities: [],\n      sellOrders: [],\n      selectedCommodityId: null,\n      selectedSellOrderId: null,\n\n      sellAmount: '',\n      sellPrice: '',\n\n      isSellBoxVisible: false,\n\n      isLoading: false,\n    }\n\n    this.handleChange = handleChange.bind(this)\n  }\n\n  componentDidMount = () => {\n    this.getCommodities()\n  }\n\n  componentDidUpdate(_, prevState) {\n    if (this.state.selectedCommodityId !== prevState.selectedCommodityId) {\n      this.getSellOrders()\n    }\n  }\n\n  getSellOrders = async () => {\n    const { contracts, user } = this.props\n    const { selectedCommodityId } = this.state\n\n    if (selectedCommodityId !== null) {\n      this.setState({ isLoading: true })\n\n      const numSellOrders = await contracts.gea.getNumSellOrders(\n        user.currentPlanet,\n        selectedCommodityId,\n        { from: user.address }\n      )\n\n      const sellOrderIds = Array.apply(null, {length: parseInt(numSellOrders.toString())}).map(Number.call, Number)\n\n      // Collect all sell orders\n      const sellOrders = await Promise.all(sellOrderIds.map(sellOrderId => new Promise(async (resolve, reject) => {\n        let sellOrder\n        try {\n          sellOrder = await contracts.gea.getSellOrder(user.currentPlanet, selectedCommodityId, sellOrderId, { from: user.address })\n        } catch (e) {\n          reject(e)\n        }\n        resolve(sellOrder)\n      })))\n      this.setState({ sellOrders, isLoading: false })\n    }\n  }\n\n  getCommodities = async () => {\n    const commoditiesTraded = await this.getCommoditiesTraded()\n    const commodityInfos = await this.getCommodityInfos(commoditiesTraded)\n    const commodityBalances = await this.getCommodityBalances(commoditiesTraded)\n\n    this.setState({\n      commodities: commodityInfos.map((commodityInfo, i) => ({\n        id: commoditiesTraded[i],\n        name: commodityInfo.name,\n        symbol: commodityInfo.symbol,\n        myBalance: commodityBalances[i]\n      }))\n    })\n  }\n\n  getCommoditiesTraded = async () => {\n    const { contracts, user } = this.props\n    let commoditiesTraded\n    return new Promise(async (resolve, reject) => {\n      try {\n        commoditiesTraded = await contracts.gea.getCommoditiesTraded(user.currentPlanet, { from: user.address })\n      } catch (e) {\n        return reject(e)\n      }\n      commoditiesTraded = commoditiesTraded.map(commodityIdBN => commodityIdBN.toNumber())\n      resolve(commoditiesTraded)\n    })\n  }\n\n  getCommodityInfos = async commodityIds => {\n    const { contracts, user } = this.props\n    const commodityInfos = []\n    return new Promise(async (resolve, reject) => {\n      try {\n        for (let id of commodityIds) {\n          commodityInfos.push({\n            name: await contracts.commodities.getName(id, { from: user.address }),\n            symbol: await contracts.commodities.getSymbol(id, { from: user.address }),\n          })\n        }\n      } catch (e) {\n        return reject(e)\n      }\n      resolve(commodityInfos)\n    })\n  }\n\n  getCommodityBalances = async commodityIds => {\n    const { contracts, user } = this.props\n    let commodityBalances = []\n    return new Promise(async (resolve, reject) => {\n      try {\n        for (let id of commodityIds) {\n          commodityBalances.push(await contracts.commodities.getBalance(id, { from: user.address }))\n        }\n      } catch (e) {\n        reject(e)\n      }\n      commodityBalances = commodityBalances.map(commodityIdBN => commodityIdBN.toNumber())\n      resolve(commodityBalances)\n    })\n  }\n\n  createSellOrder = async () => {\n    const { contracts, user } = this.props\n    const { selectedCommodityId, sellAmount, sellPrice } = this.state\n\n    try {\n      await contracts.gea.createSellOrder(\n        user.currentPlanet,\n        selectedCommodityId,\n        sellAmount,\n        sellPrice,\n        { from: user.address },\n      )\n    } catch (e) {\n      this.setState({ isSellBoxVisible: false })\n      this.props.setDialogBox(\"Error creating sell order\", \"bad\")\n      return\n    }\n\n    // Close dialog box\n    this.props.setDialogBox(null)\n    // Refresh list of sell orders\n    this.getSellOrders()\n    // Refresh commodity balances\n    this.getCommodities()\n    // Refresh cargo\n    getPlayerInfo()\n  }\n\n  onClickBuy = async () => {\n    const { contracts, user } = this.props\n    const { sellOrders, selectedCommodityId, selectedSellOrderId } = this.state\n    const sellOrder = sellOrders[selectedSellOrderId]\n\n    try {\n      await contracts.gea.buySellOrder(\n        user.currentPlanet,\n        selectedCommodityId,\n        selectedSellOrderId,\n        { from: user.address, value: sellOrder.amount.mul(sellOrder.price)},\n      )\n    } catch (e) {\n      this.props.setDialogBox(\"Error buying order\", \"bad\")\n      return\n    }\n\n    // Refresh list of sell orders\n    this.getSellOrders()\n    // Refresh commodity balances\n    this.getCommodities()\n    // Refresh cargo\n    getPlayerInfo()\n  }\n\n  onClickSell = () => {\n    const {\n      commodities,\n      sellPrice,\n      sellAmount,\n      selectedCommodityId,\n    } = this.state\n\n    const { classes } = this.props\n\n    let commodity = { name: '', symbol: '' }\n    if (commodities.length && typeof selectedCommodityId === 'number') {\n      commodity = commodities[commodities.findIndex(commodity => commodity.id === selectedCommodityId)]\n    }\n\n    if (selectedCommodityId !== null) {\n      this.props.setDialogBox(\n        <div className={classes.sellBox}>\n          <div>Selling {commodity.name}</div>\n          <div>\n            <div>Amount</div>\n            <input name=\"sellAmount\" defaultValue={sellAmount} type=\"number\" onChange={this.handleChange} />\n          </div>\n          <div>\n            <div>Price</div>\n            <input name=\"sellPrice\" defaultValue={sellPrice} type=\"number\" onChange={this.handleChange} />\n          </div>\n          <Laserframe\n            flavour=\"info\"\n            isButton\n            onClick={this.createSellOrder}\n          >Ok</Laserframe>\n        </div>,\n        \"info\",\n        true,\n      )\n    } else {\n      this.props.setDialogBox(\"You need to select a commodity to sell\", \"bad\")\n    }\n  }\n\n  render() {\n    const { classes } = this.props\n    const {\n      commodities,\n      sellOrders,\n      selectedCommodityId,\n      selectedSellOrderId,\n      isLoading,\n    } = this.state\n\n    let commodity = { name: '', symbol: '' }\n    if (commodities.length && typeof selectedCommodityId === 'number') {\n      commodity = commodities[commodities.findIndex(commodity => commodity.id === selectedCommodityId)]\n    }\n\n    const sideButtons = [\n      { fn: this.onClickBuy, label: 'Buy' },\n      { fn: this.onClickSell, label: 'Sell' },\n    ]\n\n    return (\n      <MPIContainer sideButtons={sideButtons}>\n        <div className={classes.container}>\n          <div>\n            {/* Render commodity names and balances */}\n            {commodities.map((commodity, i) => (\n              <Laserframe\n                key={i}\n                isButton\n                size=\"wide\"\n                active={selectedCommodityId === commodity.id}\n                onClick={() => this.setState({ selectedCommodityId: commodities[i].id })}\n              >\n                <div>{commodity.name}</div>\n                <div>{\"(You have: \" + commodity.myBalance.toString() + \" kg)\"}</div>\n              </Laserframe>\n            ))}\n          </div>\n          {isLoading ?\n            <div>\n              <Loader />\n              Loading orders...\n            </div>\n            :\n            <div>\n              {/* Render sell orders for currently viewed commodity */}\n              {selectedCommodityId !== null ?\n                <Fragment>\n                  <SellOrder isHeader symbol={commodity.symbol} />\n                  {sellOrders\n                    .filter(sellOrder => sellOrder.open)\n                    .map(sellOrder => (\n                      <SellOrder\n                        key={uuid()}\n                        onClick={() => this.setState({\n                          selectedSellOrderId: sellOrder.orderId.toString()\n                        })}\n                        seller={sellOrder.seller}\n                        amount={sellOrder.amount.toString()}\n                        price={sellOrder.price.toString()}\n                        isSelected={selectedSellOrderId === sellOrder.orderId.toString()}\n                      />\n                    ))\n                  }\n                </Fragment>\n                :\n                'Select a commodity on the left panel to start buying or selling'\n              }\n            </div>\n          }\n        </div>\n      </MPIContainer>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    contracts: state.contracts,\n    user: state.user,\n    web3: state.web3,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setDialogBox: (content, flavour, noDefaultButton) =>\n      dispatch({ type: 'SET_DIALOG_BOX', content, flavour, noDefaultButton }),\n  }\n}\n\nPlanetMarketplace = connect(mapStateToProps, mapDispatchToProps)(PlanetMarketplace)\nPlanetMarketplace = injectSheet(styles)(PlanetMarketplace)\nexport default PlanetMarketplace;\n","import React, { Component, Fragment } from \"react\";\nimport injectSheet from 'react-jss'\nimport { connect } from 'react-redux'\nimport Laserframe from 'components/reusables/Laserframe'\n\nconst styles = {\n  MiningPad: {\n    flexDirection: 'row',\n    display: 'grid',\n    'grid-template-columns': 'repeat(128, 1fr)',\n    'grid-template-rows': 'auto',\n    fontSize: 14,\n  },\n  area: {\n    zIndex: 1,\n    backgroundColor: '#44',\n    width: 'min-content',\n    paddingTop: '2px',\n    '&:hover': {\n      backgroundColor: '#444 !important',\n      cursor: 'pointer',\n    }\n  },\n}\n\nclass MiningPad extends Component {\n  mineArea = (start, end) => {\n    const { setIndustrialState } = this.props\n    setIndustrialState({\n      isMining: true,\n      areaStart: start,\n      areaEnd: end,\n    })\n  }\n\n  render() {\n    const { classes, setIndustrialState, areaSize } = this.props\n    const { areasMined } = this.props.industrial\n\n    return (\n      <Laserframe\n        size=\"wide\"\n      >\n        <div className={classes.MiningPad}>\n          {Array(4096).fill().map((_, i) => {\n            const areaStart = i * areaSize\n            const areaEnd = areaStart + areaSize\n            const wasMined = Array.isArray(areasMined) && areasMined.includes(i)\n            const char = wasMined ? 'X' : 'O'\n            return (\n              <span\n                className={classes.area}\n                key={i}\n                onClick={() => {\n                  if (!wasMined)\n                    this.mineArea(areaStart, areaEnd)\n                }}\n                style={{\n                  color: wasMined ? '#f00' : null,\n                }}\n                onMouseEnter={e => {\n                  e.stopPropagation()\n                  if (!wasMined)\n                    setIndustrialState({\n                      areaStart,\n                      areaEnd,\n                      nonce: areaStart,\n                      miningJustFailed: false,\n                    })\n                }}\n                onMouseLeave={e => {\n                  e.stopPropagation()\n                  if (!wasMined)\n                    setIndustrialState({\n                      areaStart: undefined,\n                      areaEnd: undefined,\n                      miningJustFailed: false,\n                    })\n                }}\n              >{char}</span>\n            )\n          })}\n        </div>\n      </Laserframe>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    contracts: state.contracts,\n    user: state.user,\n    industrial: state.industrial,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setDialogBox: (content, flavour)=> dispatch({ type: 'SET_DIALOG_BOX', content, flavour }),\n    setIndustrialState: industrialState => dispatch({ type: 'SET_INDUSTRIAL_STATE', industrialState }),\n  }\n}\n\nMiningPad = connect(mapStateToProps, mapDispatchToProps)(MiningPad)\nMiningPad = injectSheet(styles)(MiningPad)\nexport default MiningPad;\n","import React, { Component, Fragment } from \"react\"\nimport { connect } from 'react-redux'\nimport injectSheet from 'react-jss'\nimport Laserframe from 'components/reusables/Laserframe'\nimport MPIContainer from 'components/screens/planet/MPIContainer'\nimport sha256 from 'js-sha256'\nimport getPlayerInfo from 'utils/getPlayerInfo'\nimport Loader from 'components/reusables/Loader'\nimport MiningPad from 'components/screens/planet/MiningPad'\nimport Sound from 'react-sound';\nimport miningSuccess from 'assets/sounds/miningSuccess.wav'\nimport receivedSomething from 'assets/sounds/receivedSomething.wav'\nimport mining from 'assets/sounds/mining.wav'\nimport miningFail from 'assets/sounds/miningFail.wav'\nimport getErrorMsg from \"utils/getErrorMsg\";\n\nconst styles = {\n  acceptDecline: {\n    flexDirection: 'row',\n  }\n}\n\nconst AREA_SIZE = 768\n\nfunction checkIfHashUnderTarget(hash, target) {\n  hash = parseInt('0x' + String(hash), 16)\n  target = parseInt(target, 16)\n  return hash < target\n}\n\nclass PlanetIndustrial extends Component {\n  componentDidMount = () => {\n    this.getCommodity()\n    this.getMiningData()\n  }\n\n  componentDidUpdate = prevProps => {\n    const { setIndustrialState, setDialogBox } = this.props\n    const { isMining, nonce, areaStart, areaEnd, areasMined, commodityName } = this.props.industrial\n\n    // When mining is started... (an area is clicked)\n    if (!prevProps.industrial.isMining && isMining) {\n      setIndustrialState({\n        miningJustFailed: false,\n        playMiningSound: true,\n      })\n      window.requestAnimationFrame(this.step)\n    }\n\n    // When finished mining an area (i.e., mining has failed in the area)...\n    if (prevProps.industrial.nonce !== nonce && nonce >= areaEnd) {\n      setIndustrialState({\n        nonce: undefined,\n        isMining: false,\n        // Array that holds indexes of areas that have been mined\n        areasMined: areasMined.concat([areaStart / AREA_SIZE]),\n        miningJustFailed: true,\n        areaStart: undefined,\n        areaEnd: undefined,\n        playMiningSound: false,\n        playMiningFailSound: true,\n      })\n      // setDialogBox(`No ${commodityName} was found in that area, \\nclick to continue.`)\n    }\n  }\n\n  getCommodity = async () => new Promise(async (resolve, reject) => {\n    const { user, contracts, setIndustrialState } = this.props\n    let commodity\n\n    try {\n      commodity = await contracts.commodities.get(user.currentPlanet, { from: user.address })\n    } catch (e) {\n      return reject(e)\n    }\n\n    setIndustrialState({\n      commodityName: commodity.name,\n      commoditySymbol: commodity.symbol,\n    })\n\n    resolve()\n  })\n\n  getMiningData = async () => new Promise(async (resolve, reject) => {\n    const { user, contracts, setIndustrialState } = this.props\n    let miningReward, miningTarget, prevMiningHash\n\n    try {\n      const response = await contracts.gia.getMiningData({ from: user.address })\n      miningReward = response[0]\n      miningTarget = response[1]\n      prevMiningHash = response[2]\n    } catch (e) {\n      return reject(e)\n    }\n\n    setIndustrialState({\n      miningReward, miningTarget, prevMiningHash\n    })\n\n    resolve()\n  })\n\n  step = () => {\n    const { user, setIndustrialState } = this.props\n    const { miningTarget, prevMiningHash, nonce, isMining } = this.props.industrial\n\n\n    if (typeof nonce === 'number') {\n      const hash = sha256(\n        nonce.toString() +\n        user.currentPlanet.toString() +\n        prevMiningHash +\n        user.address.substring(2).toLowerCase()\n      )\n\n      setIndustrialState({ hash })\n\n      const validProofFound = checkIfHashUnderTarget(hash, miningTarget)\n\n      if (validProofFound) {\n        console.log(hash, miningTarget)\n\n        return setIndustrialState({\n          playSuccessSound: true,\n          playMiningSound: false,\n          isMining: false,\n          hasValidProof: true,\n        })\n      }\n\n      setIndustrialState({ nonce: nonce + 1 })\n\n      if (isMining)\n        window.requestAnimationFrame(this.step)\n    }\n  }\n\n  stopMining = () => {\n    this.props.setIndustrialState({\n      isMining: false,\n      playMiningSound: false,\n    })\n  }\n\n  submitProof = async () => {\n    let { user, contracts, setIndustrialState, setDialogBox } = this.props\n    const { nonce } = this.props.industrial\n\n    setIndustrialState({ isSubmitting: true })\n\n    try {\n      await contracts.gia.submitProofOfWork(String(nonce), { from: user.address })\n    } catch (e) {\n      setIndustrialState({\n        isMining: false,\n        hasValidProof: false,\n        hash: '',\n        nonce: 0,\n        isSubmitting: false,\n      })\n      return setDialogBox(getErrorMsg(e.toString()), 'bad')\n    }\n\n    const oldQuant = Number(user.cargoPerCommodity[user.currentPlanet].amount)\n    await getPlayerInfo()\n    user = this.props.user\n    const newQuant = Number(user.cargoPerCommodity[user.currentPlanet].amount)\n\n    // Refresh data\n    await this.getCommodity()\n    await this.getMiningData()\n\n    setIndustrialState({\n      isMining: false,\n      hasValidProof: false,\n      hash: '',\n      nonce: 0,\n      isSubmitting: false,\n    })\n\n    if (newQuant > oldQuant) {\n      setIndustrialState({ playReceivedSound: true })\n    } else {\n      setDialogBox('Sorry, but your proof-of-work was not accepted', 'bad')\n    }\n  }\n\n  render() {\n    const { classes, industrial, setIndustrialState } = this.props\n    const {\n      isMining,\n      hash,\n      hasValidProof,\n      isSubmitting,\n      commodityName,\n      commoditySymbol,\n      areaStart,\n      areaEnd,\n      playReceivedSound,\n      playSuccessSound,\n      playMiningFailSound,\n      playMiningSound,\n      miningReward,\n      miningJustFailed,\n    } = industrial\n\n    const statusBarText = (() => {\n      if (areaStart && areaEnd) {\n        return `Area ${areaStart} to ${areaEnd}`\n      } else if (miningJustFailed) {\n        return `No ${commodityName} was found in that area`\n      }  else {\n        return 'Waiting...'\n      }\n    })()\n\n    return (\n      <MPIContainer>\n          <Laserframe\n            size=\"wide\"\n          >\n            {!isMining && !hasValidProof &&\n              <Fragment>\n                <div>\n                  Click an area to start mining for {commodityName} ({commoditySymbol})...\n                </div>\n                <div>\n                  ({miningReward ? miningReward.toString() : '0'} kg will be received after a succcesful mining operation)\n                </div>\n                <MiningPad areaSize={AREA_SIZE} />\n                <Laserframe\n                  flavour={miningJustFailed ? 'bad' : 'status'}\n                >\n                  {statusBarText}\n                </Laserframe>\n              </Fragment>\n            }\n            {isMining &&\n              <Fragment>\n                <div>\n                  Mining in area {areaStart} to {areaEnd}...\n                </div>\n                <Laserframe flavour='bad'>\n                  { hash }\n                </Laserframe>\n                <Laserframe\n                  isButton\n                  onClick={this.stopMining}\n                >\n                  Stop mining\n                </Laserframe>\n              </Fragment>\n            }\n            {!isMining && hasValidProof &&\n              <Fragment>\n                <div>\n                  Valid proof of work hash found!\n                </div>\n                <Laserframe flavour='good'>\n                  { hash }\n                </Laserframe>\n                <Laserframe\n                  isButton\n                  onClick={this.submitProof}\n                >\n                  {!isSubmitting ? 'Submit proof of work' : <Fragment>Waiting for validation...<Loader /></Fragment>}\n                </Laserframe>\n              </Fragment>\n            }\n          </Laserframe>\n          <Sound\n            url={miningSuccess}\n            playStatus={playSuccessSound && Sound.status.PLAYING}\n            volume={6}\n            onFinishedPlaying={() => setIndustrialState({ playSuccessSound: false })}\n          />\n          <Sound\n            url={receivedSomething}\n            playStatus={playReceivedSound && Sound.status.PLAYING}\n            volume={10}\n            onFinishedPlaying={() => setIndustrialState({ playReceivedSound: false })}\n          />\n          <Sound\n            url={mining}\n            playStatus={playMiningSound && Sound.status.PLAYING}\n            volume={15}\n            loop={true}\n            onFinishedPlaying={() => setIndustrialState({ playMiningSound: false })}\n          />\n          <Sound\n            url={miningFail}\n            playStatus={playMiningFailSound && Sound.status.PLAYING}\n            volume={10}\n            onFinishedPlaying={() => setIndustrialState({ playMiningFailSound: false })}\n          />\n      </MPIContainer>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    contracts: state.contracts,\n    user: state.user,\n    web3: state.web3,\n    industrial: state.industrial,\n    eth: state.eth,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setDialogBox: (content, flavour)=> dispatch({ type: 'SET_DIALOG_BOX', content, flavour }),\n    setIndustrialState: industrialState => dispatch({ type: 'SET_INDUSTRIAL_STATE', industrialState }),\n  }\n}\n\nPlanetIndustrial = connect(mapStateToProps, mapDispatchToProps)(PlanetIndustrial)\nPlanetIndustrial = injectSheet(styles)(PlanetIndustrial)\nexport default PlanetIndustrial;\n","import React, { Fragment } from \"react\"\nimport injectSheet from 'react-jss'\nimport { connect } from 'react-redux'\nimport planets from 'utils/planets'\nimport uuid from 'utils/uuid'\n\nconst styles = {\n  PricesRow: {\n    flexDirection: 'row',\n    width: 'fill-available',\n    backgroundColor: 'rgba(0, 0, 0, 0.75)',\n\n\n    '& > div': {\n      backgroundColor: 'rgba(64, 64, 64, 0.75)',\n      margin: '2px',\n      width: '25%',\n      fontWeight: ({ isHeader }) => isHeader ? 'bold' : null,\n      flexDirection: 'row',\n      padding: '2px',\n      paddingTop: '4px',\n    },\n  },\n\n  highlight: {\n    backgroundColor: 'rgba(128, 128, 128, 0.75) !important',\n  },\n}\n\nlet PricesRow = ({ classes, onClick, symbol, minMaxes, isHeader, fromWei, currentPlanet, commodityId }) => {\n  let items = []\n  if (isHeader) {\n    items = planets.slice(0, 7).map(planet => planet.name)\n    items.unshift(null)\n  } else {\n    items = minMaxes.slice()\n    items.unshift({symbol})\n  }\n\n  return (\n    <div\n      onClick={onClick}\n      className={classes.PricesRow}\n    >\n      {items.length && items.map((item, i) => {\n        if (item === null) {\n          // Blank cell\n          return (\n            <div key={uuid()} style={{ opacity: 0 }}>\n              {'n/a'}\n            </div>\n          )\n        } else if (isHeader) {\n          // Display planet names\n          return (\n            <div key={uuid()} className={i - 1 == currentPlanet && classes.highlight}>\n              {item}\n            </div>\n          )\n        } else if (i === 0) {\n          // Display commodity names\n          return (\n            <div key={uuid()} className={commodityId == currentPlanet && classes.highlight}>\n              {item.symbol}\n            </div>\n          )\n        } else {\n          // Min-max range\n          return (\n            <div key={uuid()}>\n              <span key={uuid()}>\n                {item.min && item.min.toString()}\n              </span>\n              <span key={uuid()}>\n                {' - '}\n              </span>\n              <span key={uuid()}>\n                {item.max && item.max.toString()}\n              </span>\n            </div>\n          )\n        }\n      })}\n    </div>\n  )\n}\n\nconst mapStateToProps = state => {\n  return {\n    fromWei: state.web3.utils.fromWei,\n    currentPlanet: state.user.currentPlanet,\n  }\n}\n\nPricesRow = connect(mapStateToProps)(PricesRow)\nPricesRow = injectSheet(styles)(PricesRow)\nexport default PricesRow","import React, { Component, Fragment } from \"react\"\nimport { connect } from 'react-redux'\nimport injectSheet from 'react-jss'\nimport planets from 'utils/planets'\nimport MPIContainer from 'components/screens/planet/MPIContainer'\nimport PricesRow from 'components/reusables/PricesRow'\nimport uuid from 'utils/uuid'\nimport Loader from 'components/reusables/Loader'\nimport commodities from 'utils/commodities'\nimport { debug } from \"util\";\n\nconst styles = {}\n\nclass PlanetPrices extends Component {\n  state = {\n    isLoading: true,\n    commoditiesMinMaxes: [],\n    commodityInfos: [],\n  }\n\n  componentDidMount = async () => {\n    const commodityInfos = await this.getCommodityInfos()\n    this.setState({commodityInfos})\n    this.getAllSellOrders()\n    this.getCommoditiesTraded()\n  }\n\n  getCommodityInfos = async () => {\n    const commodityInfos = []\n\n    return new Promise(async (resolve, reject) => {\n      try {\n        for (let i = 0; i < 7; i++) {\n          commodityInfos.push({\n            name: commodities[i].name,\n            symbol: commodities[i].symbol,\n          })\n        }\n      } catch (e) {\n        return reject(e)\n      }\n\n      resolve(commodityInfos)\n    })\n  }\n\n  getCommoditiesTraded = async () => new Promise(async (resolve, reject) => {\n    /*\n      Returns promise that resolves with array of arrays\n      containing ids of commodities traded on each planet.\n      Parent array of returned 2d-array is indexed by planetId\n    */\n\n    const { contracts, user } = this.props\n\n    try {\n      const tradedOnPlanet = []\n      for (let p = 0; p < 7; p++) {\n        const traded = (await contracts.gea.getCommoditiesTraded(p, { from: user.address }))\n          .toString()\n          .split(',')\n          .map(string => Number(string))\n        tradedOnPlanet.push(traded)\n      }\n      resolve(tradedOnPlanet)\n    } catch (e) {\n      reject(e)\n    }\n  })\n\n  getAllSellOrders = async () => {\n    const { contracts, user, web3 } = this.props\n\n    const tradedOnPlanet = await this.getCommoditiesTraded()\n\n    // Collect all sell orders for each commodity on each planet\n    let commoditiesPrices = []\n    for (let commodityId = 0; commodityId < 7; commodityId++) {\n      const planets = []\n      for (let planetId = 0; planetId < 7; planetId++) {\n        let sellOrders = null // null value to indicate commodity not traded on planet\n\n        if (tradedOnPlanet[planetId].includes(commodityId)) {\n          sellOrders = []\n          try {\n            const numSellOrders = await contracts.gea.getNumSellOrders(planetId, commodityId, { from: user.address })\n            const sellOrderIds = Array.apply(null, {length: parseInt(numSellOrders.toString())}).map(Number.call, Number)\n            sellOrders = await Promise.all(sellOrderIds.map(sellOrderId => new Promise(async (resolve, reject) => {\n              try {\n                const sellOrder = await contracts.gea.getSellOrder(planetId, commodityId, sellOrderId, { from: user.address })\n                resolve(sellOrder)\n              } catch (e) {\n                reject(e)\n              }\n            })))\n          } catch (e) {\n            console.error(e)\n          }\n          // Filter out closed orders\n          sellOrders = sellOrders.filter(order => order.open)\n        }\n\n        planets[planetId] = sellOrders\n      }\n      commoditiesPrices[commodityId] = planets\n    }\n\n    console.table(commoditiesPrices);\n\n    // Change array to only having min/max prices\n    const commoditiesMinMaxes = commoditiesPrices.map((commodity, i) => {\n      console.log('commodity, i', commodity, i);\n      return commodity.map(planet => {\n        console.log('planet', planet);\n        if (Array.isArray(planet) && planet.length) {\n          // If commodity is sold on planet, and there are orders\n          let min = planet[0].price\n          let max = planet[0].price\n\n          for (let i = 1; i < planet.length; i++) {\n            if (planet[i].price.lt(min)) {\n              min = planet[i].price\n            }\n            if (planet[i].price.gt(max)) {\n              max = planet[i].price\n            }\n          }\n\n          return { min, max }\n        } else if (Array.isArray(planet)) {\n          // If commodity is sold on planet, but there are no orders\n          return { min: '', max: '' }\n        } else {\n          // if commodity is not sold on planet\n          return null\n        }\n      })\n    })\n\n    this.setState({ commoditiesMinMaxes, isLoading: false, })\n  }\n\n  render() {\n    const { classes, user } = this.props\n    const { commoditiesMinMaxes, commodityInfos, isLoading } = this.state\n\n    return (\n      <MPIContainer>\n        {isLoading ?\n          <Fragment>\n            <Loader />\n            Loading prices...\n          </Fragment>\n          :\n          <Fragment>\n            <PricesRow isHeader />\n            {commoditiesMinMaxes.length && commoditiesMinMaxes.map((commodityMinMaxes, i) => (\n              <PricesRow\n                key={uuid()}\n                minMaxes={commodityMinMaxes}\n                symbol={commodityInfos[i].symbol}\n                commodityId={i}\n              />\n            ))}\n          </Fragment>\n        }\n      </MPIContainer>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    contracts: state.contracts,\n    user: state.user,\n    web3: state.web3,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  }\n}\n\nPlanetPrices = connect(mapStateToProps, mapDispatchToProps)(PlanetPrices)\nPlanetPrices = injectSheet(styles)(PlanetPrices)\nexport default PlanetPrices;\n","import React, { Component, Fragment } from \"react\"\nimport { connect } from 'react-redux'\nimport injectSheet from 'react-jss'\nimport MPIContainer from 'components/screens/planet/MPIContainer'\nimport Crystal from 'components/reusables/Crystal'\n\nconst styles = {\n  container: {\n    width: '100%',\n    '& > div:first-child': {\n      flex: '0.2',\n    },\n    '& > div:last-child': {\n      flex: '0.8',\n    },\n  },\n  crystalRow: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    '& > div': {\n      border: '1px solid grey',\n      padding: 8,\n    }\n  }\n}\n\nclass TempleMarketplace extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      crystals: [],\n      selectedCrystalId: null,\n      isLoading: false,\n    }\n  }\n\n  componentDidMount = () => {\n    this.getCrystalsForSale()\n  }\n\n  getCrystalsForSale = async () => {\n    const { contracts, user } = this.props\n\n    try {\n      // Get the IDs of each crystal for sale, then get their URIs\n      const crystalIds = await contracts.temple.getCrystalsForSale({ from: user.address })\n      if (crystalIds.length) {\n        const crystals = []\n\n        for (let id of crystalIds) {\n          crystals.push({\n            id: id.toString(),\n            uri: await contracts.temple.crystalURI(id, { from: user.address }),\n          })\n        }\n\n        for (let [i, crystal] of crystals.entries()) {\n          const sellData = await contracts.temple.getCrystalSellData(crystal.id, { from: user.address })\n          crystals[i].price = sellData.price.toString()\n          crystals[i].seller = sellData.seller\n        }\n\n        this.setState({ crystals })\n      }\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  buy = async () => {\n    const { contracts, user } = this.props\n    const { crystals, selectedCrystalId } = this.state\n    const crystal = crystals[crystals.findIndex(crystal => crystal.id === selectedCrystalId)]\n    try {\n      await contracts.temple.buy(selectedCrystalId, { from: user.address, value: crystal.price })\n    } catch (e) {\n      console.error(e)\n    }\n    this.getCrystalsForSale()\n  }\n\n  render() {\n    const { classes } = this.props\n    const {\n      crystals,\n      selectedCrystalId,\n    } = this.state\n\n    const sideButtons = [\n      { fn: this.buy, label: 'Buy' },\n    ]\n\n    return (\n      <MPIContainer sideButtons={sideButtons}>\n        <div className={classes.container}>\n          {crystals.length === 0 && 'There are no crystals for sale right now'}\n          {crystals.map(crystal => (\n            <div\n              key={crystal.id}\n              className={classes.crystalRow}\n              onClick={() => this.setState({ selectedCrystalId: crystal.id })}\n            >\n              <div style={{\n                backgroundColor: selectedCrystalId === crystal.id ? '#fff' : null,\n                color: selectedCrystalId === crystal.id ? '#000' : null,\n              }}>\n                {crystal.id}\n              </div>\n              <div>\n                {crystal.uri}\n              </div>\n              <div>\n                {crystal.price}\n              </div>\n              <div>\n                {crystal.seller}\n              </div>\n              <Crystal uri={crystal.uri} />\n            </div>\n          ))}\n        </div>\n      </MPIContainer>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    contracts: state.contracts,\n    user: state.user,\n    web3: state.web3,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setDialogBox: (content, flavour)=> dispatch({ type: 'SET_DIALOG_BOX', content, flavour }),\n  }\n}\n\nTempleMarketplace = connect(mapStateToProps, mapDispatchToProps)(TempleMarketplace)\nTempleMarketplace = injectSheet(styles)(TempleMarketplace)\nexport default TempleMarketplace;\n","import React, { Component, Fragment } from \"react\"\nimport { connect } from 'react-redux'\nimport injectSheet from 'react-jss'\nimport Laserframe from 'components/reusables/Laserframe'\nimport MPIContainer from 'components/screens/planet/MPIContainer'\nimport getPlayerInfo from 'utils/getPlayerInfo'\nimport Loader from 'components/reusables/Loader'\nimport Crystal from 'components/reusables/Crystal'\nimport Sound from 'react-sound';\nimport aCrystalWasForged from 'assets/sounds/aCrystalWasForged.wav'\nimport getErrorMsg from 'utils/getErrorMsg'\n\nconst styles = {\n  acceptDecline: {\n    flexDirection: 'row',\n  }\n}\n\nconst defaultButtonText = 'Forge'\n\nclass TempleIndustrial extends Component {\n  constructor() {\n    super()\n    this.state = {\n      isLoading: false,\n      playSound: false,\n      buttonText: defaultButtonText,\n    }\n  }\n\n  forge = async () => {\n    const { contracts, user, setDialogBox } = this.props\n\n    this.setState({\n      isLoading: true,\n      buttonText: 'Waiting for signature...'\n    })\n\n    contracts.temple.forge({ from: user.address })\n      .on('transactionHash', () => {\n        this.setState({\n          buttonText: 'Waiting for confirmation...'\n        })\n      })\n      .on('receipt', () => {\n        getPlayerInfo()\n        this.getLatestCrystalURI()\n      })\n      .on('error', e => {\n        setDialogBox(getErrorMsg(e.message), \"bad\")\n        this.setState({\n          isLoading: false,\n          buttonText: 'Forge',\n        })\n      })\n  }\n\n  getLatestCrystalURI = async () => {\n    const { contracts, user } = this.props\n    let lastURI\n\n    this.setState({\n      isLoading: true\n    })\n\n    try {\n      const crystalIds = await contracts.temple.crystalsOfOwner(user.address, { from: user.address })\n      const lastId = crystalIds[crystalIds.length - 1]\n      lastURI = await contracts.temple.crystalURI(lastId, { from:user.address })\n    } catch (e) {\n      console.error(e)\n    }\n\n    this.setState({\n      crystalURI: lastURI,\n      isLoading: false,\n      playSound: true,\n      buttonText: defaultButtonText,\n    }, () => {\n      this.props.setDialogBox(\n        <Fragment>\n          You have forged a new crystal!\n          {lastURI && <Crystal uri={lastURI} />}\n        </Fragment>,\n        'good',\n      )\n    })\n  }\n\n  render() {\n    const { classes } = this.props\n    const { isLoading, playSound, buttonText } = this.state\n\n    return (\n      <MPIContainer>\n        <Laserframe\n          size=\"wide\"\n        >\n          <div>Would like to forge a crystal?</div>\n          <div>(Requires 10,000 kg of all 7 commodities)</div>\n          <div className={classes.acceptDecline}>\n              <Fragment>\n                <Laserframe\n                  isButton={!isLoading}\n                  flavour=\"good\"\n                  onClick={this.forge}\n                >{buttonText}{isLoading && <Loader />}</Laserframe>\n              </Fragment>\n          </div>\n        </Laserframe>\n        <Sound\n          url={aCrystalWasForged}\n          playStatus={playSound && Sound.status.PLAYING}\n          volume={25}\n          onFinishedPlaying={() => this.setState({ playSound: false })}\n        />\n      </MPIContainer>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    contracts: state.contracts,\n    user: state.user,\n    web3: state.web3,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setDialogBox: (content, flavour)=> dispatch({ type: 'SET_DIALOG_BOX', content, flavour }),\n  }\n}\n\nTempleIndustrial = connect(mapStateToProps, mapDispatchToProps)(TempleIndustrial)\nTempleIndustrial = injectSheet(styles)(TempleIndustrial)\nexport default TempleIndustrial;\n","import React, { Component, Fragment } from \"react\"\nimport { connect } from 'react-redux'\nimport injectSheet from 'react-jss'\nimport Laserframe from 'components/reusables/Laserframe'\nimport MPIContainer from 'components/screens/planet/MPIContainer'\nimport handleChange from 'utils/handleChange'\nimport Loader from 'components/reusables/Loader'\nimport Crystal from 'components/reusables/Crystal'\n\nconst styles = {\n  crystalRow: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    '& > div': {\n      border: '1px solid grey',\n      padding: 8,\n    }\n  },\n  sellBox: {\n    '& > div:nth-child(3)': {\n      marginBottom: '1em',\n    },\n  },\n}\n\nclass TempleViewCrystals extends Component {\n  constructor() {\n    super()\n    this.state = {\n      crystals: [],\n      sellAmount: '',\n      sellPrice: '',\n      isSellBoxVisible: false,\n      isLoading: false,\n      selectedCrystalId: null,\n    }\n    this.handleChange = handleChange.bind(this)\n  }\n\n  componentDidMount = () => {\n    this.crystalsOfOwner()\n  }\n\n  crystalsOfOwner = async () => {\n    const { contracts, user } = this.props\n    const crystals = []\n\n    this.setState({ isLoading: true })\n\n    try {\n      const crystalIds = await contracts.temple.crystalsOfOwner(user.address, { from: user.address })\n      if (crystalIds && crystalIds.length) {\n        for (let id of crystalIds) {\n          crystals.push({\n            id: id.toString(),\n            uri: await contracts.temple.crystalURI(id, { from:user.address })\n          })\n        }\n      }\n    } catch (e) {\n      console.error(e)\n    }\n\n    console.log('crystals', crystals);\n\n    this.setState({\n      crystals: crystals.reverse(),\n      isLoading: false\n    })\n  }\n\n  onClickSell = () => {\n    const { selectedCrystalId, sellPrice, crystals } = this.state\n    const { classes } = this.props\n    const crystal = crystals.find(crystal => crystal.id === selectedCrystalId)\n\n    this.props.setDialogBox(\n      <div className={classes.sellBox}>\n        <div>\n          Are you sure you want to sell this crystal?\n        </div>\n        <Crystal uri={crystal.uri} />\n        <div>\n          Id {selectedCrystalId}\n        </div>\n        <div>\n          <div>Price</div>\n          <input name=\"sellPrice\" defaultValue={sellPrice} type=\"number\" onChange={this.handleChange}></input>\n        </div>\n        <Laserframe\n          flavour=\"info\"\n          isButton\n          onClick={this.sell}\n        >Ok</Laserframe>\n      </div>,\n      'info',\n      true,\n    )\n  }\n\n  sell = async () => {\n    const { contracts, user } = this.props\n    const { selectedCrystalId, sellPrice } = this.state\n\n    try {\n      await contracts.temple.sell(selectedCrystalId, sellPrice, { from: user.address })\n    } catch (e) {\n      console.error(e)\n    }\n\n    this.crystalsOfOwner()\n    this.props.setDialogBox(null)\n  }\n\n  render() {\n    const { classes } = this.props\n    const {\n      crystals,\n      isLoading,\n      selectedCrystalId,\n    } = this.state\n\n    const sideButtons = [\n      { fn: this.onClickSell, label: 'Sell' },\n    ]\n\n    return (\n      <MPIContainer sideButtons={sideButtons}>\n        {isLoading ?\n          <Fragment>\n            <Loader />\n            Loading crystals...\n          </Fragment>\n          :\n          <div className={classes.container}>\n            {crystals.map((crystal, i) =>\n              <div\n                key={i}\n                className={classes.crystalRow}\n                onClick={() => this.setState({ selectedCrystalId: crystal.id })}\n              >\n                <div style={{\n                  backgroundColor: selectedCrystalId === crystal.id ? '#fff' : null,\n                  color: selectedCrystalId === crystal.id ? '#000' : null,\n                }}>\n                  {crystal.id}\n                </div>\n                <div>\n                  {crystal.uri}\n                </div>\n                <Crystal uri={crystal.uri} />\n              </div>\n            )}\n          </div>\n        }\n      </MPIContainer>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    contracts: state.contracts,\n    user: state.user,\n    web3: state.web3,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setDialogBox: (content, flavour, noDefaultButton) =>\n      dispatch({ type: 'SET_DIALOG_BOX', content, flavour, noDefaultButton }),\n  }\n}\n\nTempleViewCrystals = connect(mapStateToProps, mapDispatchToProps)(TempleViewCrystals)\nTempleViewCrystals = injectSheet(styles)(TempleViewCrystals)\nexport default TempleViewCrystals;\n","import React from \"react\";\nimport injectSheet from 'react-jss'\nimport colorFromFlavour from 'utils/colorFromFlavour'\n\nconst styles = {\n  Dialog: {\n    border: ({ flavour }) => '1px solid ' + colorFromFlavour(flavour),\n    color: '#fff',\n    width: 'fit-content',\n    borderRadius: 4,\n    padding: '16px',\n    textAlign: \"center\",\n    position: 'absolute',\n    zIndex: 3,\n    backgroundColor: '#000',\n  },\n  backdrop: {\n    display: ({ isVisible }) => isVisible ? 'flex' : 'none',\n    zIndex: 2,\n    position: 'absolute',\n    background: 'rgba(0, 0, 0, 0.75)',\n    height: '100vh',\n    width: '100vw',\n  }\n}\n\nlet Dialog = ({ classes, children }) => (\n  <div className={classes.backdrop}>\n    <div className={classes.Dialog}>\n      { children }\n    </div>\n  </div>\n)\n\nDialog = injectSheet(styles)(Dialog)\nexport default Dialog;\n","import React, { Component } from \"react\"\nimport { connect } from 'react-redux'\nimport injectSheet from 'react-jss'\nimport globalStyles from 'globalStyles'\n\nimport commoditiesJSON from \"contracts/Commodities.json\"\nimport gtaJSON from \"contracts/GalacticTransitAuthority.json\"\nimport geaJSON from \"contracts/GalacticEconomicAuthority.json\"\nimport giaJSON from \"contracts/GalacticIndustrialAuthority.json\"\nimport templeJSON from \"contracts/TempleAuthority.json\"\n\nimport getWeb3 from \"utils/getWeb3\"\nimport truffleContract from \"truffle-contract\"\n\nimport screenMapping from 'utils/screenMapping'\nimport Dialog from 'components/reusables/Dialog'\nimport Laserframe from 'components/reusables/Laserframe'\n\nimport getPlayerInfo from 'utils/getPlayerInfo'\nimport planets from 'utils/planets'\n\nclass App extends Component {\n  state = {\n    isInitialized: null,\n  }\n\n  componentDidMount = async () => {\n    try {\n      await this.initWeb3AndContracts()\n      await this.initEventListening()\n\n      let ownsSpaceship\n      ownsSpaceship = await this.checkIfOwnsSpaceship()\n\n      if (ownsSpaceship) {\n        await getPlayerInfo()\n      } else {\n        this.props.changeScreen('Welcome')\n      }\n\n    } catch (e) {\n      return console.error(e)\n    }\n\n    this.setState({ isInitialized: true })\n  }\n\n  initWeb3AndContracts = () => new Promise(async (resolve, reject) => {\n    try {\n      // Save web3 in redux store\n      const web3 = await getWeb3()\n      this.props.setWeb3(web3)\n\n      // Save account in redux store\n      const accounts = await web3.eth.getAccounts()\n      this.props.setAddress(accounts[0])\n\n      // Get all contract instances\n      let contracts = [\n        { json: commoditiesJSON, name: 'commodities' },\n        { json: gtaJSON, name: 'gta' },\n        { json: geaJSON, name: 'gea' },\n        { json: giaJSON, name: 'gia' },\n        { json: templeJSON, name: 'temple' },\n      ]\n\n      contracts = await Promise.all(\n        contracts.map(contract => new Promise(async (resolve, reject) => {\n          const Contract = truffleContract(contract.json)\n          Contract.setProvider(web3.currentProvider)\n          try {\n            const instance = await Contract.deployed()\n            resolve({\n              instance: instance,\n              name: contract.name,\n            })\n          } catch (e) {\n            reject(e)\n          }\n        }))\n      )\n\n      // Save the contracts to redux store\n      contracts.forEach(contract => this.props.addContract(contract.instance, contract.name))\n\n      resolve()\n\n    } catch (e) {\n      // Catch any errors for any of the above operations.\n      reject(e)\n    }\n  })\n\n  initEventListening = () => {\n    const { contracts, user, setIndustrialState, web3, setEthState } = this.props\n\n    contracts.gia.CommodityMined({ fromBlock: 'latest' })\n      .on('data', data => {\n        const { _miner, _hash } = data.returnValues\n\n        setIndustrialState({\n          // Reset areas mined because there is a new prevHash\n          areasMined: [],\n          prevMiningHash: _hash,\n        })\n\n        // To refresh commodity amounts if current user was the miner\n        if (_miner === user.address) {\n          getPlayerInfo()\n        }\n      })\n\n    // Listen for new blocks\n    web3.eth.subscribe('newBlockHeaders')\n      .on('data', data => {\n          // Store current block number in store (not used)\n          setEthState({ blockNumber: data.number })\n        })\n  }\n\n  checkIfOwnsSpaceship = () => new Promise(async (resolve, reject) => {\n    const { contracts, user } = this.props\n\n    let spaceshipsOwned\n    try {\n      spaceshipsOwned = await contracts.gta.balanceOf(user.address, { from: user.address })\n    } catch (e) {\n      return reject(e)\n    }\n\n    if (spaceshipsOwned.toString() === '0') {\n      this.props.setUserInfo({ ownsSpaceship: false })\n      return resolve(false)\n    }\n\n    this.props.setUserInfo({ ownsSpaceship: true })\n    resolve(true)\n  })\n\n  componentDidCatch = (error, errorInfo) => {\n    console.error(error, errorInfo)\n  }\n\n  render() {\n    const { isInitialized } = this.state\n    const { classes, currentScreen, dialogBox, closeDialogBox, user } = this.props\n    const planet = planets.find(planet => planet.id == user.currentPlanet)\n\n    if (!isInitialized) {\n      return <div>Activating L-337 Nanobulators...</div>\n    }\n\n    const bgImage = () => {\n      const styleObject = {}\n      if (\n        (currentScreen.substr(0, 6) === 'Planet' || currentScreen.substr(0, 6) === 'Temple')&&\n        currentScreen !== 'PlanetIntro' && currentScreen !== 'TempleIntro'\n      ) {\n        styleObject.backgroundImage = `url(${planet.img})`\n      }\n      if (user.currentPlanet == '255') {\n        styleObject.backgroundPosition = '50% 40%'\n        styleObject.backgroundSize = '50%'\n      }\n      return styleObject\n    }\n\n    return (\n      <div className={classes.App} style={bgImage()}>\n        {/* Render current screen */}\n        {screenMapping(currentScreen)}\n        {/* Global dialog box */}\n        <Dialog flavour={dialogBox.flavour} isVisible={dialogBox.content}>\n          {dialogBox.content}\n          {!dialogBox.noDefaultButton &&\n            <Laserframe\n              flavour={dialogBox.flavour}\n              isButton\n              onClick={closeDialogBox}\n            >Ok</Laserframe>\n          }\n        </Dialog>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentScreen: state.view.currentScreen,\n    contracts: state.contracts,\n    user: state.user,\n    dialogBox: state.view.dialogBox,\n    web3: state.web3,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setWeb3: web3 => dispatch({ type: 'SET_WEB3', web3 }),\n    addContract: (instance, name) => dispatch({ type: 'ADD_CONTRACT', instance, name }),\n    setAddress: address => dispatch({ type: 'SET_ADDRESS', address }),\n    setUserInfo: info => dispatch({ type: 'SET_USER_INFO', info }),\n    setIndustrialState: industrialState => dispatch({ type: 'SET_INDUSTRIAL_STATE', industrialState }),\n    setEthState: ethState => dispatch({ type: 'SET_ETH_STATE', ethState }),\n    closeDialogBox: () => dispatch({ type: 'SET_DIALOG_BOX', content: '' }),\n    changeScreen: screen => dispatch({ type: 'CHANGE_SCREEN', screen }),\n  }\n}\n\nApp = connect(mapStateToProps, mapDispatchToProps)(App)\nApp = injectSheet(globalStyles)(App)\nexport default App\n","import React from \"react\"\n\nimport Welcome from \"components/screens/Welcome\"\nimport SpaceshipDealer from \"components/screens/SpaceshipDealer\"\n\nimport Travel from  \"components/screens/Travel\"\nimport Travelling from  \"components/screens/Travelling\"\n\nimport PlanetIntro from  \"components/screens/planet/PlanetIntro\"\nimport PlanetHome from  \"components/screens/planet/PlanetHome\"\nimport PlanetMarketplace from  \"components/screens/planet/PlanetMarketplace\"\nimport PlanetIndustrial from  \"components/screens/planet/PlanetIndustrial\"\nimport PlanetPrices from  \"components/screens/planet/PlanetPrices\"\n\nimport TempleMarketplace from  \"components/screens/planet/TempleMarketplace\"\nimport TempleIndustrial from  \"components/screens/planet/TempleIndustrial\"\nimport TempleViewCrystals from  \"components/screens/planet/TempleViewCrystals\"\n\nexport default screen => {\n  switch(screen) {\n    case 'Welcome': return <Welcome />\n    case 'SpaceshipDealer': return <SpaceshipDealer/>\n\n    case 'Travel': return <Travel/>\n    case 'Travelling': return <Travelling/>\n\n    case 'PlanetIntro': return <PlanetIntro/>\n    case 'PlanetHome': return <PlanetHome/>\n    case 'PlanetMarketplace': return <PlanetMarketplace/>\n    case 'PlanetIndustrial': return <PlanetIndustrial/>\n    case 'PlanetPrices': return <PlanetPrices/>\n\n    case 'TempleMarketplace': return <TempleMarketplace/>\n    case 'TempleIndustrial': return <TempleIndustrial/>\n    case 'TempleViewCrystals': return <TempleViewCrystals/>\n    default: break\n  }\n}","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nimport { Provider } from \"react-redux\";\nimport { store, persistor } from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react'\nimport Loader from 'components/reusables/Loader'\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={<Loader />} persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n);\n\nregisterServiceWorker();\n","module.exports = __webpack_public_path__ + \"static/media/spaceship.9cbc836b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/receivedSomething.d8e37266.wav\";"],"sourceRoot":""}